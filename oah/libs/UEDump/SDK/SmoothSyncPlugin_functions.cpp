#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmoothSyncPlugin

#include "Basic.hpp"

#include "SmoothSyncPlugin_classes.hpp"
#include "SmoothSyncPlugin_parameters.hpp"


namespace SDK
{

// Function SmoothSyncPlugin.SmoothSync.clearBuffer
// (Final, Native, Public, BlueprintCallable)

void USmoothSync::ClearBuffer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "clearBuffer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.ClientSendsTransformToServer
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// TArray<uint8>                           Value                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USmoothSync::ClientSendsTransformToServer(const TArray<uint8>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "ClientSendsTransformToServer");

	Params::SmoothSync_ClientSendsTransformToServer Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.enableSmoothSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmoothSync::EnableSmoothSync(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "enableSmoothSync");

	Params::SmoothSync_EnableSmoothSync Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.forceStateSendNextFrame
// (Final, Native, Public, BlueprintCallable)

void USmoothSync::ForceStateSendNextFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "forceStateSendNextFrame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.ServerSendsTransformToEveryone
// (Net, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// TArray<uint8>                           Value                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USmoothSync::ServerSendsTransformToEveryone(const TArray<uint8>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "ServerSendsTransformToEveryone");

	Params::SmoothSync_ServerSendsTransformToEveryone Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.setSceneComponentToSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TheComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmoothSync::SetSceneComponentToSync(class USceneComponent* TheComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "setSceneComponentToSync");

	Params::SmoothSync_SetSceneComponentToSync Parms{};

	Parms.TheComponent = TheComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.SmoothSyncEnableClientToServer
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmoothSync::SmoothSyncEnableClientToServer(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "SmoothSyncEnableClientToServer");

	Params::SmoothSync_SmoothSyncEnableClientToServer Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.SmoothSyncEnableServerToClients
// (Net, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmoothSync::SmoothSyncEnableServerToClients(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "SmoothSyncEnableServerToClients");

	Params::SmoothSync_SmoothSyncEnableServerToClients Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.SmoothSyncTeleportClientToServer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TempOwnerTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmoothSync::SmoothSyncTeleportClientToServer(const struct FVector& Position, const struct FVector& Rotation, const struct FVector& Scale, float TempOwnerTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "SmoothSyncTeleportClientToServer");

	Params::SmoothSync_SmoothSyncTeleportClientToServer Parms{};

	Parms.Position = std::move(Position);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.TempOwnerTime = TempOwnerTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.SmoothSyncTeleportServerToClients
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TempOwnerTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmoothSync::SmoothSyncTeleportServerToClients(const struct FVector& Position, const struct FVector& Rotation, const struct FVector& Scale, float TempOwnerTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "SmoothSyncTeleportServerToClients");

	Params::SmoothSync_SmoothSyncTeleportServerToClients Parms{};

	Parms.Position = std::move(Position);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.TempOwnerTime = TempOwnerTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SmoothSyncPlugin.SmoothSync.teleport
// (Final, Native, Public, BlueprintCallable)

void USmoothSync::Teleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmoothSync", "teleport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

