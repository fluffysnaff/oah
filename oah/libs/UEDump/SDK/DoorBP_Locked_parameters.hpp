#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DoorBP_Locked

#include "Basic.hpp"


namespace SDK::Params
{

// Function DoorBP_Locked.DoorBP_Locked_C.ExplodeDoor
// 0x0008 (0x0008 - 0x0000)
struct DoorBP_Locked_C_ExplodeDoor final
{
public:
	class AActor*                                 Param_Instigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DoorBP_Locked_C_ExplodeDoor) == 0x000008, "Wrong alignment on DoorBP_Locked_C_ExplodeDoor");
static_assert(sizeof(DoorBP_Locked_C_ExplodeDoor) == 0x000008, "Wrong size on DoorBP_Locked_C_ExplodeDoor");
static_assert(offsetof(DoorBP_Locked_C_ExplodeDoor, Param_Instigator) == 0x000000, "Member 'DoorBP_Locked_C_ExplodeDoor::Param_Instigator' has a wrong offset!");

// Function DoorBP_Locked.DoorBP_Locked_C.ExecuteUbergraph_DoorBP_Locked
// 0x0020 (0x0020 - 0x0000)
struct DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Instigator;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AUnlockCollision_C*                     K2Node_DynamicCast_AsUnlock_Collision;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked) == 0x000008, "Wrong alignment on DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked");
static_assert(sizeof(DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked) == 0x000020, "Wrong size on DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked");
static_assert(offsetof(DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked, EntryPoint) == 0x000000, "Member 'DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked::EntryPoint' has a wrong offset!");
static_assert(offsetof(DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked, K2Node_Event_Instigator) == 0x000008, "Member 'DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked::K2Node_Event_Instigator' has a wrong offset!");
static_assert(offsetof(DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked, K2Node_DynamicCast_AsUnlock_Collision) == 0x000010, "Member 'DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked::K2Node_DynamicCast_AsUnlock_Collision' has a wrong offset!");
static_assert(offsetof(DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'DoorBP_Locked_C_ExecuteUbergraph_DoorBP_Locked::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

