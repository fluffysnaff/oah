#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpotPlayerComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SpotPlayerComponent.SpotPlayerComponent_C
// 0x0060 (0x0110 - 0x00B0)
class USpotPlayerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APlayerCharacter_C*                     SpottedPlayer;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_time;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PlayerSpotted;                                     // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             CancelPlayerSpotted;                               // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWarningDirectionIndicator_C*           WarningWidget;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FloatingWarning_;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             StartSpotSound;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USoundBase*                             SpottedSound;                                      // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          AlwaysStartSoundAt0;                               // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void PlayerSpotted__DelegateSignature(class APawn* Player);
	void CancelPlayerSpotted__DelegateSignature();
	void ExecuteUbergraph_SpotPlayerComponent(int32 EntryPoint);
	void StopFloatingWarning();
	void FloatingWarning(float WarningTime, float UpdateTime, class UPrimitiveComponent* AttachComponent, bool Question_);
	void Spotted();
	void UnspotPlayer();
	void SpotPlayer(class APawn* Pawn, float Alert_time, float Update_time, float Min_time, float Max_time);
	float SpotTimeDistance();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SpotPlayerComponent_C">();
	}
	static class USpotPlayerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpotPlayerComponent_C>();
	}
};
static_assert(alignof(USpotPlayerComponent_C) == 0x000008, "Wrong alignment on USpotPlayerComponent_C");
static_assert(sizeof(USpotPlayerComponent_C) == 0x000110, "Wrong size on USpotPlayerComponent_C");
static_assert(offsetof(USpotPlayerComponent_C, UberGraphFrame) == 0x0000B0, "Member 'USpotPlayerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, SpottedPlayer) == 0x0000B8, "Member 'USpotPlayerComponent_C::SpottedPlayer' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, Spot_time) == 0x0000C0, "Member 'USpotPlayerComponent_C::Spot_time' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, PlayerSpotted) == 0x0000C8, "Member 'USpotPlayerComponent_C::PlayerSpotted' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, CancelPlayerSpotted) == 0x0000D8, "Member 'USpotPlayerComponent_C::CancelPlayerSpotted' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, WarningWidget) == 0x0000E8, "Member 'USpotPlayerComponent_C::WarningWidget' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, FloatingWarning_) == 0x0000F0, "Member 'USpotPlayerComponent_C::FloatingWarning_' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, StartSpotSound) == 0x0000F8, "Member 'USpotPlayerComponent_C::StartSpotSound' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, SpottedSound) == 0x000100, "Member 'USpotPlayerComponent_C::SpottedSound' has a wrong offset!");
static_assert(offsetof(USpotPlayerComponent_C, AlwaysStartSoundAt0) == 0x000108, "Member 'USpotPlayerComponent_C::AlwaysStartSoundAt0' has a wrong offset!");

}

