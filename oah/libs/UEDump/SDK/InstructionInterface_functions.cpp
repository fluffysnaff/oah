#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InstructionInterface

#include "Basic.hpp"

#include "InstructionInterface_classes.hpp"
#include "InstructionInterface_parameters.hpp"


namespace SDK
{

// Function InstructionInterface.InstructionInterface_C.NewInstruction
// (Public, BlueprintCallable, BlueprintEvent)

void IInstructionInterface_C::NewInstruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstructionInterface_C", "NewInstruction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InstructionInterface.InstructionInterface_C.OverrideInstruction
// (Public, BlueprintCallable, BlueprintEvent)

void IInstructionInterface_C::OverrideInstruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstructionInterface_C", "OverrideInstruction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InstructionInterface.InstructionInterface_C.AnnounceNewInstructionWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IInstructionInterface_C::AnnounceNewInstructionWidget(const class FString& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstructionInterface_C", "AnnounceNewInstructionWidget");

	Params::InstructionInterface_C_AnnounceNewInstructionWidget Parms{};

	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InstructionInterface.InstructionInterface_C.GetCurrentInstruction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInstructionStruct               Instruction                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void IInstructionInterface_C::GetCurrentInstruction(struct FInstructionStruct* Instruction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstructionInterface_C", "GetCurrentInstruction");

	Params::InstructionInterface_C_GetCurrentInstruction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Instruction != nullptr)
		*Instruction = std::move(Parms.Instruction);
}

}

