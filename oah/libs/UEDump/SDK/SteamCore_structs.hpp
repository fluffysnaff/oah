#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamCore

#include "Basic.hpp"

#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK
{

// Enum SteamCore.ESteamResult
// NumValues: 0x0073
enum class ESteamResult : uint8
{
	None                                     = 0,
	OK                                       = 1,
	Fail                                     = 2,
	NoConnection                             = 3,
	SultNoConnectionRetry                    = 4,
	InvalidPassword                          = 5,
	LoggedInElsewhere                        = 6,
	InvalidProtocolVer                       = 7,
	InvalidParam                             = 8,
	FileNotFound                             = 9,
	Busy                                     = 10,
	InvalidState                             = 11,
	InvalidName                              = 12,
	InvalidEmail                             = 13,
	DuplicateName                            = 14,
	AccessDenied                             = 15,
	Timeout                                  = 16,
	Banned                                   = 17,
	AccountNotFound                          = 18,
	InvalidSteamID                           = 19,
	ServiceUnavailable                       = 20,
	NotLoggedOn                              = 21,
	Pending                                  = 22,
	EncryptionFailure                        = 23,
	InsufficientPrivilege                    = 24,
	LimitExceeded                            = 25,
	Revoked                                  = 26,
	Expired                                  = 27,
	AlreadyRedeemed                          = 28,
	DuplicateRequest                         = 29,
	AlreadyOwned                             = 30,
	IPNotFound                               = 31,
	PersistFailed                            = 32,
	LockingFailed                            = 33,
	LogonSessionReplaced                     = 34,
	ConnectFailed                            = 35,
	HandshakeFailed                          = 36,
	IOFailure                                = 37,
	RemoteDisconnect                         = 38,
	ShoppingCartNotFound                     = 39,
	Blocked                                  = 40,
	Ignored                                  = 41,
	NoMatch                                  = 42,
	AccountDisabled                          = 43,
	ServiceReadOnly                          = 44,
	AccountNotFeatured                       = 45,
	AdministratorOK                          = 46,
	ContentVersion                           = 47,
	TryAnotherCM                             = 48,
	PasswordRequiredToKickSession            = 49,
	AlreadyLoggedInElsewhere                 = 50,
	Suspended                                = 51,
	Cancelled                                = 52,
	DataCorruption                           = 53,
	DiskFull                                 = 54,
	RemoteCallFailed                         = 55,
	PasswordUnset                            = 56,
	ExternalAccountUnlinked                  = 57,
	PSNTicketInvalid                         = 58,
	ExternalAccountAlreadyLinked             = 59,
	RemoteFileConflict                       = 60,
	IllegalPassword                          = 61,
	SameAsPreviousValue                      = 62,
	AccountLogonDenied                       = 63,
	CannotUseOldPassword                     = 64,
	InvalidLoginAuthCode                     = 65,
	AccountLogonDeniedNoMail                 = 66,
	HardwareNotCapableOfIPT                  = 67,
	IPTInitError                             = 68,
	ParentalControlRestricted                = 69,
	FacebookQueryError                       = 70,
	ExpiredLoginAuthCode                     = 71,
	IPLoginRestrictionFailed                 = 72,
	AccountLockedDown                        = 73,
	AccountLogonDeniedVerifiedEmailRequired  = 74,
	NoMatchingURL                            = 75,
	BadResponse                              = 76,
	RequirePasswordReEntry                   = 77,
	ValueOutOfRange                          = 78,
	UnexpectedError                          = 79,
	Disabled                                 = 80,
	InvalidCEGSubmission                     = 81,
	RestrictedDevice                         = 82,
	RegionLocked                             = 83,
	RateLimitExceeded                        = 84,
	AccountLoginDeniedNeedTwoFactor          = 85,
	ItemDeleted                              = 86,
	AccountLoginDeniedThrottle               = 87,
	TwoFactorCodeMismatch                    = 88,
	TwoFactorActivationCodeMismatch          = 89,
	AccountAssociatedToMultiplePartners      = 90,
	NotModified                              = 91,
	NoMobileDevice                           = 92,
	TimeNotSynced                            = 93,
	SmsCodeFailed                            = 94,
	AccountLimitExceeded                     = 95,
	AccountActivityLimitExceeded             = 96,
	PhoneActivityLimitExceeded               = 97,
	RefundToWallet                           = 98,
	EmailSendFailure                         = 99,
	NotSettled                               = 100,
	NeedCaptcha                              = 101,
	GSLTDenied                               = 102,
	GSOwnerDenied                            = 103,
	InvalidItemType                          = 104,
	IPBanned                                 = 105,
	GSLTExpired                              = 106,
	InsufficientFunds                        = 107,
	TooManyPending                           = 108,
	NoSiteLicensesFound                      = 109,
	WGNetworkSendExceeded                    = 110,
	AccountNotFriends                        = 111,
	LimitedUserAccount                       = 112,
	CantRemoveItem                           = 113,
	ESteamResult_MAX                         = 114,
};

// Enum SteamCore.ESteamMessageType
// NumValues: 0x0004
enum class ESteamMessageType : uint8
{
	ENotification                            = 0,
	EMessage                                 = 1,
	EWarning                                 = 2,
	ESteamMessageType_MAX                    = 3,
};

// Enum SteamCore.ESteamPersonaChange
// NumValues: 0x000F
enum class ESteamPersonaChange : uint8
{
	Name                                     = 0,
	Status                                   = 1,
	ComeOnline                               = 2,
	GoneOffline                              = 3,
	GamePlayed                               = 4,
	GameServer                               = 5,
	Avatar                                   = 6,
	JoinedSource                             = 7,
	LeftSource                               = 8,
	RelationshipChanged                      = 9,
	NameFirstSet                             = 10,
	FacebookInfo                             = 11,
	Nickname                                 = 12,
	SteamLevel                               = 13,
	ESteamPersonaChange_MAX                  = 14,
};

// Enum SteamCore.ESteamChatRoomEnterResponse
// NumValues: 0x000E
enum class ESteamChatRoomEnterResponse : uint8
{
	None                                     = 0,
	Success                                  = 1,
	DoesntExist                              = 2,
	NotAllowed                               = 3,
	Full                                     = 4,
	Error                                    = 5,
	Banned                                   = 6,
	Limited                                  = 7,
	ClanDisabled                             = 8,
	CommunityBan                             = 9,
	MemberBlockedYou                         = 10,
	YouBlockedMember                         = 11,
	RatelimitExceeded                        = 15,
	ESteamChatRoomEnterResponse_MAX          = 16,
};

// Enum SteamCore.ESteamPlayerAcceptState
// NumValues: 0x0004
enum class ESteamPlayerAcceptState : uint8
{
	Unknown                                  = 0,
	PlayerAccepted                           = 1,
	PlayerDeclined                           = 2,
	ESteamPlayerAcceptState_MAX              = 3,
};

// Enum SteamCore.ESteamAuthSessionResponse
// NumValues: 0x000B
enum class ESteamAuthSessionResponse : uint8
{
	OK                                       = 0,
	UserNotConnectedToSteam                  = 1,
	NoLicenseOrExpired                       = 2,
	VACBanned                                = 3,
	LoggedInElseWhere                        = 4,
	VACCheckTimedOut                         = 5,
	AuthTicketCanceled                       = 6,
	AuthTicketInvalidAlreadyUsed             = 7,
	AuthTicketInvalid                        = 8,
	PublisherIssuedBan                       = 9,
	ESteamAuthSessionResponse_MAX            = 10,
};

// Enum SteamCore.ESteamDenyReason
// NumValues: 0x0011
enum class ESteamDenyReason : uint8
{
	Invalid                                  = 0,
	InvalidVersion                           = 1,
	Generic                                  = 2,
	NotLoggedOn                              = 3,
	NoLicense                                = 4,
	Cheater                                  = 5,
	LoggedInElseWhere                        = 6,
	UnknownText                              = 7,
	IncompatibleAnticheat                    = 8,
	MemoryCorruption                         = 9,
	IncompatibleSoftware                     = 10,
	SteamConnectionLost                      = 11,
	SteamConnectionError                     = 12,
	SteamResponseTimedOut                    = 13,
	SteamValidationStalled                   = 14,
	SteamOwnerLeftGuestUser                  = 15,
	ESteamDenyReason_MAX                     = 16,
};

// Enum SteamCore.ESteamFavoriteFlags
// NumValues: 0x0004
enum class ESteamFavoriteFlags : uint8
{
	None                                     = 0,
	Favorite                                 = 1,
	History                                  = 2,
	ESteamFavoriteFlags_MAX                  = 3,
};

// Enum SteamCore.ESteamChatEntryType
// NumValues: 0x000D
enum class ESteamChatEntryType : uint8
{
	Invalid                                  = 0,
	ChatMsg                                  = 1,
	Typing                                   = 2,
	InviteGame                               = 3,
	Emote                                    = 4,
	LeftConversation                         = 6,
	Entered                                  = 7,
	WasKicked                                = 8,
	WasBanned                                = 9,
	Disconnected                             = 10,
	HistoricalChat                           = 11,
	LinkBlocked                              = 14,
	ESteamChatEntryType_MAX                  = 15,
};

// Enum SteamCore.ESteamChatMemberStateChange
// NumValues: 0x0002
enum class ESteamChatMemberStateChange : uint8
{
	None                                     = 0,
	ESteamChatMemberStateChange_MAX          = 1,
};

// Enum SteamCore.ESteamP2PSessionError
// NumValues: 0x0006
enum class ESteamP2PSessionError : uint8
{
	None                                     = 0,
	NotRunningApp                            = 1,
	NoRightsToApp                            = 2,
	DestinationNotLoggedIn                   = 3,
	Timeout                                  = 4,
	Max                                      = 5,
};

// Enum SteamCore.ESteamFailureType
// NumValues: 0x0003
enum class ESteamFailureType : uint8
{
	FlushedCallbackQueue                     = 0,
	PipeFail                                 = 1,
	ESteamFailureType_MAX                    = 2,
};

// Enum SteamCore.ESteamCheckFileSignature
// NumValues: 0x0006
enum class ESteamCheckFileSignature : uint8
{
	InvalidSignature                         = 0,
	ValidSignature                           = 1,
	FileNotFound                             = 2,
	NoSignaturesFoundForThisApp              = 3,
	NoSignaturesFoundForThisFile             = 4,
	ESteamCheckFileSignature_MAX             = 5,
};

// Enum SteamCore.ESteamSubsystem
// NumValues: 0x0019
enum class ESteamSubsystem : uint8
{
	SteamCore                                = 0,
	AppList                                  = 1,
	Apps                                     = 2,
	Friends                                  = 3,
	GameServer                               = 4,
	GameServerStats                          = 5,
	Inventory                                = 6,
	Input                                    = 7,
	Matchmaking                              = 8,
	MatchmakingServers                       = 9,
	Music                                    = 10,
	Networking                               = 11,
	NetworkingUtils                          = 12,
	ParentalSettings                         = 13,
	RemoteStorage                            = 14,
	RemotePlay                               = 15,
	Screenshots                              = 16,
	UGC                                      = 17,
	User                                     = 18,
	UserStats                                = 19,
	Utils                                    = 20,
	Video                                    = 21,
	SteamParties                             = 22,
	GameSearch                               = 23,
	ESteamSubsystem_MAX                      = 24,
};

// Enum SteamCore.ESteamOverlayToStoreFlag
// NumValues: 0x0004
enum class ESteamOverlayToStoreFlag : uint8
{
	None                                     = 0,
	AddToCart                                = 1,
	AddToCartAndShow                         = 2,
	ESteamOverlayToStoreFlag_MAX             = 3,
};

// Enum SteamCore.ESteamUserRestriction
// NumValues: 0x0002
enum class ESteamUserRestriction : uint8
{
	None                                     = 0,
	ESteamUserRestriction_MAX                = 1,
};

// Enum SteamCore.ESteamFriendFlags
// NumValues: 0x000D
enum class ESteamFriendFlags : uint8
{
	None                                     = 0,
	Blocked                                  = 1,
	FriendshipRequested                      = 2,
	Immediate                                = 3,
	ClanMember                               = 4,
	OnGameServer                             = 5,
	RequestingFriendship                     = 6,
	RequestingInfo                           = 7,
	Ignored                                  = 8,
	IgnoredFriend                            = 9,
	ChatMember                               = 10,
	All                                      = 11,
	ESteamFriendFlags_MAX                    = 12,
};

// Enum SteamCore.ESteamPersonaState
// NumValues: 0x0008
enum class ESteamPersonaState : uint8
{
	Offline                                  = 0,
	Online                                   = 1,
	Busy                                     = 2,
	Away                                     = 3,
	Snooze                                   = 4,
	LookingToTrade                           = 5,
	LookingToPlay                            = 6,
	Max                                      = 7,
};

// Enum SteamCore.ESteamFriendRelationship
// NumValues: 0x0009
enum class ESteamFriendRelationship : uint8
{
	None                                     = 0,
	Blocked                                  = 1,
	RequestRecipient                         = 2,
	Friend                                   = 3,
	RequestInitiator                         = 4,
	Ignored                                  = 5,
	IgnoredFriend                            = 6,
	Suggested_DEPRECATED                     = 7,
	Max                                      = 8,
};

// Enum SteamCore.ESteamActivateGameOverlayToWebPageMode
// NumValues: 0x0003
enum class ESteamActivateGameOverlayToWebPageMode : uint8
{
	Default                                  = 0,
	Modal                                    = 1,
	ESteamActivateGameOverlayToWebPageMode_MAX = 2,
};

// Enum SteamCore.ESteamPlayerResult
// NumValues: 0x0007
enum class ESteamPlayerResult : uint8
{
	Invalid                                  = 0,
	FailedToConnect                          = 1,
	Abandoned                                = 2,
	Kicked                                   = 3,
	Incomplete                               = 4,
	Completed                                = 5,
	ESteamPlayerResult_MAX                   = 6,
};

// Enum SteamCore.ESteamGameSearchErrorCode
// NumValues: 0x000B
enum class ESteamGameSearchErrorCode : uint8
{
	Invalid                                  = 0,
	OK                                       = 1,
	Failed_Search_Already_In_Progress        = 2,
	Failed_No_Search_In_Progress             = 3,
	Failed_Not_Lobby_Leader                  = 4,
	Failed_No_Host_Available                 = 5,
	Failed_Search_Params_Invalid             = 6,
	Failed_Offline                           = 7,
	Failed_NotAuthorized                     = 8,
	Failed_Unknown_Error                     = 9,
	ESteamGameSearchErrorCode_MAX            = 10,
};

// Enum SteamCore.ESteamCoreInputLEDFlag
// NumValues: 0x0003
enum class ESteamCoreInputLEDFlag : uint8
{
	SetColor                                 = 0,
	RestoreUserDefault                       = 1,
	ESteamCoreInputLEDFlag_MAX               = 2,
};

// Enum SteamCore.ESteamCoreInputType
// NumValues: 0x0012
enum class ESteamCoreInputType : uint8
{
	K_ESteamInputType_Unknown                = 0,
	K_ESteamInputType_SteamController        = 1,
	K_ESteamInputType_XBox360Controller      = 2,
	K_ESteamInputType_XBoxOneController      = 3,
	K_ESteamInputType_GenericGamepad         = 4,
	K_ESteamInputType_PS4Controller          = 5,
	K_ESteamInputType_AppleMFiController     = 6,
	K_ESteamInputType_AndroidController      = 7,
	K_ESteamInputType_SwitchJoyConPair       = 8,
	K_ESteamInputType_SwitchJoyConSingle     = 9,
	K_ESteamInputType_SwitchProController    = 10,
	K_ESteamInputType_MobileTouch            = 11,
	K_ESteamInputType_PS3Controller          = 12,
	K_ESteamInputType_PS5Controller          = 13,
	K_ESteamInputType_SteamDeckController    = 14,
	K_ESteamInputType_Count                  = 15,
	K_ESteamInputType_MaximumPossibleValue   = 255,
	K_ESteamInputType_MAX                    = 256,
};

// Enum SteamCore.ESteamCoreControllerPad
// NumValues: 0x0003
enum class ESteamCoreControllerPad : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	ESteamCoreControllerPad_MAX              = 2,
};

// Enum SteamCore.ESteamCoreXboxOrigin
// NumValues: 0x001E
enum class ESteamCoreXboxOrigin : uint8
{
	A                                        = 0,
	B                                        = 1,
	X                                        = 2,
	Y                                        = 3,
	LeftBumper                               = 4,
	RightBumper                              = 5,
	Menu                                     = 6,
	View                                     = 7,
	LeftTrigger_Pull                         = 8,
	LeftTrigger_Click                        = 9,
	RightTrigger_Pull                        = 10,
	RightTrigger_Click                       = 11,
	LeftStick_Move                           = 12,
	LeftStick_Click                          = 13,
	LeftStick_DPadNorth                      = 14,
	LeftStick_DPadSouth                      = 15,
	LeftStick_DPadWest                       = 16,
	LeftStick_DPadEast                       = 17,
	RightStick_Move                          = 18,
	RightStick_Click                         = 19,
	RightStick_DPadNorth                     = 20,
	RightStick_DPadSouth                     = 21,
	RightStick_DPadWest                      = 22,
	RightStick_DPadEast                      = 23,
	DPad_North                               = 24,
	DPad_South                               = 25,
	DPad_West                                = 26,
	DPad_East                                = 27,
	Count                                    = 28,
	ESteamCoreXboxOrigin_MAX                 = 29,
};

// Enum SteamCore.ESteamCoreInputActionOrigin
// NumValues: 0x0199
enum class ESteamCoreInputActionOrigin : uint8
{
	InputActionOrigin_None                   = 0,
	InputActionOrigin_SteamController_A      = 1,
	InputActionOrigin_SteamController_B      = 2,
	InputActionOrigin_SteamController_X      = 3,
	InputActionOrigin_SteamController_Y      = 4,
	InputActionOrigin_SteamController_LeftBumper = 5,
	InputActionOrigin_SteamController_RightBumper = 6,
	InputActionOrigin_SteamController_LeftGrip = 7,
	InputActionOrigin_SteamController_RightGrip = 8,
	InputActionOrigin_SteamController_Start  = 9,
	InputActionOrigin_SteamController_Back   = 10,
	InputActionOrigin_SteamController_LeftPad_Touch = 11,
	InputActionOrigin_SteamController_LeftPad_Swipe = 12,
	InputActionOrigin_SteamController_LeftPad_Click = 13,
	InputActionOrigin_SteamController_LeftPad_DPadNorth = 14,
	InputActionOrigin_SteamController_LeftPad_DPadSouth = 15,
	InputActionOrigin_SteamController_LeftPad_DPadWest = 16,
	InputActionOrigin_SteamController_LeftPad_DPadEast = 17,
	InputActionOrigin_SteamController_RightPad_Touch = 18,
	InputActionOrigin_SteamController_RightPad_Swipe = 19,
	InputActionOrigin_SteamController_RightPad_Click = 20,
	InputActionOrigin_SteamController_RightPad_DPadNorth = 21,
	InputActionOrigin_SteamController_RightPad_DPadSouth = 22,
	InputActionOrigin_SteamController_RightPad_DPadWest = 23,
	InputActionOrigin_SteamController_RightPad_DPadEast = 24,
	InputActionOrigin_SteamController_LeftTrigger_Pull = 25,
	InputActionOrigin_SteamController_LeftTrigger_Click = 26,
	InputActionOrigin_SteamController_RightTrigger_Pull = 27,
	InputActionOrigin_SteamController_RightTrigger_Click = 28,
	InputActionOrigin_SteamController_LeftStick_Move = 29,
	InputActionOrigin_SteamController_LeftStick_Click = 30,
	InputActionOrigin_SteamController_LeftStick_DPadNorth = 31,
	InputActionOrigin_SteamController_LeftStick_DPadSouth = 32,
	InputActionOrigin_SteamController_LeftStick_DPadWest = 33,
	InputActionOrigin_SteamController_LeftStick_DPadEast = 34,
	InputActionOrigin_SteamController_Gyro_Move = 35,
	InputActionOrigin_SteamController_Gyro_Pitch = 36,
	InputActionOrigin_SteamController_Gyro_Yaw = 37,
	InputActionOrigin_SteamController_Gyro_Roll = 38,
	InputActionOrigin_SteamController_Reserved0 = 39,
	InputActionOrigin_SteamController_Reserved1 = 40,
	InputActionOrigin_SteamController_Reserved2 = 41,
	InputActionOrigin_SteamController_Reserved3 = 42,
	InputActionOrigin_SteamController_Reserved4 = 43,
	InputActionOrigin_SteamController_Reserved5 = 44,
	InputActionOrigin_SteamController_Reserved6 = 45,
	InputActionOrigin_SteamController_Reserved7 = 46,
	InputActionOrigin_SteamController_Reserved8 = 47,
	InputActionOrigin_SteamController_Reserved9 = 48,
	InputActionOrigin_SteamController_Reserved10 = 49,
	InputActionOrigin_PS4_X                  = 50,
	InputActionOrigin_PS4_Circle             = 51,
	InputActionOrigin_PS4_Triangle           = 52,
	InputActionOrigin_PS4_Square             = 53,
	InputActionOrigin_PS4_LeftBumper         = 54,
	InputActionOrigin_PS4_RightBumper        = 55,
	InputActionOrigin_PS4_Options            = 56,
	InputActionOrigin_PS4_Share              = 57,
	InputActionOrigin_PS4_LeftPad_Touch      = 58,
	InputActionOrigin_PS4_LeftPad_Swipe      = 59,
	InputActionOrigin_PS4_LeftPad_Click      = 60,
	InputActionOrigin_PS4_LeftPad_DPadNorth  = 61,
	InputActionOrigin_PS4_LeftPad_DPadSouth  = 62,
	InputActionOrigin_PS4_LeftPad_DPadWest   = 63,
	InputActionOrigin_PS4_LeftPad_DPadEast   = 64,
	InputActionOrigin_PS4_RightPad_Touch     = 65,
	InputActionOrigin_PS4_RightPad_Swipe     = 66,
	InputActionOrigin_PS4_RightPad_Click     = 67,
	InputActionOrigin_PS4_RightPad_DPadNorth = 68,
	InputActionOrigin_PS4_RightPad_DPadSouth = 69,
	InputActionOrigin_PS4_RightPad_DPadWest  = 70,
	InputActionOrigin_PS4_RightPad_DPadEast  = 71,
	InputActionOrigin_PS4_CenterPad_Touch    = 72,
	InputActionOrigin_PS4_CenterPad_Swipe    = 73,
	InputActionOrigin_PS4_CenterPad_Click    = 74,
	InputActionOrigin_PS4_CenterPad_DPadNorth = 75,
	InputActionOrigin_PS4_CenterPad_DPadSouth = 76,
	InputActionOrigin_PS4_CenterPad_DPadWest = 77,
	InputActionOrigin_PS4_CenterPad_DPadEast = 78,
	InputActionOrigin_PS4_LeftTrigger_Pull   = 79,
	InputActionOrigin_PS4_LeftTrigger_Click  = 80,
	InputActionOrigin_PS4_RightTrigger_Pull  = 81,
	InputActionOrigin_PS4_RightTrigger_Click = 82,
	InputActionOrigin_PS4_LeftStick_Move     = 83,
	InputActionOrigin_PS4_LeftStick_Click    = 84,
	InputActionOrigin_PS4_LeftStick_DPadNorth = 85,
	InputActionOrigin_PS4_LeftStick_DPadSouth = 86,
	InputActionOrigin_PS4_LeftStick_DPadWest = 87,
	InputActionOrigin_PS4_LeftStick_DPadEast = 88,
	InputActionOrigin_PS4_RightStick_Move    = 89,
	InputActionOrigin_PS4_RightStick_Click   = 90,
	InputActionOrigin_PS4_RightStick_DPadNorth = 91,
	InputActionOrigin_PS4_RightStick_DPadSouth = 92,
	InputActionOrigin_PS4_RightStick_DPadWest = 93,
	InputActionOrigin_PS4_RightStick_DPadEast = 94,
	InputActionOrigin_PS4_DPad_North         = 95,
	InputActionOrigin_PS4_DPad_South         = 96,
	InputActionOrigin_PS4_DPad_West          = 97,
	InputActionOrigin_PS4_DPad_East          = 98,
	InputActionOrigin_PS4_Gyro_Move          = 99,
	InputActionOrigin_PS4_Gyro_Pitch         = 100,
	InputActionOrigin_PS4_Gyro_Yaw           = 101,
	InputActionOrigin_PS4_Gyro_Roll          = 102,
	InputActionOrigin_PS4_DPad_Move          = 103,
	InputActionOrigin_PS4_Reserved1          = 104,
	InputActionOrigin_PS4_Reserved2          = 105,
	InputActionOrigin_PS4_Reserved3          = 106,
	InputActionOrigin_PS4_Reserved4          = 107,
	InputActionOrigin_PS4_Reserved5          = 108,
	InputActionOrigin_PS4_Reserved6          = 109,
	InputActionOrigin_PS4_Reserved7          = 110,
	InputActionOrigin_PS4_Reserved8          = 111,
	InputActionOrigin_PS4_Reserved9          = 112,
	InputActionOrigin_PS4_Reserved10         = 113,
	InputActionOrigin_XBoxOne_A              = 114,
	InputActionOrigin_XBoxOne_B              = 115,
	InputActionOrigin_XBoxOne_X              = 116,
	InputActionOrigin_XBoxOne_Y              = 117,
	InputActionOrigin_XBoxOne_LeftBumper     = 118,
	InputActionOrigin_XBoxOne_RightBumper    = 119,
	InputActionOrigin_XBoxOne_Menu           = 120,
	InputActionOrigin_XBoxOne_View           = 121,
	InputActionOrigin_XBoxOne_LeftTrigger_Pull = 122,
	InputActionOrigin_XBoxOne_LeftTrigger_Click = 123,
	InputActionOrigin_XBoxOne_RightTrigger_Pull = 124,
	InputActionOrigin_XBoxOne_RightTrigger_Click = 125,
	InputActionOrigin_XBoxOne_LeftStick_Move = 126,
	InputActionOrigin_XBoxOne_LeftStick_Click = 127,
	InputActionOrigin_XBoxOne_LeftStick_DPadNorth = 128,
	InputActionOrigin_XBoxOne_LeftStick_DPadSouth = 129,
	InputActionOrigin_XBoxOne_LeftStick_DPadWest = 130,
	InputActionOrigin_XBoxOne_LeftStick_DPadEast = 131,
	InputActionOrigin_XBoxOne_RightStick_Move = 132,
	InputActionOrigin_XBoxOne_RightStick_Click = 133,
	InputActionOrigin_XBoxOne_RightStick_DPadNorth = 134,
	InputActionOrigin_XBoxOne_RightStick_DPadSouth = 135,
	InputActionOrigin_XBoxOne_RightStick_DPadWest = 136,
	InputActionOrigin_XBoxOne_RightStick_DPadEast = 137,
	InputActionOrigin_XBoxOne_DPad_North     = 138,
	InputActionOrigin_XBoxOne_DPad_South     = 139,
	InputActionOrigin_XBoxOne_DPad_West      = 140,
	InputActionOrigin_XBoxOne_DPad_East      = 141,
	InputActionOrigin_XBoxOne_DPad_Move      = 142,
	InputActionOrigin_XBoxOne_LeftGrip_Lower = 143,
	InputActionOrigin_XBoxOne_LeftGrip_Upper = 144,
	InputActionOrigin_XBoxOne_RightGrip_Lower = 145,
	InputActionOrigin_XBoxOne_RightGrip_Upper = 146,
	InputActionOrigin_XBoxOne_Share          = 147,
	InputActionOrigin_XBoxOne_Reserved6      = 148,
	InputActionOrigin_XBoxOne_Reserved7      = 149,
	InputActionOrigin_XBoxOne_Reserved8      = 150,
	InputActionOrigin_XBoxOne_Reserved9      = 151,
	InputActionOrigin_XBoxOne_Reserved10     = 152,
	InputActionOrigin_XBox360_A              = 153,
	InputActionOrigin_XBox360_B              = 154,
	InputActionOrigin_XBox360_X              = 155,
	InputActionOrigin_XBox360_Y              = 156,
	InputActionOrigin_XBox360_LeftBumper     = 157,
	InputActionOrigin_XBox360_RightBumper    = 158,
	InputActionOrigin_XBox360_Start          = 159,
	InputActionOrigin_XBox360_Back           = 160,
	InputActionOrigin_XBox360_LeftTrigger_Pull = 161,
	InputActionOrigin_XBox360_LeftTrigger_Click = 162,
	InputActionOrigin_XBox360_RightTrigger_Pull = 163,
	InputActionOrigin_XBox360_RightTrigger_Click = 164,
	InputActionOrigin_XBox360_LeftStick_Move = 165,
	InputActionOrigin_XBox360_LeftStick_Click = 166,
	InputActionOrigin_XBox360_LeftStick_DPadNorth = 167,
	InputActionOrigin_XBox360_LeftStick_DPadSouth = 168,
	InputActionOrigin_XBox360_LeftStick_DPadWest = 169,
	InputActionOrigin_XBox360_LeftStick_DPadEast = 170,
	InputActionOrigin_XBox360_RightStick_Move = 171,
	InputActionOrigin_XBox360_RightStick_Click = 172,
	InputActionOrigin_XBox360_RightStick_DPadNorth = 173,
	InputActionOrigin_XBox360_RightStick_DPadSouth = 174,
	InputActionOrigin_XBox360_RightStick_DPadWest = 175,
	InputActionOrigin_XBox360_RightStick_DPadEast = 176,
	InputActionOrigin_XBox360_DPad_North     = 177,
	InputActionOrigin_XBox360_DPad_South     = 178,
	InputActionOrigin_XBox360_DPad_West      = 179,
	InputActionOrigin_XBox360_DPad_East      = 180,
	InputActionOrigin_XBox360_DPad_Move      = 181,
	InputActionOrigin_XBox360_Reserved1      = 182,
	InputActionOrigin_XBox360_Reserved2      = 183,
	InputActionOrigin_XBox360_Reserved3      = 184,
	InputActionOrigin_XBox360_Reserved4      = 185,
	InputActionOrigin_XBox360_Reserved5      = 186,
	InputActionOrigin_XBox360_Reserved6      = 187,
	InputActionOrigin_XBox360_Reserved7      = 188,
	InputActionOrigin_XBox360_Reserved8      = 189,
	InputActionOrigin_XBox360_Reserved9      = 190,
	InputActionOrigin_XBox360_Reserved10     = 191,
	InputActionOrigin_Switch_A               = 192,
	InputActionOrigin_Switch_B               = 193,
	InputActionOrigin_Switch_X               = 194,
	InputActionOrigin_Switch_Y               = 195,
	InputActionOrigin_Switch_LeftBumper      = 196,
	InputActionOrigin_Switch_RightBumper     = 197,
	InputActionOrigin_Switch_Plus            = 198,
	InputActionOrigin_Switch_Minus           = 199,
	InputActionOrigin_Switch_Capture         = 200,
	InputActionOrigin_Switch_LeftTrigger_Pull = 201,
	InputActionOrigin_Switch_LeftTrigger_Click = 202,
	InputActionOrigin_Switch_RightTrigger_Pull = 203,
	InputActionOrigin_Switch_RightTrigger_Click = 204,
	InputActionOrigin_Switch_LeftStick_Move  = 205,
	InputActionOrigin_Switch_LeftStick_Click = 206,
	InputActionOrigin_Switch_LeftStick_DPadNorth = 207,
	InputActionOrigin_Switch_LeftStick_DPadSouth = 208,
	InputActionOrigin_Switch_LeftStick_DPadWest = 209,
	InputActionOrigin_Switch_LeftStick_DPadEast = 210,
	InputActionOrigin_Switch_RightStick_Move = 211,
	InputActionOrigin_Switch_RightStick_Click = 212,
	InputActionOrigin_Switch_RightStick_DPadNorth = 213,
	InputActionOrigin_Switch_RightStick_DPadSouth = 214,
	InputActionOrigin_Switch_RightStick_DPadWest = 215,
	InputActionOrigin_Switch_RightStick_DPadEast = 216,
	InputActionOrigin_Switch_DPad_North      = 217,
	InputActionOrigin_Switch_DPad_South      = 218,
	InputActionOrigin_Switch_DPad_West       = 219,
	InputActionOrigin_Switch_DPad_East       = 220,
	InputActionOrigin_Switch_ProGyro_Move    = 221,
	InputActionOrigin_Switch_ProGyro_Pitch   = 222,
	InputActionOrigin_Switch_ProGyro_Yaw     = 223,
	InputActionOrigin_Switch_ProGyro_Roll    = 224,
	InputActionOrigin_Switch_DPad_Move       = 225,
	InputActionOrigin_Switch_Reserved1       = 226,
	InputActionOrigin_Switch_Reserved2       = 227,
	InputActionOrigin_Switch_Reserved3       = 228,
	InputActionOrigin_Switch_Reserved4       = 229,
	InputActionOrigin_Switch_Reserved5       = 230,
	InputActionOrigin_Switch_Reserved6       = 231,
	InputActionOrigin_Switch_Reserved7       = 232,
	InputActionOrigin_Switch_Reserved8       = 233,
	InputActionOrigin_Switch_Reserved9       = 234,
	InputActionOrigin_Switch_Reserved10      = 235,
	InputActionOrigin_Switch_RightGyro_Move  = 236,
	InputActionOrigin_Switch_RightGyro_Pitch = 237,
	InputActionOrigin_Switch_RightGyro_Yaw   = 238,
	InputActionOrigin_Switch_RightGyro_Roll  = 239,
	InputActionOrigin_Switch_LeftGyro_Move   = 240,
	InputActionOrigin_Switch_LeftGyro_Pitch  = 241,
	InputActionOrigin_Switch_LeftGyro_Yaw    = 242,
	InputActionOrigin_Switch_LeftGyro_Roll   = 243,
	InputActionOrigin_Switch_LeftGrip_Lower  = 244,
	InputActionOrigin_Switch_LeftGrip_Upper  = 245,
	InputActionOrigin_Switch_RightGrip_Lower = 246,
	InputActionOrigin_Switch_RightGrip_Upper = 247,
	InputActionOrigin_Switch_Reserved11      = 248,
	InputActionOrigin_Switch_Reserved12      = 249,
	InputActionOrigin_Switch_Reserved13      = 250,
	InputActionOrigin_Switch_Reserved14      = 251,
	InputActionOrigin_Switch_Reserved15      = 252,
	InputActionOrigin_Switch_Reserved16      = 253,
	InputActionOrigin_Switch_Reserved17      = 254,
	InputActionOrigin_Switch_Reserved18      = 255,
	InputActionOrigin_Switch_Reserved19      = 256,
	InputActionOrigin_Switch_Reserved20      = 257,
	InputActionOrigin_PS5_X                  = 258,
	InputActionOrigin_PS5_Circle             = 259,
	InputActionOrigin_PS5_Triangle           = 260,
	InputActionOrigin_PS5_Square             = 261,
	InputActionOrigin_PS5_LeftBumper         = 262,
	InputActionOrigin_PS5_RightBumper        = 263,
	InputActionOrigin_PS5_Option             = 264,
	InputActionOrigin_PS5_Create             = 265,
	InputActionOrigin_PS5_Mute               = 266,
	InputActionOrigin_PS5_LeftPad_Touch      = 267,
	InputActionOrigin_PS5_LeftPad_Swipe      = 268,
	InputActionOrigin_PS5_LeftPad_Click      = 269,
	InputActionOrigin_PS5_LeftPad_DPadNorth  = 270,
	InputActionOrigin_PS5_LeftPad_DPadSouth  = 271,
	InputActionOrigin_PS5_LeftPad_DPadWest   = 272,
	InputActionOrigin_PS5_LeftPad_DPadEast   = 273,
	InputActionOrigin_PS5_RightPad_Touch     = 274,
	InputActionOrigin_PS5_RightPad_Swipe     = 275,
	InputActionOrigin_PS5_RightPad_Click     = 276,
	InputActionOrigin_PS5_RightPad_DPadNorth = 277,
	InputActionOrigin_PS5_RightPad_DPadSouth = 278,
	InputActionOrigin_PS5_RightPad_DPadWest  = 279,
	InputActionOrigin_PS5_RightPad_DPadEast  = 280,
	InputActionOrigin_PS5_CenterPad_Touch    = 281,
	InputActionOrigin_PS5_CenterPad_Swipe    = 282,
	InputActionOrigin_PS5_CenterPad_Click    = 283,
	InputActionOrigin_PS5_CenterPad_DPadNorth = 284,
	InputActionOrigin_PS5_CenterPad_DPadSouth = 285,
	InputActionOrigin_PS5_CenterPad_DPadWest = 286,
	InputActionOrigin_PS5_CenterPad_DPadEast = 287,
	InputActionOrigin_PS5_LeftTrigger_Pull   = 288,
	InputActionOrigin_PS5_LeftTrigger_Click  = 289,
	InputActionOrigin_PS5_RightTrigger_Pull  = 290,
	InputActionOrigin_PS5_RightTrigger_Click = 291,
	InputActionOrigin_PS5_LeftStick_Move     = 292,
	InputActionOrigin_PS5_LeftStick_Click    = 293,
	InputActionOrigin_PS5_LeftStick_DPadNorth = 294,
	InputActionOrigin_PS5_LeftStick_DPadSouth = 295,
	InputActionOrigin_PS5_LeftStick_DPadWest = 296,
	InputActionOrigin_PS5_LeftStick_DPadEast = 297,
	InputActionOrigin_PS5_RightStick_Move    = 298,
	InputActionOrigin_PS5_RightStick_Click   = 299,
	InputActionOrigin_PS5_RightStick_DPadNorth = 300,
	InputActionOrigin_PS5_RightStick_DPadSouth = 301,
	InputActionOrigin_PS5_RightStick_DPadWest = 302,
	InputActionOrigin_PS5_RightStick_DPadEast = 303,
	InputActionOrigin_PS5_DPad_North         = 304,
	InputActionOrigin_PS5_DPad_South         = 305,
	InputActionOrigin_PS5_DPad_West          = 306,
	InputActionOrigin_PS5_DPad_East          = 307,
	InputActionOrigin_PS5_Gyro_Move          = 308,
	InputActionOrigin_PS5_Gyro_Pitch         = 309,
	InputActionOrigin_PS5_Gyro_Yaw           = 310,
	InputActionOrigin_PS5_Gyro_Roll          = 311,
	InputActionOrigin_PS5_DPad_Move          = 312,
	InputActionOrigin_PS5_Reserved1          = 313,
	InputActionOrigin_PS5_Reserved2          = 314,
	InputActionOrigin_PS5_Reserved3          = 315,
	InputActionOrigin_PS5_Reserved4          = 316,
	InputActionOrigin_PS5_Reserved5          = 317,
	InputActionOrigin_PS5_Reserved6          = 318,
	InputActionOrigin_PS5_Reserved7          = 319,
	InputActionOrigin_PS5_Reserved8          = 320,
	InputActionOrigin_PS5_Reserved9          = 321,
	InputActionOrigin_PS5_Reserved10         = 322,
	InputActionOrigin_PS5_Reserved11         = 323,
	InputActionOrigin_PS5_Reserved12         = 324,
	InputActionOrigin_PS5_Reserved13         = 325,
	InputActionOrigin_PS5_Reserved14         = 326,
	InputActionOrigin_PS5_Reserved15         = 327,
	InputActionOrigin_PS5_Reserved16         = 328,
	InputActionOrigin_PS5_Reserved17         = 329,
	InputActionOrigin_PS5_Reserved18         = 330,
	InputActionOrigin_PS5_Reserved19         = 331,
	InputActionOrigin_PS5_Reserved20         = 332,
	InputActionOrigin_SteamDeck_A            = 333,
	InputActionOrigin_SteamDeck_B            = 334,
	InputActionOrigin_SteamDeck_X            = 335,
	InputActionOrigin_SteamDeck_Y            = 336,
	InputActionOrigin_SteamDeck_L1           = 337,
	InputActionOrigin_SteamDeck_R1           = 338,
	InputActionOrigin_SteamDeck_Menu         = 339,
	InputActionOrigin_SteamDeck_View         = 340,
	InputActionOrigin_SteamDeck_LeftPad_Touch = 341,
	InputActionOrigin_SteamDeck_LeftPad_Swipe = 342,
	InputActionOrigin_SteamDeck_LeftPad_Click = 343,
	InputActionOrigin_SteamDeck_LeftPad_DPadNorth = 344,
	InputActionOrigin_SteamDeck_LeftPad_DPadSouth = 345,
	InputActionOrigin_SteamDeck_LeftPad_DPadWest = 346,
	InputActionOrigin_SteamDeck_LeftPad_DPadEast = 347,
	InputActionOrigin_SteamDeck_RightPad_Touch = 348,
	InputActionOrigin_SteamDeck_RightPad_Swipe = 349,
	InputActionOrigin_SteamDeck_RightPad_Click = 350,
	InputActionOrigin_SteamDeck_RightPad_DPadNorth = 351,
	InputActionOrigin_SteamDeck_RightPad_DPadSouth = 352,
	InputActionOrigin_SteamDeck_RightPad_DPadWest = 353,
	InputActionOrigin_SteamDeck_RightPad_DPadEast = 354,
	InputActionOrigin_SteamDeck_L2_SoftPull  = 355,
	InputActionOrigin_SteamDeck_L2           = 356,
	InputActionOrigin_SteamDeck_R2_SoftPull  = 357,
	InputActionOrigin_SteamDeck_R2           = 358,
	InputActionOrigin_SteamDeck_LeftStick_Move = 359,
	InputActionOrigin_SteamDeck_L3           = 360,
	InputActionOrigin_SteamDeck_LeftStick_DPadNorth = 361,
	InputActionOrigin_SteamDeck_LeftStick_DPadSouth = 362,
	InputActionOrigin_SteamDeck_LeftStick_DPadWest = 363,
	InputActionOrigin_SteamDeck_LeftStick_DPadEast = 364,
	InputActionOrigin_SteamDeck_LeftStick_Touch = 365,
	InputActionOrigin_SteamDeck_RightStick_Move = 366,
	InputActionOrigin_SteamDeck_R3           = 367,
	InputActionOrigin_SteamDeck_RightStick_DPadNorth = 368,
	InputActionOrigin_SteamDeck_RightStick_DPadSouth = 369,
	InputActionOrigin_SteamDeck_RightStick_DPadWest = 370,
	InputActionOrigin_SteamDeck_RightStick_DPadEast = 371,
	InputActionOrigin_SteamDeck_RightStick_Touch = 372,
	InputActionOrigin_SteamDeck_L4           = 373,
	InputActionOrigin_SteamDeck_R4           = 374,
	InputActionOrigin_SteamDeck_L5           = 375,
	InputActionOrigin_SteamDeck_R5           = 376,
	InputActionOrigin_SteamDeck_DPad_Move    = 377,
	InputActionOrigin_SteamDeck_DPad_North   = 378,
	InputActionOrigin_SteamDeck_DPad_South   = 379,
	InputActionOrigin_SteamDeck_DPad_West    = 380,
	InputActionOrigin_SteamDeck_DPad_East    = 381,
	InputActionOrigin_SteamDeck_Gyro_Move    = 382,
	InputActionOrigin_SteamDeck_Gyro_Pitch   = 383,
	InputActionOrigin_SteamDeck_Gyro_Yaw     = 384,
	InputActionOrigin_SteamDeck_Gyro_Roll    = 385,
	InputActionOrigin_SteamDeck_Reserved1    = 386,
	InputActionOrigin_SteamDeck_Reserved2    = 387,
	InputActionOrigin_SteamDeck_Reserved3    = 388,
	InputActionOrigin_SteamDeck_Reserved4    = 389,
	InputActionOrigin_SteamDeck_Reserved5    = 390,
	InputActionOrigin_SteamDeck_Reserved6    = 391,
	InputActionOrigin_SteamDeck_Reserved7    = 392,
	InputActionOrigin_SteamDeck_Reserved8    = 393,
	InputActionOrigin_SteamDeck_Reserved9    = 394,
	InputActionOrigin_SteamDeck_Reserved10   = 395,
	InputActionOrigin_SteamDeck_Reserved11   = 396,
	InputActionOrigin_SteamDeck_Reserved12   = 397,
	InputActionOrigin_SteamDeck_Reserved13   = 398,
	InputActionOrigin_SteamDeck_Reserved14   = 399,
	InputActionOrigin_SteamDeck_Reserved15   = 400,
	InputActionOrigin_SteamDeck_Reserved16   = 401,
	InputActionOrigin_SteamDeck_Reserved17   = 402,
	InputActionOrigin_SteamDeck_Reserved18   = 403,
	InputActionOrigin_SteamDeck_Reserved19   = 404,
	InputActionOrigin_SteamDeck_Reserved20   = 405,
	InputActionOrigin_Count                  = 406,
	InputActionOrigin_MaximumPossibleValue   = 32767,
	InputActionOrigin_MAX                    = 32768,
};

// Enum SteamCore.ESteamCoreInputSourceMode
// NumValues: 0x0012
enum class ESteamCoreInputSourceMode : uint8
{
	None                                     = 0,
	Dpad                                     = 1,
	Buttons                                  = 2,
	FourButtons                              = 3,
	AbsoluteMouse                            = 4,
	RelativeMouse                            = 5,
	JoystickMove                             = 6,
	JoystickMouse                            = 7,
	JoystickCamera                           = 8,
	ScrollWheel                              = 9,
	Trigger                                  = 10,
	TouchMenu                                = 11,
	MouseJoystick                            = 12,
	MouseRegion                              = 13,
	RadialMenu                               = 14,
	SingleButton                             = 15,
	Switches                                 = 16,
	ESteamCoreInputSourceMode_MAX            = 17,
};

// Enum SteamCore.ESteamCoreInputSource
// NumValues: 0x0013
enum class ESteamCoreInputSource : uint8
{
	None                                     = 0,
	LeftTrackpad                             = 1,
	RightTrackpad                            = 2,
	Joystick                                 = 3,
	ABXY                                     = 4,
	Switch                                   = 5,
	LeftTrigger                              = 6,
	RightTrigger                             = 7,
	LeftBumper                               = 8,
	RightBumper                              = 9,
	Gyro                                     = 10,
	CenterTrackpad                           = 11,
	RightJoystick                            = 12,
	DPad                                     = 13,
	Key                                      = 14,
	Mouse                                    = 15,
	LeftGyro                                 = 16,
	Count                                    = 17,
	ESteamCoreInputSource_MAX                = 18,
};

// Enum SteamCore.ESteamCoreItemFlags
// NumValues: 0x0004
enum class ESteamCoreItemFlags : uint8
{
	ENoTrade                                 = 0,
	ERemoved                                 = 8,
	EConsumed                                = 9,
	ESteamCoreItemFlags_MAX                  = 10,
};

// Enum SteamCore.ESteamLobbyDistanceFilter
// NumValues: 0x0005
enum class ESteamLobbyDistanceFilter : uint8
{
	Close                                    = 0,
	Default                                  = 1,
	Far                                      = 2,
	Worldwide                                = 3,
	ESteamLobbyDistanceFilter_MAX            = 4,
};

// Enum SteamCore.ESteamLobbyComparison
// NumValues: 0x0007
enum class ESteamLobbyComparison : uint8
{
	EqualToOrLessThan                        = 0,
	LessThan                                 = 1,
	Equal                                    = 2,
	GreaterThan                              = 3,
	EqualToOrGreaterThan                     = 4,
	NotEqual                                 = 5,
	ESteamLobbyComparison_MAX                = 6,
};

// Enum SteamCore.ESteamLobbyType
// NumValues: 0x0005
enum class ESteamLobbyType : uint8
{
	Private                                  = 0,
	FriendsOnly                              = 1,
	Public                                   = 2,
	Invisible                                = 3,
	ESteamLobbyType_MAX                      = 4,
};

// Enum SteamCore.ESteamSessionFindType
// NumValues: 0x0003
enum class ESteamSessionFindType : uint8
{
	Listen                                   = 0,
	Dedicated                                = 1,
	ESteamSessionFindType_MAX                = 2,
};

// Enum SteamCore.ESteamAudioPlaybackStatus
// NumValues: 0x0005
enum class ESteamAudioPlaybackStatus : uint8
{
	Undefined                                = 0,
	Playing                                  = 1,
	Paused                                   = 2,
	Idle                                     = 3,
	ESteamAudioPlaybackStatus_MAX            = 4,
};

// Enum SteamCore.ESteamP2PSend
// NumValues: 0x0005
enum class ESteamP2PSend : uint8
{
	Unreliable                               = 0,
	UnreliableNoDelay                        = 1,
	Reliable                                 = 2,
	ReliableWithBuffering                    = 3,
	ESteamP2PSend_MAX                        = 4,
};

// Enum SteamCore.ESteamParentalFeature
// NumValues: 0x000E
enum class ESteamParentalFeature : uint8
{
	Invalid                                  = 0,
	Store                                    = 1,
	Community                                = 2,
	Profile                                  = 3,
	Friends                                  = 4,
	News                                     = 5,
	Trading                                  = 6,
	Settings                                 = 7,
	Console                                  = 8,
	Browser                                  = 9,
	ParentalSetup                            = 10,
	Library                                  = 11,
	Test                                     = 12,
	Max                                      = 13,
};

// Enum SteamCore.ESteamPartiesBeaconLocationData
// NumValues: 0x0006
enum class ESteamPartiesBeaconLocationData : uint8
{
	Invalid                                  = 0,
	Name                                     = 1,
	IconURLSmall                             = 2,
	IconURLMedium                            = 3,
	IconURLLarge                             = 4,
	ESteamPartiesBeaconLocationData_MAX      = 5,
};

// Enum SteamCore.ESteamPartiesBeaconLocationType
// NumValues: 0x0003
enum class ESteamPartiesBeaconLocationType : uint8
{
	Invalid                                  = 0,
	ChatGroup                                = 1,
	Max                                      = 2,
};

// Enum SteamCore.ESteamCoreDeviceFormFactor
// NumValues: 0x0006
enum class ESteamCoreDeviceFormFactor : uint8
{
	Unknown                                  = 0,
	Phone                                    = 1,
	Tablet                                   = 2,
	Computer                                 = 3,
	TV                                       = 4,
	ESteamCoreDeviceFormFactor_MAX           = 5,
};

// Enum SteamCore.ESteamUGCReadAction
// NumValues: 0x0004
enum class ESteamUGCReadAction : uint8
{
	K_EUGCRead_ContinueReadingUntilFinished  = 0,
	K_EUGCRead_ContinueReading               = 1,
	K_EUGCRead_Close                         = 2,
	K_EUGCRead_MAX                           = 3,
};

// Enum SteamCore.ESteamRemoteStoragePlatform
// NumValues: 0x0008
enum class ESteamRemoteStoragePlatform : uint8
{
	None                                     = 0,
	Windows                                  = 1,
	OSX                                      = 2,
	PS3                                      = 4,
	Linux                                    = 8,
	Reserved2                                = 16,
	All                                      = 254,
	ESteamRemoteStoragePlatform_MAX          = 255,
};

// Enum SteamCore.ESteamVRScreenshotType
// NumValues: 0x0007
enum class ESteamVRScreenshotType : uint8
{
	None                                     = 0,
	Mono                                     = 1,
	Stereo                                   = 2,
	MonoCubemap                              = 3,
	MonoPanorama                             = 4,
	StereoPanorama                           = 5,
	ESteamVRScreenshotType_MAX               = 6,
};

// Enum SteamCore.ESteamAccountType
// NumValues: 0x000C
enum class ESteamAccountType : uint8
{
	Invalid                                  = 0,
	Individual                               = 1,
	Multiseat                                = 2,
	GameServer                               = 3,
	AnonGameServer                           = 4,
	Pending                                  = 5,
	ContentServer                            = 6,
	Clan                                     = 7,
	Chat                                     = 8,
	ConsoleUser                              = 9,
	AnonUser                                 = 10,
	Max                                      = 11,
};

// Enum SteamCore.ESteamBeginAuthSessionResult
// NumValues: 0x0007
enum class ESteamBeginAuthSessionResult : uint8
{
	OK                                       = 0,
	InvalidTicket                            = 1,
	DuplicateRequest                         = 2,
	InvalidVersion                           = 3,
	GameMismatch                             = 4,
	ExpiredTicket                            = 5,
	ESteamBeginAuthSessionResult_MAX         = 6,
};

// Enum SteamCore.ESteamUserHasLicenseForAppResult
// NumValues: 0x0004
enum class ESteamUserHasLicenseForAppResult : uint8
{
	HasLicense                               = 0,
	DoesNotHaveLicense                       = 1,
	NoAuth                                   = 2,
	ESteamUserHasLicenseForAppResult_MAX     = 3,
};

// Enum SteamCore.EOnlineComparison
// NumValues: 0x0007
enum class EOnlineComparison : uint8
{
	Equals                                   = 0,
	NotEquals                                = 1,
	GreaterThan                              = 2,
	GreaterThanEquals                        = 3,
	LessThan                                 = 4,
	LessThanEquals                           = 5,
	EOnlineComparison_MAX                    = 6,
};

// Enum SteamCore.ESteamComparisonOp
// NumValues: 0x000A
enum class ESteamComparisonOp : uint8
{
	Equals                                   = 0,
	NotEquals                                = 1,
	GreaterThan                              = 2,
	GreaterThanEquals                        = 3,
	LessThan                                 = 4,
	LessThanEquals                           = 5,
	Near                                     = 6,
	In                                       = 7,
	NotIn                                    = 8,
	ESteamComparisonOp_MAX                   = 9,
};

// Enum SteamCore.ESteamAttributeType
// NumValues: 0x0005
enum class ESteamAttributeType : uint8
{
	NOT_SET                                  = 0,
	INTEGER                                  = 1,
	BOOL                                     = 2,
	STRING                                   = 3,
	ESteamAttributeType_MAX                  = 4,
};

// Enum SteamCore.ESteamRemoteStoragePublishedFileVisibility
// NumValues: 0x0004
enum class ESteamRemoteStoragePublishedFileVisibility : uint8
{
	Public                                   = 0,
	FriendsOnly                              = 1,
	Private                                  = 2,
	ESteamRemoteStoragePublishedFileVisibility_MAX = 3,
};

// Enum SteamCore.ESteamWorkshopFileType
// NumValues: 0x0012
enum class ESteamWorkshopFileType : uint8
{
	First                                    = 0,
	Community                                = 0,
	Microtransaction                         = 1,
	Collection                               = 2,
	Art                                      = 3,
	Video                                    = 4,
	Screenshot                               = 5,
	Game                                     = 6,
	Software                                 = 7,
	Concept                                  = 8,
	WebGuide                                 = 9,
	IntegratedGuide                          = 10,
	Merch                                    = 11,
	ControllerBinding                        = 12,
	SteamworksAccessInvite                   = 13,
	SteamVideo                               = 14,
	GameManagedItem                          = 15,
	Max                                      = 16,
};

// Enum SteamCore.ESteamItemPreviewType
// NumValues: 0x0007
enum class ESteamItemPreviewType : uint8
{
	Image                                    = 0,
	YouTubeVideo                             = 1,
	Sketchfab                                = 2,
	EnvironmentMap_HorizontalCross           = 3,
	EnvironmentMap_LatLong                   = 4,
	ReservedMax                              = 254,
	ESteamItemPreviewType_MAX                = 255,
};

// Enum SteamCore.ESteamItemStatistic
// NumValues: 0x000E
enum class ESteamItemStatistic : uint8
{
	NumSubscriptions                         = 0,
	NumFavorites                             = 1,
	NumFollowers                             = 2,
	NumUniqueSubscriptions                   = 3,
	NumUniqueFavorites                       = 4,
	NumUniqueFollowers                       = 5,
	NumUniqueWebsiteViews                    = 6,
	ReportScore                              = 7,
	NumSecondsPlayed                         = 8,
	NumPlaytimeSessions                      = 9,
	NumComments                              = 10,
	NumSecondsPlayedDuringTimePeriod         = 11,
	NumPlaytimeSessionsDuringTimePeriod      = 12,
	ESteamItemStatistic_MAX                  = 13,
};

// Enum SteamCore.ESteamItemState
// NumValues: 0x0008
enum class ESteamItemState : uint8
{
	None                                     = 0,
	Subscribed                               = 1,
	LegacyItem                               = 2,
	Installed                                = 4,
	NeedsUpdate                              = 8,
	Downloading                              = 16,
	DownloadPending                          = 32,
	ESteamItemState_MAX                      = 33,
};

// Enum SteamCore.ESteamItemUpdateStatus
// NumValues: 0x0007
enum class ESteamItemUpdateStatus : uint8
{
	Invalid                                  = 0,
	PreparingConfig                          = 1,
	PreparingContent                         = 2,
	UploadingContent                         = 3,
	UploadingPreviewFile                     = 4,
	CommittingChanges                        = 5,
	ESteamItemUpdateStatus_MAX               = 6,
};

// Enum SteamCore.ESteamUGCQuery
// NumValues: 0x0014
enum class ESteamUGCQuery : uint8
{
	RankedByVote                             = 0,
	RankedByPublicationDate                  = 1,
	AcceptedForGameRankedByAcceptanceDate    = 2,
	RankedByTrend                            = 3,
	FavoritedByFriendsRankedByPublicationDate = 4,
	CreatedByFriendsRankedByPublicationDate  = 5,
	RankedByNumTimesReported                 = 6,
	CreatedByFollowedUsersRankedByPublicationDate = 7,
	NotYetRated                              = 8,
	RankedByTotalVotesAsc                    = 9,
	RankedByVotesUp                          = 10,
	RankedByTextSearch                       = 11,
	RankedByTotalUniqueSubscriptions         = 12,
	RankedByPlaytimeTrend                    = 13,
	RankedByTotalPlaytime                    = 14,
	RankedByAveragePlaytimeTrend             = 15,
	RankedByLifetimeAveragePlaytime          = 16,
	RankedByPlaytimeSessionsTrend            = 17,
	RankedByLifetimePlaytimeSessions         = 18,
	ESteamUGCQuery_MAX                       = 19,
};

// Enum SteamCore.ESteamUserUGCListSortOrder
// NumValues: 0x0008
enum class ESteamUserUGCListSortOrder : uint8
{
	CreationOrderDesc                        = 0,
	CreationOrderAsc                         = 1,
	TitleAsc                                 = 2,
	LastUpdatedDesc                          = 3,
	SubscriptionDateDesc                     = 4,
	VoteScoreDesc                            = 5,
	ForModeration                            = 6,
	ESteamUserUGCListSortOrder_MAX           = 7,
};

// Enum SteamCore.ESteamUserUGCList
// NumValues: 0x000A
enum class ESteamUserUGCList : uint8
{
	Published                                = 0,
	VotedOn                                  = 1,
	VotedUp                                  = 2,
	VotedDown                                = 3,
	WillVoteLater                            = 4,
	Favorited                                = 5,
	Subscribed                               = 6,
	UsedOrPlayed                             = 7,
	Followed                                 = 8,
	ESteamUserUGCList_MAX                    = 9,
};

// Enum SteamCore.ESteamUGCMatchingUGCType
// NumValues: 0x000F
enum class ESteamUGCMatchingUGCType : uint8
{
	Items                                    = 0,
	Items_Mtx                                = 1,
	Items_ReadyToUse                         = 2,
	Collections                              = 3,
	Artwork                                  = 4,
	Videos                                   = 5,
	Screenshots                              = 6,
	AllGuides                                = 7,
	WebGuides                                = 8,
	IntegratedGuides                         = 9,
	UsableInGame                             = 10,
	ControllerBindings                       = 11,
	GameManagedItems                         = 12,
	All                                      = 13,
	ESteamUGCMatchingUGCType_MAX             = 14,
};

// Enum SteamCore.ESteamLeaderboardUploadScoreMethod
// NumValues: 0x0004
enum class ESteamLeaderboardUploadScoreMethod : uint8
{
	None                                     = 0,
	KeepBest                                 = 1,
	ForceUpdate                              = 2,
	ESteamLeaderboardUploadScoreMethod_MAX   = 3,
};

// Enum SteamCore.ESteamLeaderboardDisplayType
// NumValues: 0x0005
enum class ESteamLeaderboardDisplayType : uint8
{
	None                                     = 0,
	Numeric                                  = 1,
	TimeSeconds                              = 2,
	TimeMilliSeconds                         = 3,
	ESteamLeaderboardDisplayType_MAX         = 4,
};

// Enum SteamCore.ESteamLeaderboardSortMethod
// NumValues: 0x0004
enum class ESteamLeaderboardSortMethod : uint8
{
	None                                     = 0,
	Ascending                                = 1,
	Descending                               = 2,
	ESteamLeaderboardSortMethod_MAX          = 3,
};

// Enum SteamCore.ESteamLeaderboardDataRequest
// NumValues: 0x0005
enum class ESteamLeaderboardDataRequest : uint8
{
	Global                                   = 0,
	GlobalAroundUser                         = 1,
	Friends                                  = 2,
	Users                                    = 3,
	ESteamLeaderboardDataRequest_MAX         = 4,
};

// Enum SteamCore.ESteamVoiceResult
// NumValues: 0x000B
enum class ESteamVoiceResult : uint8
{
	OK                                       = 0,
	NotInitialized                           = 1,
	NotRecording                             = 2,
	NoData                                   = 3,
	BufferTooSmall                           = 4,
	DataCorrupted                            = 5,
	Restricted                               = 6,
	UnsupportedCodec                         = 7,
	ReceiverOutOfDate                        = 8,
	ReceiverDidNotAnswer                     = 9,
	ESteamVoiceResult_MAX                    = 10,
};

// Enum SteamCore.ESteamCoreIdentical
// NumValues: 0x0003
enum class ESteamCoreIdentical : uint8
{
	Identical                                = 0,
	NotIdentical                             = 1,
	ESteamCoreIdentical_MAX                  = 2,
};

// Enum SteamCore.ESteamCoreValid
// NumValues: 0x0003
enum class ESteamCoreValid : uint8
{
	Valid                                    = 0,
	NotValid                                 = 1,
	ESteamCoreValid_MAX                      = 2,
};

// Enum SteamCore.ESteamUniverse
// NumValues: 0x0006
enum class ESteamUniverse : uint8
{
	Invalid                                  = 0,
	Public                                   = 1,
	Beta                                     = 2,
	Internal                                 = 3,
	Dev                                      = 4,
	Max                                      = 5,
};

// Enum SteamCore.ESteamNotificationPosition
// NumValues: 0x0005
enum class ESteamNotificationPosition : uint8
{
	TopLeft                                  = 0,
	TopRight                                 = 1,
	BottomLeft                               = 2,
	BottomRight                              = 3,
	ESteamNotificationPosition_MAX           = 4,
};

// Enum SteamCore.ESteamGamepadTextInputMode
// NumValues: 0x0003
enum class ESteamGamepadTextInputMode : uint8
{
	Normal                                   = 0,
	Password                                 = 1,
	ESteamGamepadTextInputMode_MAX           = 2,
};

// Enum SteamCore.ESteamGamepadTextInputLineMode
// NumValues: 0x0003
enum class ESteamGamepadTextInputLineMode : uint8
{
	SingleLine                               = 0,
	MultipleLines                            = 1,
	ESteamGamepadTextInputLineMode_MAX       = 2,
};

// Enum SteamCore.ESteamTextFilteringContext
// NumValues: 0x0005
enum class ESteamTextFilteringContext : uint8
{
	K_ETextFilteringContextUnknown           = 0,
	K_ETextFilteringContextGameContent       = 1,
	K_ETextFilteringContextChat              = 2,
	K_ETextFilteringContextName              = 3,
	K_MAX                                    = 4,
};

// Enum SteamCore.ESteamBroadcastUploadResult
// NumValues: 0x000F
enum class ESteamBroadcastUploadResult : uint8
{
	None                                     = 0,
	OK                                       = 1,
	InitFailed                               = 2,
	FrameFailed                              = 3,
	Timeout                                  = 4,
	BandwidthExceeded                        = 5,
	LowFPS                                   = 6,
	MissingKeyFrames                         = 7,
	NoConnection                             = 8,
	RelayFailed                              = 9,
	SettingsChanged                          = 10,
	MissingAudio                             = 11,
	TooFarBehind                             = 12,
	TranscodeBehind                          = 13,
	ESteamBroadcastUploadResult_MAX          = 14,
};

// ScriptStruct SteamCore.SteamInventoryStartPurchaseResult
// 0x0028 (0x0028 - 0x0000)
struct FSteamInventoryStartPurchaseResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionId;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamInventoryStartPurchaseResult) == 0x000008, "Wrong alignment on FSteamInventoryStartPurchaseResult");
static_assert(sizeof(FSteamInventoryStartPurchaseResult) == 0x000028, "Wrong size on FSteamInventoryStartPurchaseResult");
static_assert(offsetof(FSteamInventoryStartPurchaseResult, Result) == 0x000000, "Member 'FSteamInventoryStartPurchaseResult::Result' has a wrong offset!");
static_assert(offsetof(FSteamInventoryStartPurchaseResult, OrderId) == 0x000008, "Member 'FSteamInventoryStartPurchaseResult::OrderId' has a wrong offset!");
static_assert(offsetof(FSteamInventoryStartPurchaseResult, TransactionId) == 0x000018, "Member 'FSteamInventoryStartPurchaseResult::TransactionId' has a wrong offset!");

// ScriptStruct SteamCore.SteamInventoryResult
// 0x0004 (0x0004 - 0x0000)
struct FSteamInventoryResult final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSteamInventoryResult) == 0x000004, "Wrong alignment on FSteamInventoryResult");
static_assert(sizeof(FSteamInventoryResult) == 0x000004, "Wrong size on FSteamInventoryResult");
static_assert(offsetof(FSteamInventoryResult, Value) == 0x000000, "Member 'FSteamInventoryResult::Value' has a wrong offset!");

// ScriptStruct SteamCore.SteamInventoryResultReady
// 0x0008 (0x0008 - 0x0000)
struct FSteamInventoryResultReady final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamInventoryResultReady) == 0x000004, "Wrong alignment on FSteamInventoryResultReady");
static_assert(sizeof(FSteamInventoryResultReady) == 0x000008, "Wrong size on FSteamInventoryResultReady");
static_assert(offsetof(FSteamInventoryResultReady, Handle) == 0x000000, "Member 'FSteamInventoryResultReady::Handle' has a wrong offset!");
static_assert(offsetof(FSteamInventoryResultReady, Result) == 0x000004, "Member 'FSteamInventoryResultReady::Result' has a wrong offset!");

// ScriptStruct SteamCore.SteamID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSteamID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamID) == 0x000008, "Wrong alignment on FSteamID");
static_assert(sizeof(FSteamID) == 0x000008, "Wrong size on FSteamID");

// ScriptStruct SteamCore.SteamInventoryEligiblePromoItemDefIDs
// 0x0018 (0x0018 - 0x0000)
struct FSteamInventoryEligiblePromoItemDefIDs final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEligiblePromoItemDefs;                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedData;                                       // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamInventoryEligiblePromoItemDefIDs) == 0x000008, "Wrong alignment on FSteamInventoryEligiblePromoItemDefIDs");
static_assert(sizeof(FSteamInventoryEligiblePromoItemDefIDs) == 0x000018, "Wrong size on FSteamInventoryEligiblePromoItemDefIDs");
static_assert(offsetof(FSteamInventoryEligiblePromoItemDefIDs, Result) == 0x000000, "Member 'FSteamInventoryEligiblePromoItemDefIDs::Result' has a wrong offset!");
static_assert(offsetof(FSteamInventoryEligiblePromoItemDefIDs, SteamID) == 0x000008, "Member 'FSteamInventoryEligiblePromoItemDefIDs::SteamID' has a wrong offset!");
static_assert(offsetof(FSteamInventoryEligiblePromoItemDefIDs, NumEligiblePromoItemDefs) == 0x000010, "Member 'FSteamInventoryEligiblePromoItemDefIDs::NumEligiblePromoItemDefs' has a wrong offset!");
static_assert(offsetof(FSteamInventoryEligiblePromoItemDefIDs, bCachedData) == 0x000014, "Member 'FSteamInventoryEligiblePromoItemDefIDs::bCachedData' has a wrong offset!");

// ScriptStruct SteamCore.LobbyChatUpdate
// 0x0028 (0x0028 - 0x0000)
struct FLobbyChatUpdate final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUserChanged;                                // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDMakingChange;                               // 0x0010(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamChatMemberStateChange>           ChatMemberStateChange;                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyChatUpdate) == 0x000008, "Wrong alignment on FLobbyChatUpdate");
static_assert(sizeof(FLobbyChatUpdate) == 0x000028, "Wrong size on FLobbyChatUpdate");
static_assert(offsetof(FLobbyChatUpdate, SteamIDLobby) == 0x000000, "Member 'FLobbyChatUpdate::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FLobbyChatUpdate, SteamIDUserChanged) == 0x000008, "Member 'FLobbyChatUpdate::SteamIDUserChanged' has a wrong offset!");
static_assert(offsetof(FLobbyChatUpdate, SteamIDMakingChange) == 0x000010, "Member 'FLobbyChatUpdate::SteamIDMakingChange' has a wrong offset!");
static_assert(offsetof(FLobbyChatUpdate, ChatMemberStateChange) == 0x000018, "Member 'FLobbyChatUpdate::ChatMemberStateChange' has a wrong offset!");

// ScriptStruct SteamCore.FriendsGetFollowerCount
// 0x0018 (0x0018 - 0x0000)
struct FFriendsGetFollowerCount final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendsGetFollowerCount) == 0x000008, "Wrong alignment on FFriendsGetFollowerCount");
static_assert(sizeof(FFriendsGetFollowerCount) == 0x000018, "Wrong size on FFriendsGetFollowerCount");
static_assert(offsetof(FFriendsGetFollowerCount, Result) == 0x000000, "Member 'FFriendsGetFollowerCount::Result' has a wrong offset!");
static_assert(offsetof(FFriendsGetFollowerCount, SteamID) == 0x000008, "Member 'FFriendsGetFollowerCount::SteamID' has a wrong offset!");
static_assert(offsetof(FFriendsGetFollowerCount, Count) == 0x000010, "Member 'FFriendsGetFollowerCount::Count' has a wrong offset!");

// ScriptStruct SteamCore.SteamInventoryFullUpdate
// 0x0004 (0x0004 - 0x0000)
struct FSteamInventoryFullUpdate final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamInventoryFullUpdate) == 0x000004, "Wrong alignment on FSteamInventoryFullUpdate");
static_assert(sizeof(FSteamInventoryFullUpdate) == 0x000004, "Wrong size on FSteamInventoryFullUpdate");
static_assert(offsetof(FSteamInventoryFullUpdate, Handle) == 0x000000, "Member 'FSteamInventoryFullUpdate::Handle' has a wrong offset!");

// ScriptStruct SteamCore.UGCUpdateHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FUGCUpdateHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCUpdateHandle) == 0x000008, "Wrong alignment on FUGCUpdateHandle");
static_assert(sizeof(FUGCUpdateHandle) == 0x000008, "Wrong size on FUGCUpdateHandle");

// ScriptStruct SteamCore.SteamInventoryRequestPricesResult
// 0x0018 (0x0018 - 0x0000)
struct FSteamInventoryRequestPricesResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamInventoryRequestPricesResult) == 0x000008, "Wrong alignment on FSteamInventoryRequestPricesResult");
static_assert(sizeof(FSteamInventoryRequestPricesResult) == 0x000018, "Wrong size on FSteamInventoryRequestPricesResult");
static_assert(offsetof(FSteamInventoryRequestPricesResult, Result) == 0x000000, "Member 'FSteamInventoryRequestPricesResult::Result' has a wrong offset!");
static_assert(offsetof(FSteamInventoryRequestPricesResult, Currency) == 0x000008, "Member 'FSteamInventoryRequestPricesResult::Currency' has a wrong offset!");

// ScriptStruct SteamCore.SteamGameID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSteamGameID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamGameID) == 0x000008, "Wrong alignment on FSteamGameID");
static_assert(sizeof(FSteamGameID) == 0x000008, "Wrong size on FSteamGameID");

// ScriptStruct SteamCore.LobbyInviteData
// 0x0018 (0x0018 - 0x0000)
struct FLobbyInviteData final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamGameID                           GameID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyInviteData) == 0x000008, "Wrong alignment on FLobbyInviteData");
static_assert(sizeof(FLobbyInviteData) == 0x000018, "Wrong size on FLobbyInviteData");
static_assert(offsetof(FLobbyInviteData, SteamIDUser) == 0x000000, "Member 'FLobbyInviteData::SteamIDUser' has a wrong offset!");
static_assert(offsetof(FLobbyInviteData, SteamIDLobby) == 0x000008, "Member 'FLobbyInviteData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FLobbyInviteData, GameID) == 0x000010, "Member 'FLobbyInviteData::GameID' has a wrong offset!");

// ScriptStruct SteamCore.SteamAppInstalled
// 0x0004 (0x0004 - 0x0000)
struct FSteamAppInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamAppInstalled) == 0x000004, "Wrong alignment on FSteamAppInstalled");
static_assert(sizeof(FSteamAppInstalled) == 0x000004, "Wrong size on FSteamAppInstalled");
static_assert(offsetof(FSteamAppInstalled, AppID) == 0x000000, "Member 'FSteamAppInstalled::AppID' has a wrong offset!");

// ScriptStruct SteamCore.SteamAppUninstalled
// 0x0004 (0x0004 - 0x0000)
struct FSteamAppUninstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamAppUninstalled) == 0x000004, "Wrong alignment on FSteamAppUninstalled");
static_assert(sizeof(FSteamAppUninstalled) == 0x000004, "Wrong size on FSteamAppUninstalled");
static_assert(offsetof(FSteamAppUninstalled, AppID) == 0x000000, "Member 'FSteamAppUninstalled::AppID' has a wrong offset!");

// ScriptStruct SteamCore.RemoteStorageFileReadAsyncComplete
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FRemoteStorageFileReadAsyncComplete final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Read;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0xC];                                        // 0x000C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoteStorageFileReadAsyncComplete) == 0x000008, "Wrong alignment on FRemoteStorageFileReadAsyncComplete");
static_assert(sizeof(FRemoteStorageFileReadAsyncComplete) == 0x000018, "Wrong size on FRemoteStorageFileReadAsyncComplete");
static_assert(offsetof(FRemoteStorageFileReadAsyncComplete, Result) == 0x000000, "Member 'FRemoteStorageFileReadAsyncComplete::Result' has a wrong offset!");
static_assert(offsetof(FRemoteStorageFileReadAsyncComplete, Offset) == 0x000004, "Member 'FRemoteStorageFileReadAsyncComplete::Offset' has a wrong offset!");
static_assert(offsetof(FRemoteStorageFileReadAsyncComplete, Read) == 0x000008, "Member 'FRemoteStorageFileReadAsyncComplete::Read' has a wrong offset!");

// ScriptStruct SteamCore.FileDetailsResult
// 0x0028 (0x0028 - 0x0000)
struct FFileDetailsResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileSize;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SHA;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Flags;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFileDetailsResult) == 0x000008, "Wrong alignment on FFileDetailsResult");
static_assert(sizeof(FFileDetailsResult) == 0x000028, "Wrong size on FFileDetailsResult");
static_assert(offsetof(FFileDetailsResult, Result) == 0x000000, "Member 'FFileDetailsResult::Result' has a wrong offset!");
static_assert(offsetof(FFileDetailsResult, FileSize) == 0x000004, "Member 'FFileDetailsResult::FileSize' has a wrong offset!");
static_assert(offsetof(FFileDetailsResult, SHA) == 0x000008, "Member 'FFileDetailsResult::SHA' has a wrong offset!");
static_assert(offsetof(FFileDetailsResult, Flags) == 0x000018, "Member 'FFileDetailsResult::Flags' has a wrong offset!");

// ScriptStruct SteamCore.RequestPlayersForGameFinalResultCallback
// 0x0028 (0x0028 - 0x0000)
struct FRequestPlayersForGameFinalResultCallback final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchID;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueGameID;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestPlayersForGameFinalResultCallback) == 0x000008, "Wrong alignment on FRequestPlayersForGameFinalResultCallback");
static_assert(sizeof(FRequestPlayersForGameFinalResultCallback) == 0x000028, "Wrong size on FRequestPlayersForGameFinalResultCallback");
static_assert(offsetof(FRequestPlayersForGameFinalResultCallback, Result) == 0x000000, "Member 'FRequestPlayersForGameFinalResultCallback::Result' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameFinalResultCallback, SearchID) == 0x000008, "Member 'FRequestPlayersForGameFinalResultCallback::SearchID' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameFinalResultCallback, UniqueGameID) == 0x000018, "Member 'FRequestPlayersForGameFinalResultCallback::UniqueGameID' has a wrong offset!");

// ScriptStruct SteamCore.ClientGameServerDeny
// 0x0020 (0x0020 - 0x0000)
struct FClientGameServerDeny final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameServerIP;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameServerPort;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BSecure;                                           // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamDenyReason                              Reason;                                            // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGameServerDeny) == 0x000008, "Wrong alignment on FClientGameServerDeny");
static_assert(sizeof(FClientGameServerDeny) == 0x000020, "Wrong size on FClientGameServerDeny");
static_assert(offsetof(FClientGameServerDeny, AppID) == 0x000000, "Member 'FClientGameServerDeny::AppID' has a wrong offset!");
static_assert(offsetof(FClientGameServerDeny, GameServerIP) == 0x000008, "Member 'FClientGameServerDeny::GameServerIP' has a wrong offset!");
static_assert(offsetof(FClientGameServerDeny, GameServerPort) == 0x000018, "Member 'FClientGameServerDeny::GameServerPort' has a wrong offset!");
static_assert(offsetof(FClientGameServerDeny, BSecure) == 0x00001C, "Member 'FClientGameServerDeny::BSecure' has a wrong offset!");
static_assert(offsetof(FClientGameServerDeny, Reason) == 0x00001D, "Member 'FClientGameServerDeny::Reason' has a wrong offset!");

// ScriptStruct SteamCore.DLCInstalled
// 0x0004 (0x0004 - 0x0000)
struct FDLCInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDLCInstalled) == 0x000004, "Wrong alignment on FDLCInstalled");
static_assert(sizeof(FDLCInstalled) == 0x000004, "Wrong size on FDLCInstalled");
static_assert(offsetof(FDLCInstalled, AppID) == 0x000000, "Member 'FDLCInstalled::AppID' has a wrong offset!");

// ScriptStruct SteamCore.EndGameResultCallback
// 0x0018 (0x0018 - 0x0000)
struct FEndGameResultCallback final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UniqueGameID;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndGameResultCallback) == 0x000008, "Wrong alignment on FEndGameResultCallback");
static_assert(sizeof(FEndGameResultCallback) == 0x000018, "Wrong size on FEndGameResultCallback");
static_assert(offsetof(FEndGameResultCallback, Result) == 0x000000, "Member 'FEndGameResultCallback::Result' has a wrong offset!");
static_assert(offsetof(FEndGameResultCallback, UniqueGameID) == 0x000008, "Member 'FEndGameResultCallback::UniqueGameID' has a wrong offset!");

// ScriptStruct SteamCore.GameOverlayActivated
// 0x0001 (0x0001 - 0x0000)
struct FGameOverlayActivated final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameOverlayActivated) == 0x000001, "Wrong alignment on FGameOverlayActivated");
static_assert(sizeof(FGameOverlayActivated) == 0x000001, "Wrong size on FGameOverlayActivated");
static_assert(offsetof(FGameOverlayActivated, bActive) == 0x000000, "Member 'FGameOverlayActivated::bActive' has a wrong offset!");

// ScriptStruct SteamCore.AssociateWithClanResult
// 0x0001 (0x0001 - 0x0000)
struct FAssociateWithClanResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssociateWithClanResult) == 0x000001, "Wrong alignment on FAssociateWithClanResult");
static_assert(sizeof(FAssociateWithClanResult) == 0x000001, "Wrong size on FAssociateWithClanResult");
static_assert(offsetof(FAssociateWithClanResult, Result) == 0x000000, "Member 'FAssociateWithClanResult::Result' has a wrong offset!");

// ScriptStruct SteamCore.SteamSessionSearchSetting
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSteamSessionSearchSetting final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamSessionSearchSetting) == 0x000008, "Wrong alignment on FSteamSessionSearchSetting");
static_assert(sizeof(FSteamSessionSearchSetting) == 0x000020, "Wrong size on FSteamSessionSearchSetting");

// ScriptStruct SteamCore.GameWebCallback
// 0x0010 (0x0010 - 0x0000)
struct FGameWebCallback final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameWebCallback) == 0x000008, "Wrong alignment on FGameWebCallback");
static_assert(sizeof(FGameWebCallback) == 0x000010, "Wrong size on FGameWebCallback");
static_assert(offsetof(FGameWebCallback, URL) == 0x000000, "Member 'FGameWebCallback::URL' has a wrong offset!");

// ScriptStruct SteamCore.AvatarImageLoaded
// 0x0020 (0x0020 - 0x0000)
struct FAvatarImageLoaded final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAvatarImageLoaded) == 0x000008, "Wrong alignment on FAvatarImageLoaded");
static_assert(sizeof(FAvatarImageLoaded) == 0x000020, "Wrong size on FAvatarImageLoaded");
static_assert(offsetof(FAvatarImageLoaded, SteamID) == 0x000000, "Member 'FAvatarImageLoaded::SteamID' has a wrong offset!");
static_assert(offsetof(FAvatarImageLoaded, Image) == 0x000008, "Member 'FAvatarImageLoaded::Image' has a wrong offset!");

// ScriptStruct SteamCore.ComputeNewPlayerCompatibilityResult
// 0x0018 (0x0018 - 0x0000)
struct FComputeNewPlayerCompatibilityResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayersThatDontLikeCandidate;                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayersThatCandidateDoesntLike;                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClanPlayersThatDontLikeCandidate;                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDCandidate;                                  // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComputeNewPlayerCompatibilityResult) == 0x000008, "Wrong alignment on FComputeNewPlayerCompatibilityResult");
static_assert(sizeof(FComputeNewPlayerCompatibilityResult) == 0x000018, "Wrong size on FComputeNewPlayerCompatibilityResult");
static_assert(offsetof(FComputeNewPlayerCompatibilityResult, Result) == 0x000000, "Member 'FComputeNewPlayerCompatibilityResult::Result' has a wrong offset!");
static_assert(offsetof(FComputeNewPlayerCompatibilityResult, PlayersThatDontLikeCandidate) == 0x000004, "Member 'FComputeNewPlayerCompatibilityResult::PlayersThatDontLikeCandidate' has a wrong offset!");
static_assert(offsetof(FComputeNewPlayerCompatibilityResult, PlayersThatCandidateDoesntLike) == 0x000008, "Member 'FComputeNewPlayerCompatibilityResult::PlayersThatCandidateDoesntLike' has a wrong offset!");
static_assert(offsetof(FComputeNewPlayerCompatibilityResult, ClanPlayersThatDontLikeCandidate) == 0x00000C, "Member 'FComputeNewPlayerCompatibilityResult::ClanPlayersThatDontLikeCandidate' has a wrong offset!");
static_assert(offsetof(FComputeNewPlayerCompatibilityResult, SteamIDCandidate) == 0x000010, "Member 'FComputeNewPlayerCompatibilityResult::SteamIDCandidate' has a wrong offset!");

// ScriptStruct SteamCore.GameServerChangeRequested
// 0x0020 (0x0020 - 0x0000)
struct FGameServerChangeRequested final
{
public:
	class FString                                 Server;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameServerChangeRequested) == 0x000008, "Wrong alignment on FGameServerChangeRequested");
static_assert(sizeof(FGameServerChangeRequested) == 0x000020, "Wrong size on FGameServerChangeRequested");
static_assert(offsetof(FGameServerChangeRequested, Server) == 0x000000, "Member 'FGameServerChangeRequested::Server' has a wrong offset!");
static_assert(offsetof(FGameServerChangeRequested, Password) == 0x000010, "Member 'FGameServerChangeRequested::Password' has a wrong offset!");

// ScriptStruct SteamCore.GSPolicyResponse
// 0x0001 (0x0001 - 0x0000)
struct FGSPolicyResponse final
{
public:
	bool                                          BSecure;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGSPolicyResponse) == 0x000001, "Wrong alignment on FGSPolicyResponse");
static_assert(sizeof(FGSPolicyResponse) == 0x000001, "Wrong size on FGSPolicyResponse");
static_assert(offsetof(FGSPolicyResponse, BSecure) == 0x000000, "Member 'FGSPolicyResponse::BSecure' has a wrong offset!");

// ScriptStruct SteamCore.GameConnectedFriendChatMsg
// 0x0010 (0x0010 - 0x0000)
struct FGameConnectedFriendChatMsg final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameConnectedFriendChatMsg) == 0x000008, "Wrong alignment on FGameConnectedFriendChatMsg");
static_assert(sizeof(FGameConnectedFriendChatMsg) == 0x000010, "Wrong size on FGameConnectedFriendChatMsg");
static_assert(offsetof(FGameConnectedFriendChatMsg, SteamIDUser) == 0x000000, "Member 'FGameConnectedFriendChatMsg::SteamIDUser' has a wrong offset!");
static_assert(offsetof(FGameConnectedFriendChatMsg, MessageID) == 0x000008, "Member 'FGameConnectedFriendChatMsg::MessageID' has a wrong offset!");

// ScriptStruct SteamCore.GSClientGroupStatus
// 0x0018 (0x0018 - 0x0000)
struct FGSClientGroupStatus final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDGroup;                                      // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMember;                                           // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOfficer;                                          // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGSClientGroupStatus) == 0x000008, "Wrong alignment on FGSClientGroupStatus");
static_assert(sizeof(FGSClientGroupStatus) == 0x000018, "Wrong size on FGSClientGroupStatus");
static_assert(offsetof(FGSClientGroupStatus, SteamIDUser) == 0x000000, "Member 'FGSClientGroupStatus::SteamIDUser' has a wrong offset!");
static_assert(offsetof(FGSClientGroupStatus, SteamIDGroup) == 0x000008, "Member 'FGSClientGroupStatus::SteamIDGroup' has a wrong offset!");
static_assert(offsetof(FGSClientGroupStatus, bMember) == 0x000010, "Member 'FGSClientGroupStatus::bMember' has a wrong offset!");
static_assert(offsetof(FGSClientGroupStatus, bOfficer) == 0x000011, "Member 'FGSClientGroupStatus::bOfficer' has a wrong offset!");

// ScriptStruct SteamCore.GameLobbyJoinRequested
// 0x0010 (0x0010 - 0x0000)
struct FGameLobbyJoinRequested final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDFriend;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameLobbyJoinRequested) == 0x000008, "Wrong alignment on FGameLobbyJoinRequested");
static_assert(sizeof(FGameLobbyJoinRequested) == 0x000010, "Wrong size on FGameLobbyJoinRequested");
static_assert(offsetof(FGameLobbyJoinRequested, SteamIDLobby) == 0x000000, "Member 'FGameLobbyJoinRequested::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FGameLobbyJoinRequested, SteamIDFriend) == 0x000008, "Member 'FGameLobbyJoinRequested::SteamIDFriend' has a wrong offset!");

// ScriptStruct SteamCore.GameServerRule
// 0x0020 (0x0020 - 0x0000)
struct FGameServerRule final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameServerRule) == 0x000008, "Wrong alignment on FGameServerRule");
static_assert(sizeof(FGameServerRule) == 0x000020, "Wrong size on FGameServerRule");
static_assert(offsetof(FGameServerRule, Name) == 0x000000, "Member 'FGameServerRule::Name' has a wrong offset!");
static_assert(offsetof(FGameServerRule, Value) == 0x000010, "Member 'FGameServerRule::Value' has a wrong offset!");

// ScriptStruct SteamCore.ValidateAuthTicketResponse
// 0x0018 (0x0018 - 0x0000)
struct FValidateAuthTicketResponse final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamAuthSessionResponse                     AuthSessionResponse;                               // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               OwnerSteamID;                                      // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidateAuthTicketResponse) == 0x000008, "Wrong alignment on FValidateAuthTicketResponse");
static_assert(sizeof(FValidateAuthTicketResponse) == 0x000018, "Wrong size on FValidateAuthTicketResponse");
static_assert(offsetof(FValidateAuthTicketResponse, SteamID) == 0x000000, "Member 'FValidateAuthTicketResponse::SteamID' has a wrong offset!");
static_assert(offsetof(FValidateAuthTicketResponse, AuthSessionResponse) == 0x000008, "Member 'FValidateAuthTicketResponse::AuthSessionResponse' has a wrong offset!");
static_assert(offsetof(FValidateAuthTicketResponse, OwnerSteamID) == 0x000010, "Member 'FValidateAuthTicketResponse::OwnerSteamID' has a wrong offset!");

// ScriptStruct SteamCore.GameRichPresenceJoinRequested
// 0x0018 (0x0018 - 0x0000)
struct FGameRichPresenceJoinRequested final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Connect;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRichPresenceJoinRequested) == 0x000008, "Wrong alignment on FGameRichPresenceJoinRequested");
static_assert(sizeof(FGameRichPresenceJoinRequested) == 0x000018, "Wrong size on FGameRichPresenceJoinRequested");
static_assert(offsetof(FGameRichPresenceJoinRequested, SteamIDFriend) == 0x000000, "Member 'FGameRichPresenceJoinRequested::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(FGameRichPresenceJoinRequested, Connect) == 0x000008, "Member 'FGameRichPresenceJoinRequested::Connect' has a wrong offset!");

// ScriptStruct SteamCore.PersonaStateChange
// 0x0018 (0x0018 - 0x0000)
struct FPersonaStateChange final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamPersonaChange>                   Flags;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonaStateChange) == 0x000008, "Wrong alignment on FPersonaStateChange");
static_assert(sizeof(FPersonaStateChange) == 0x000018, "Wrong size on FPersonaStateChange");
static_assert(offsetof(FPersonaStateChange, SteamID) == 0x000000, "Member 'FPersonaStateChange::SteamID' has a wrong offset!");
static_assert(offsetof(FPersonaStateChange, Flags) == 0x000008, "Member 'FPersonaStateChange::Flags' has a wrong offset!");

// ScriptStruct SteamCore.PublishedFileID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPublishedFileID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPublishedFileID) == 0x000008, "Wrong alignment on FPublishedFileID");
static_assert(sizeof(FPublishedFileID) == 0x000008, "Wrong size on FPublishedFileID");

// ScriptStruct SteamCore.GetUserItemVoteResult
// 0x0010 (0x0010 - 0x0000)
struct FGetUserItemVoteResult final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVotedUp;                                          // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVotedDown;                                        // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoteSkipped;                                      // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetUserItemVoteResult) == 0x000008, "Wrong alignment on FGetUserItemVoteResult");
static_assert(sizeof(FGetUserItemVoteResult) == 0x000010, "Wrong size on FGetUserItemVoteResult");
static_assert(offsetof(FGetUserItemVoteResult, PublishedFileID) == 0x000000, "Member 'FGetUserItemVoteResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FGetUserItemVoteResult, Result) == 0x000008, "Member 'FGetUserItemVoteResult::Result' has a wrong offset!");
static_assert(offsetof(FGetUserItemVoteResult, bVotedUp) == 0x000009, "Member 'FGetUserItemVoteResult::bVotedUp' has a wrong offset!");
static_assert(offsetof(FGetUserItemVoteResult, bVotedDown) == 0x00000A, "Member 'FGetUserItemVoteResult::bVotedDown' has a wrong offset!");
static_assert(offsetof(FGetUserItemVoteResult, bVoteSkipped) == 0x00000B, "Member 'FGetUserItemVoteResult::bVoteSkipped' has a wrong offset!");

// ScriptStruct SteamCore.GSClientDeny
// 0x0020 (0x0020 - 0x0000)
struct FGSClientDeny final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamDenyReason                              DenyReason;                                        // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OptionalText;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGSClientDeny) == 0x000008, "Wrong alignment on FGSClientDeny");
static_assert(sizeof(FGSClientDeny) == 0x000020, "Wrong size on FGSClientDeny");
static_assert(offsetof(FGSClientDeny, SteamID) == 0x000000, "Member 'FGSClientDeny::SteamID' has a wrong offset!");
static_assert(offsetof(FGSClientDeny, DenyReason) == 0x000008, "Member 'FGSClientDeny::DenyReason' has a wrong offset!");
static_assert(offsetof(FGSClientDeny, OptionalText) == 0x000010, "Member 'FGSClientDeny::OptionalText' has a wrong offset!");

// ScriptStruct SteamCore.ClanOfficerListResponse
// 0x0010 (0x0010 - 0x0000)
struct FClanOfficerListResponse final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Officers;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClanOfficerListResponse) == 0x000008, "Wrong alignment on FClanOfficerListResponse");
static_assert(sizeof(FClanOfficerListResponse) == 0x000010, "Wrong size on FClanOfficerListResponse");
static_assert(offsetof(FClanOfficerListResponse, SteamIDClan) == 0x000000, "Member 'FClanOfficerListResponse::SteamIDClan' has a wrong offset!");
static_assert(offsetof(FClanOfficerListResponse, Officers) == 0x000008, "Member 'FClanOfficerListResponse::Officers' has a wrong offset!");
static_assert(offsetof(FClanOfficerListResponse, bSuccess) == 0x00000C, "Member 'FClanOfficerListResponse::bSuccess' has a wrong offset!");

// ScriptStruct SteamCore.FriendRichPresenceUpdate
// 0x0010 (0x0010 - 0x0000)
struct FFriendRichPresenceUpdate final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendRichPresenceUpdate) == 0x000008, "Wrong alignment on FFriendRichPresenceUpdate");
static_assert(sizeof(FFriendRichPresenceUpdate) == 0x000010, "Wrong size on FFriendRichPresenceUpdate");
static_assert(offsetof(FFriendRichPresenceUpdate, SteamIDFriend) == 0x000000, "Member 'FFriendRichPresenceUpdate::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(FFriendRichPresenceUpdate, AppID) == 0x000008, "Member 'FFriendRichPresenceUpdate::AppID' has a wrong offset!");

// ScriptStruct SteamCore.GameConnectedClanChatMsg
// 0x0018 (0x0018 - 0x0000)
struct FGameConnectedClanChatMsg final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClanChat;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameConnectedClanChatMsg) == 0x000008, "Wrong alignment on FGameConnectedClanChatMsg");
static_assert(sizeof(FGameConnectedClanChatMsg) == 0x000018, "Wrong size on FGameConnectedClanChatMsg");
static_assert(offsetof(FGameConnectedClanChatMsg, SteamIDUser) == 0x000000, "Member 'FGameConnectedClanChatMsg::SteamIDUser' has a wrong offset!");
static_assert(offsetof(FGameConnectedClanChatMsg, SteamIDClanChat) == 0x000008, "Member 'FGameConnectedClanChatMsg::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(FGameConnectedClanChatMsg, MessageID) == 0x000010, "Member 'FGameConnectedClanChatMsg::MessageID' has a wrong offset!");

// ScriptStruct SteamCore.GameConnectedChatJoin
// 0x0010 (0x0010 - 0x0000)
struct FGameConnectedChatJoin final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameConnectedChatJoin) == 0x000008, "Wrong alignment on FGameConnectedChatJoin");
static_assert(sizeof(FGameConnectedChatJoin) == 0x000010, "Wrong size on FGameConnectedChatJoin");
static_assert(offsetof(FGameConnectedChatJoin, SteamIDClanChat) == 0x000000, "Member 'FGameConnectedChatJoin::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(FGameConnectedChatJoin, SteamIDUser) == 0x000008, "Member 'FGameConnectedChatJoin::SteamIDUser' has a wrong offset!");

// ScriptStruct SteamCore.P2PSessionRequest
// 0x0008 (0x0008 - 0x0000)
struct FP2PSessionRequest final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FP2PSessionRequest) == 0x000008, "Wrong alignment on FP2PSessionRequest");
static_assert(sizeof(FP2PSessionRequest) == 0x000008, "Wrong size on FP2PSessionRequest");
static_assert(offsetof(FP2PSessionRequest, SteamIDRemote) == 0x000000, "Member 'FP2PSessionRequest::SteamIDRemote' has a wrong offset!");

// ScriptStruct SteamCore.GameConnectedChatLeave
// 0x0018 (0x0018 - 0x0000)
struct FGameConnectedChatLeave final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKicked;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDropped;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameConnectedChatLeave) == 0x000008, "Wrong alignment on FGameConnectedChatLeave");
static_assert(sizeof(FGameConnectedChatLeave) == 0x000018, "Wrong size on FGameConnectedChatLeave");
static_assert(offsetof(FGameConnectedChatLeave, SteamIDClanChat) == 0x000000, "Member 'FGameConnectedChatLeave::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(FGameConnectedChatLeave, SteamIDUser) == 0x000008, "Member 'FGameConnectedChatLeave::SteamIDUser' has a wrong offset!");
static_assert(offsetof(FGameConnectedChatLeave, bKicked) == 0x000010, "Member 'FGameConnectedChatLeave::bKicked' has a wrong offset!");
static_assert(offsetof(FGameConnectedChatLeave, bDropped) == 0x000011, "Member 'FGameConnectedChatLeave::bDropped' has a wrong offset!");

// ScriptStruct SteamCore.DownloadClanActivityCountsResult
// 0x0001 (0x0001 - 0x0000)
struct FDownloadClanActivityCountsResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDownloadClanActivityCountsResult) == 0x000001, "Wrong alignment on FDownloadClanActivityCountsResult");
static_assert(sizeof(FDownloadClanActivityCountsResult) == 0x000001, "Wrong size on FDownloadClanActivityCountsResult");
static_assert(offsetof(FDownloadClanActivityCountsResult, bSuccess) == 0x000000, "Member 'FDownloadClanActivityCountsResult::bSuccess' has a wrong offset!");

// ScriptStruct SteamCore.FavoritesListAccountsUpdated
// 0x0001 (0x0001 - 0x0000)
struct FFavoritesListAccountsUpdated final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFavoritesListAccountsUpdated) == 0x000001, "Wrong alignment on FFavoritesListAccountsUpdated");
static_assert(sizeof(FFavoritesListAccountsUpdated) == 0x000001, "Wrong size on FFavoritesListAccountsUpdated");
static_assert(offsetof(FFavoritesListAccountsUpdated, Result) == 0x000000, "Member 'FFavoritesListAccountsUpdated::Result' has a wrong offset!");

// ScriptStruct SteamCore.JoinClanChatRoomCompletionResult
// 0x0010 (0x0010 - 0x0000)
struct FJoinClanChatRoomCompletionResult final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatRoomEnterResponse                   ChatRoomEnterResponse;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJoinClanChatRoomCompletionResult) == 0x000008, "Wrong alignment on FJoinClanChatRoomCompletionResult");
static_assert(sizeof(FJoinClanChatRoomCompletionResult) == 0x000010, "Wrong size on FJoinClanChatRoomCompletionResult");
static_assert(offsetof(FJoinClanChatRoomCompletionResult, SteamIDClanChat) == 0x000000, "Member 'FJoinClanChatRoomCompletionResult::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(FJoinClanChatRoomCompletionResult, ChatRoomEnterResponse) == 0x000008, "Member 'FJoinClanChatRoomCompletionResult::ChatRoomEnterResponse' has a wrong offset!");

// ScriptStruct SteamCore.SetPersonaNameResponse
// 0x0003 (0x0003 - 0x0000)
struct FSetPersonaNameResponse final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalSuccess;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetPersonaNameResponse) == 0x000001, "Wrong alignment on FSetPersonaNameResponse");
static_assert(sizeof(FSetPersonaNameResponse) == 0x000003, "Wrong size on FSetPersonaNameResponse");
static_assert(offsetof(FSetPersonaNameResponse, Result) == 0x000000, "Member 'FSetPersonaNameResponse::Result' has a wrong offset!");
static_assert(offsetof(FSetPersonaNameResponse, bSuccess) == 0x000001, "Member 'FSetPersonaNameResponse::bSuccess' has a wrong offset!");
static_assert(offsetof(FSetPersonaNameResponse, bLocalSuccess) == 0x000002, "Member 'FSetPersonaNameResponse::bLocalSuccess' has a wrong offset!");

// ScriptStruct SteamCore.LobbyDataUpdate
// 0x0018 (0x0018 - 0x0000)
struct FLobbyDataUpdate final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDMember;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyDataUpdate) == 0x000008, "Wrong alignment on FLobbyDataUpdate");
static_assert(sizeof(FLobbyDataUpdate) == 0x000018, "Wrong size on FLobbyDataUpdate");
static_assert(offsetof(FLobbyDataUpdate, SteamIDLobby) == 0x000000, "Member 'FLobbyDataUpdate::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FLobbyDataUpdate, SteamIDMember) == 0x000008, "Member 'FLobbyDataUpdate::SteamIDMember' has a wrong offset!");
static_assert(offsetof(FLobbyDataUpdate, bSuccess) == 0x000010, "Member 'FLobbyDataUpdate::bSuccess' has a wrong offset!");

// ScriptStruct SteamCore.FriendsIsFollowing
// 0x0018 (0x0018 - 0x0000)
struct FFriendsIsFollowing final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFollowing;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendsIsFollowing) == 0x000008, "Wrong alignment on FFriendsIsFollowing");
static_assert(sizeof(FFriendsIsFollowing) == 0x000018, "Wrong size on FFriendsIsFollowing");
static_assert(offsetof(FFriendsIsFollowing, Result) == 0x000000, "Member 'FFriendsIsFollowing::Result' has a wrong offset!");
static_assert(offsetof(FFriendsIsFollowing, SteamID) == 0x000008, "Member 'FFriendsIsFollowing::SteamID' has a wrong offset!");
static_assert(offsetof(FFriendsIsFollowing, bIsFollowing) == 0x000010, "Member 'FFriendsIsFollowing::bIsFollowing' has a wrong offset!");

// ScriptStruct SteamCore.SteamSessionSetting
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSteamSessionSetting final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamSessionSetting) == 0x000008, "Wrong alignment on FSteamSessionSetting");
static_assert(sizeof(FSteamSessionSetting) == 0x000028, "Wrong size on FSteamSessionSetting");

// ScriptStruct SteamCore.LobbyEnterData
// 0x0010 (0x0010 - 0x0000)
struct FLobbyEnterData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatRoomEnterResponse                   ChatRoomEnterResponse;                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyEnterData) == 0x000008, "Wrong alignment on FLobbyEnterData");
static_assert(sizeof(FLobbyEnterData) == 0x000010, "Wrong size on FLobbyEnterData");
static_assert(offsetof(FLobbyEnterData, SteamIDLobby) == 0x000000, "Member 'FLobbyEnterData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FLobbyEnterData, bLocked) == 0x000008, "Member 'FLobbyEnterData::bLocked' has a wrong offset!");
static_assert(offsetof(FLobbyEnterData, ChatRoomEnterResponse) == 0x000009, "Member 'FLobbyEnterData::ChatRoomEnterResponse' has a wrong offset!");

// ScriptStruct SteamCore.SteamTicketHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSteamTicketHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamTicketHandle) == 0x000004, "Wrong alignment on FSteamTicketHandle");
static_assert(sizeof(FSteamTicketHandle) == 0x000004, "Wrong size on FSteamTicketHandle");

// ScriptStruct SteamCore.GetAuthSessionTicketResponse
// 0x0008 (0x0008 - 0x0000)
struct FGetAuthSessionTicketResponse final
{
public:
	struct FSteamTicketHandle                     AuthTicket;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetAuthSessionTicketResponse) == 0x000004, "Wrong alignment on FGetAuthSessionTicketResponse");
static_assert(sizeof(FGetAuthSessionTicketResponse) == 0x000008, "Wrong size on FGetAuthSessionTicketResponse");
static_assert(offsetof(FGetAuthSessionTicketResponse, AuthTicket) == 0x000000, "Member 'FGetAuthSessionTicketResponse::AuthTicket' has a wrong offset!");
static_assert(offsetof(FGetAuthSessionTicketResponse, Result) == 0x000004, "Member 'FGetAuthSessionTicketResponse::Result' has a wrong offset!");

// ScriptStruct SteamCore.FriendsEnumerateFollowingList
// 0x0020 (0x0020 - 0x0000)
struct FFriendsEnumerateFollowingList final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamID>                       SteamIDs;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         Results;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalResult;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendsEnumerateFollowingList) == 0x000008, "Wrong alignment on FFriendsEnumerateFollowingList");
static_assert(sizeof(FFriendsEnumerateFollowingList) == 0x000020, "Wrong size on FFriendsEnumerateFollowingList");
static_assert(offsetof(FFriendsEnumerateFollowingList, Result) == 0x000000, "Member 'FFriendsEnumerateFollowingList::Result' has a wrong offset!");
static_assert(offsetof(FFriendsEnumerateFollowingList, SteamIDs) == 0x000008, "Member 'FFriendsEnumerateFollowingList::SteamIDs' has a wrong offset!");
static_assert(offsetof(FFriendsEnumerateFollowingList, Results) == 0x000018, "Member 'FFriendsEnumerateFollowingList::Results' has a wrong offset!");
static_assert(offsetof(FFriendsEnumerateFollowingList, TotalResult) == 0x00001C, "Member 'FFriendsEnumerateFollowingList::TotalResult' has a wrong offset!");

// ScriptStruct SteamCore.CreateLobbyData
// 0x0010 (0x0010 - 0x0000)
struct FCreateLobbyData final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDLobby;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateLobbyData) == 0x000008, "Wrong alignment on FCreateLobbyData");
static_assert(sizeof(FCreateLobbyData) == 0x000010, "Wrong size on FCreateLobbyData");
static_assert(offsetof(FCreateLobbyData, Result) == 0x000000, "Member 'FCreateLobbyData::Result' has a wrong offset!");
static_assert(offsetof(FCreateLobbyData, SteamIDLobby) == 0x000008, "Member 'FCreateLobbyData::SteamIDLobby' has a wrong offset!");

// ScriptStruct SteamCore.SearchForGameProgressCallback
// 0x0030 (0x0030 - 0x0000)
struct FSearchForGameProgressCallback final
{
public:
	class FString                                 SearchID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               LobbyID;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDEndedSearch;                                // 0x0020(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsRemainingEstimate;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayersSearching;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSearchForGameProgressCallback) == 0x000008, "Wrong alignment on FSearchForGameProgressCallback");
static_assert(sizeof(FSearchForGameProgressCallback) == 0x000030, "Wrong size on FSearchForGameProgressCallback");
static_assert(offsetof(FSearchForGameProgressCallback, SearchID) == 0x000000, "Member 'FSearchForGameProgressCallback::SearchID' has a wrong offset!");
static_assert(offsetof(FSearchForGameProgressCallback, Result) == 0x000010, "Member 'FSearchForGameProgressCallback::Result' has a wrong offset!");
static_assert(offsetof(FSearchForGameProgressCallback, LobbyID) == 0x000018, "Member 'FSearchForGameProgressCallback::LobbyID' has a wrong offset!");
static_assert(offsetof(FSearchForGameProgressCallback, SteamIDEndedSearch) == 0x000020, "Member 'FSearchForGameProgressCallback::SteamIDEndedSearch' has a wrong offset!");
static_assert(offsetof(FSearchForGameProgressCallback, SecondsRemainingEstimate) == 0x000028, "Member 'FSearchForGameProgressCallback::SecondsRemainingEstimate' has a wrong offset!");
static_assert(offsetof(FSearchForGameProgressCallback, PlayersSearching) == 0x00002C, "Member 'FSearchForGameProgressCallback::PlayersSearching' has a wrong offset!");

// ScriptStruct SteamCore.JoinLobbyData
// 0x0010 (0x0010 - 0x0000)
struct FJoinLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatRoomEnterResponse                   ChatRoomEnterResponse;                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJoinLobbyData) == 0x000008, "Wrong alignment on FJoinLobbyData");
static_assert(sizeof(FJoinLobbyData) == 0x000010, "Wrong size on FJoinLobbyData");
static_assert(offsetof(FJoinLobbyData, SteamIDLobby) == 0x000000, "Member 'FJoinLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FJoinLobbyData, bLocked) == 0x000008, "Member 'FJoinLobbyData::bLocked' has a wrong offset!");
static_assert(offsetof(FJoinLobbyData, ChatRoomEnterResponse) == 0x000009, "Member 'FJoinLobbyData::ChatRoomEnterResponse' has a wrong offset!");

// ScriptStruct SteamCore.SearchForGameResultCallback
// 0x0030 (0x0030 - 0x0000)
struct FSearchForGameResultCallback final
{
public:
	class FString                                 SearchID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountPlayersInGame;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountAcceptedGame;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDHost;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinalCallback;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSearchForGameResultCallback) == 0x000008, "Wrong alignment on FSearchForGameResultCallback");
static_assert(sizeof(FSearchForGameResultCallback) == 0x000030, "Wrong size on FSearchForGameResultCallback");
static_assert(offsetof(FSearchForGameResultCallback, SearchID) == 0x000000, "Member 'FSearchForGameResultCallback::SearchID' has a wrong offset!");
static_assert(offsetof(FSearchForGameResultCallback, Result) == 0x000010, "Member 'FSearchForGameResultCallback::Result' has a wrong offset!");
static_assert(offsetof(FSearchForGameResultCallback, CountPlayersInGame) == 0x000014, "Member 'FSearchForGameResultCallback::CountPlayersInGame' has a wrong offset!");
static_assert(offsetof(FSearchForGameResultCallback, CountAcceptedGame) == 0x000018, "Member 'FSearchForGameResultCallback::CountAcceptedGame' has a wrong offset!");
static_assert(offsetof(FSearchForGameResultCallback, SteamIDHost) == 0x000020, "Member 'FSearchForGameResultCallback::SteamIDHost' has a wrong offset!");
static_assert(offsetof(FSearchForGameResultCallback, bFinalCallback) == 0x000028, "Member 'FSearchForGameResultCallback::bFinalCallback' has a wrong offset!");

// ScriptStruct SteamCore.RequestPlayersForGameProgressCallback
// 0x0018 (0x0018 - 0x0000)
struct FRequestPlayersForGameProgressCallback final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchID;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestPlayersForGameProgressCallback) == 0x000008, "Wrong alignment on FRequestPlayersForGameProgressCallback");
static_assert(sizeof(FRequestPlayersForGameProgressCallback) == 0x000018, "Wrong size on FRequestPlayersForGameProgressCallback");
static_assert(offsetof(FRequestPlayersForGameProgressCallback, Result) == 0x000000, "Member 'FRequestPlayersForGameProgressCallback::Result' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameProgressCallback, SearchID) == 0x000008, "Member 'FRequestPlayersForGameProgressCallback::SearchID' has a wrong offset!");

// ScriptStruct SteamCore.RequestPlayersForGameResultCallback
// 0x0050 (0x0050 - 0x0000)
struct FRequestPlayersForGameResultCallback final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchID;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDPlayerFound;                                // 0x0018(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamPlayerAcceptState                       PlayerAcceptState;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlayersFound;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlayersAcceptedGame;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuggestedTeamIndex;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UniqueGameID;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestPlayersForGameResultCallback) == 0x000008, "Wrong alignment on FRequestPlayersForGameResultCallback");
static_assert(sizeof(FRequestPlayersForGameResultCallback) == 0x000050, "Wrong size on FRequestPlayersForGameResultCallback");
static_assert(offsetof(FRequestPlayersForGameResultCallback, Result) == 0x000000, "Member 'FRequestPlayersForGameResultCallback::Result' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, SearchID) == 0x000008, "Member 'FRequestPlayersForGameResultCallback::SearchID' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, SteamIDPlayerFound) == 0x000018, "Member 'FRequestPlayersForGameResultCallback::SteamIDPlayerFound' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, SteamIDLobby) == 0x000020, "Member 'FRequestPlayersForGameResultCallback::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, PlayerAcceptState) == 0x000028, "Member 'FRequestPlayersForGameResultCallback::PlayerAcceptState' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, PlayerIndex) == 0x00002C, "Member 'FRequestPlayersForGameResultCallback::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, TotalPlayersFound) == 0x000030, "Member 'FRequestPlayersForGameResultCallback::TotalPlayersFound' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, TotalPlayersAcceptedGame) == 0x000034, "Member 'FRequestPlayersForGameResultCallback::TotalPlayersAcceptedGame' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, SuggestedTeamIndex) == 0x000038, "Member 'FRequestPlayersForGameResultCallback::SuggestedTeamIndex' has a wrong offset!");
static_assert(offsetof(FRequestPlayersForGameResultCallback, UniqueGameID) == 0x000040, "Member 'FRequestPlayersForGameResultCallback::UniqueGameID' has a wrong offset!");

// ScriptStruct SteamCore.SubmitPlayerResultResultCallback
// 0x0020 (0x0020 - 0x0000)
struct FSubmitPlayerResultResultCallback final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UniqueGameID;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDPlayer;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmitPlayerResultResultCallback) == 0x000008, "Wrong alignment on FSubmitPlayerResultResultCallback");
static_assert(sizeof(FSubmitPlayerResultResultCallback) == 0x000020, "Wrong size on FSubmitPlayerResultResultCallback");
static_assert(offsetof(FSubmitPlayerResultResultCallback, Result) == 0x000000, "Member 'FSubmitPlayerResultResultCallback::Result' has a wrong offset!");
static_assert(offsetof(FSubmitPlayerResultResultCallback, UniqueGameID) == 0x000008, "Member 'FSubmitPlayerResultResultCallback::UniqueGameID' has a wrong offset!");
static_assert(offsetof(FSubmitPlayerResultResultCallback, SteamIDPlayer) == 0x000018, "Member 'FSubmitPlayerResultResultCallback::SteamIDPlayer' has a wrong offset!");

// ScriptStruct SteamCore.GSClientApprove
// 0x0010 (0x0010 - 0x0000)
struct FGSClientApprove final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               OwnerSteamID;                                      // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGSClientApprove) == 0x000008, "Wrong alignment on FGSClientApprove");
static_assert(sizeof(FGSClientApprove) == 0x000010, "Wrong size on FGSClientApprove");
static_assert(offsetof(FGSClientApprove, SteamID) == 0x000000, "Member 'FGSClientApprove::SteamID' has a wrong offset!");
static_assert(offsetof(FGSClientApprove, OwnerSteamID) == 0x000008, "Member 'FGSClientApprove::OwnerSteamID' has a wrong offset!");

// ScriptStruct SteamCore.GSStatsReceived
// 0x0010 (0x0010 - 0x0000)
struct FGSStatsReceived final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGSStatsReceived) == 0x000008, "Wrong alignment on FGSStatsReceived");
static_assert(sizeof(FGSStatsReceived) == 0x000010, "Wrong size on FGSStatsReceived");
static_assert(offsetof(FGSStatsReceived, Result) == 0x000000, "Member 'FGSStatsReceived::Result' has a wrong offset!");
static_assert(offsetof(FGSStatsReceived, SteamIDUser) == 0x000008, "Member 'FGSStatsReceived::SteamIDUser' has a wrong offset!");

// ScriptStruct SteamCore.GSStatsStored
// 0x0010 (0x0010 - 0x0000)
struct FGSStatsStored final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGSStatsStored) == 0x000008, "Wrong alignment on FGSStatsStored");
static_assert(sizeof(FGSStatsStored) == 0x000010, "Wrong size on FGSStatsStored");
static_assert(offsetof(FGSStatsStored, Result) == 0x000000, "Member 'FGSStatsStored::Result' has a wrong offset!");
static_assert(offsetof(FGSStatsStored, SteamIDUser) == 0x000008, "Member 'FGSStatsStored::SteamIDUser' has a wrong offset!");

// ScriptStruct SteamCore.GSStatsUnloaded
// 0x0008 (0x0008 - 0x0000)
struct FGSStatsUnloaded final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGSStatsUnloaded) == 0x000008, "Wrong alignment on FGSStatsUnloaded");
static_assert(sizeof(FGSStatsUnloaded) == 0x000008, "Wrong size on FGSStatsUnloaded");
static_assert(offsetof(FGSStatsUnloaded, SteamIDUser) == 0x000000, "Member 'FGSStatsUnloaded::SteamIDUser' has a wrong offset!");

// ScriptStruct SteamCore.FavoritesListChanged
// 0x0040 (0x0040 - 0x0000)
struct FFavoritesListChanged final
{
public:
	class FString                                 IP;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESteamFavoriteFlags>                   Flags;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bAdd;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamID;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFavoritesListChanged) == 0x000008, "Wrong alignment on FFavoritesListChanged");
static_assert(sizeof(FFavoritesListChanged) == 0x000040, "Wrong size on FFavoritesListChanged");
static_assert(offsetof(FFavoritesListChanged, IP) == 0x000000, "Member 'FFavoritesListChanged::IP' has a wrong offset!");
static_assert(offsetof(FFavoritesListChanged, QueryPort) == 0x000010, "Member 'FFavoritesListChanged::QueryPort' has a wrong offset!");
static_assert(offsetof(FFavoritesListChanged, ConnectionPort) == 0x000014, "Member 'FFavoritesListChanged::ConnectionPort' has a wrong offset!");
static_assert(offsetof(FFavoritesListChanged, AppID) == 0x000018, "Member 'FFavoritesListChanged::AppID' has a wrong offset!");
static_assert(offsetof(FFavoritesListChanged, Flags) == 0x000020, "Member 'FFavoritesListChanged::Flags' has a wrong offset!");
static_assert(offsetof(FFavoritesListChanged, bAdd) == 0x000030, "Member 'FFavoritesListChanged::bAdd' has a wrong offset!");
static_assert(offsetof(FFavoritesListChanged, SteamID) == 0x000038, "Member 'FFavoritesListChanged::SteamID' has a wrong offset!");

// ScriptStruct SteamCore.LobbyChatMsg
// 0x0018 (0x0018 - 0x0000)
struct FLobbyChatMsg final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatEntryType                           ChatEntryType;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChatID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyChatMsg) == 0x000008, "Wrong alignment on FLobbyChatMsg");
static_assert(sizeof(FLobbyChatMsg) == 0x000018, "Wrong size on FLobbyChatMsg");
static_assert(offsetof(FLobbyChatMsg, SteamIDLobby) == 0x000000, "Member 'FLobbyChatMsg::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FLobbyChatMsg, SteamIDUser) == 0x000008, "Member 'FLobbyChatMsg::SteamIDUser' has a wrong offset!");
static_assert(offsetof(FLobbyChatMsg, ChatEntryType) == 0x000010, "Member 'FLobbyChatMsg::ChatEntryType' has a wrong offset!");
static_assert(offsetof(FLobbyChatMsg, ChatID) == 0x000014, "Member 'FLobbyChatMsg::ChatID' has a wrong offset!");

// ScriptStruct SteamCore.SteamLeaderboard
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSteamLeaderboard final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamLeaderboard) == 0x000008, "Wrong alignment on FSteamLeaderboard");
static_assert(sizeof(FSteamLeaderboard) == 0x000008, "Wrong size on FSteamLeaderboard");

// ScriptStruct SteamCore.SteamLeaderboardEntries
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSteamLeaderboardEntries final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamLeaderboardEntries) == 0x000008, "Wrong alignment on FSteamLeaderboardEntries");
static_assert(sizeof(FSteamLeaderboardEntries) == 0x000008, "Wrong size on FSteamLeaderboardEntries");

// ScriptStruct SteamCore.LeaderboardScoresDownloadedForUsers
// 0x0018 (0x0018 - 0x0000)
struct FLeaderboardScoresDownloadedForUsers final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboardEntries               SteamLeaderboardEntries;                           // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryCount;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardScoresDownloadedForUsers) == 0x000008, "Wrong alignment on FLeaderboardScoresDownloadedForUsers");
static_assert(sizeof(FLeaderboardScoresDownloadedForUsers) == 0x000018, "Wrong size on FLeaderboardScoresDownloadedForUsers");
static_assert(offsetof(FLeaderboardScoresDownloadedForUsers, SteamLeaderboard) == 0x000000, "Member 'FLeaderboardScoresDownloadedForUsers::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoresDownloadedForUsers, SteamLeaderboardEntries) == 0x000008, "Member 'FLeaderboardScoresDownloadedForUsers::SteamLeaderboardEntries' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoresDownloadedForUsers, EntryCount) == 0x000010, "Member 'FLeaderboardScoresDownloadedForUsers::EntryCount' has a wrong offset!");

// ScriptStruct SteamCore.LobbyGameCreated
// 0x0028 (0x0028 - 0x0000)
struct FLobbyGameCreated final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDGameServer;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyGameCreated) == 0x000008, "Wrong alignment on FLobbyGameCreated");
static_assert(sizeof(FLobbyGameCreated) == 0x000028, "Wrong size on FLobbyGameCreated");
static_assert(offsetof(FLobbyGameCreated, SteamIDLobby) == 0x000000, "Member 'FLobbyGameCreated::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FLobbyGameCreated, SteamIDGameServer) == 0x000008, "Member 'FLobbyGameCreated::SteamIDGameServer' has a wrong offset!");
static_assert(offsetof(FLobbyGameCreated, IP) == 0x000010, "Member 'FLobbyGameCreated::IP' has a wrong offset!");
static_assert(offsetof(FLobbyGameCreated, Port) == 0x000020, "Member 'FLobbyGameCreated::Port' has a wrong offset!");

// ScriptStruct SteamCore.SteamServerAddr
// 0x0038 (0x0038 - 0x0000)
struct FSteamServerAddr final
{
public:
	class FString                                 IP;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Port;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         QueryPort;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ConnectionAddressString;                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SteamP2PAddr;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSteamServerAddr) == 0x000008, "Wrong alignment on FSteamServerAddr");
static_assert(sizeof(FSteamServerAddr) == 0x000038, "Wrong size on FSteamServerAddr");
static_assert(offsetof(FSteamServerAddr, IP) == 0x000000, "Member 'FSteamServerAddr::IP' has a wrong offset!");
static_assert(offsetof(FSteamServerAddr, Port) == 0x000010, "Member 'FSteamServerAddr::Port' has a wrong offset!");
static_assert(offsetof(FSteamServerAddr, QueryPort) == 0x000014, "Member 'FSteamServerAddr::QueryPort' has a wrong offset!");
static_assert(offsetof(FSteamServerAddr, ConnectionAddressString) == 0x000018, "Member 'FSteamServerAddr::ConnectionAddressString' has a wrong offset!");
static_assert(offsetof(FSteamServerAddr, SteamP2PAddr) == 0x000028, "Member 'FSteamServerAddr::SteamP2PAddr' has a wrong offset!");

// ScriptStruct SteamCore.LobbyKickedData
// 0x0018 (0x0018 - 0x0000)
struct FLobbyKickedData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDAdmin;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickedDueToDisconnect;                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyKickedData) == 0x000008, "Wrong alignment on FLobbyKickedData");
static_assert(sizeof(FLobbyKickedData) == 0x000018, "Wrong size on FLobbyKickedData");
static_assert(offsetof(FLobbyKickedData, SteamIDLobby) == 0x000000, "Member 'FLobbyKickedData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(FLobbyKickedData, SteamIDAdmin) == 0x000008, "Member 'FLobbyKickedData::SteamIDAdmin' has a wrong offset!");
static_assert(offsetof(FLobbyKickedData, bKickedDueToDisconnect) == 0x000010, "Member 'FLobbyKickedData::bKickedDueToDisconnect' has a wrong offset!");

// ScriptStruct SteamCore.VolumeHasChanged
// 0x0004 (0x0004 - 0x0000)
struct FVolumeHasChanged final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumeHasChanged) == 0x000004, "Wrong alignment on FVolumeHasChanged");
static_assert(sizeof(FVolumeHasChanged) == 0x000004, "Wrong size on FVolumeHasChanged");
static_assert(offsetof(FVolumeHasChanged, Volume) == 0x000000, "Member 'FVolumeHasChanged::Volume' has a wrong offset!");

// ScriptStruct SteamCore.LobbyMatchList
// 0x0004 (0x0004 - 0x0000)
struct FLobbyMatchList final
{
public:
	int32                                         LobbiesMatching;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyMatchList) == 0x000004, "Wrong alignment on FLobbyMatchList");
static_assert(sizeof(FLobbyMatchList) == 0x000004, "Wrong size on FLobbyMatchList");
static_assert(offsetof(FLobbyMatchList, LobbiesMatching) == 0x000000, "Member 'FLobbyMatchList::LobbiesMatching' has a wrong offset!");

// ScriptStruct SteamCore.SteamSessionResult
// 0x0118 (0x0118 - 0x0000)
struct FSteamSessionResult final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSteamSessionSetting>           SessionSettings;                                   // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamSessionResult) == 0x000008, "Wrong alignment on FSteamSessionResult");
static_assert(sizeof(FSteamSessionResult) == 0x000118, "Wrong size on FSteamSessionResult");
static_assert(offsetof(FSteamSessionResult, Result) == 0x000000, "Member 'FSteamSessionResult::Result' has a wrong offset!");
static_assert(offsetof(FSteamSessionResult, SessionSettings) == 0x000108, "Member 'FSteamSessionResult::SessionSettings' has a wrong offset!");

// ScriptStruct SteamCore.GameServerItem
// 0x00B0 (0x00B0 - 0x0000)
struct FGameServerItem final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameDescription;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameTags;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamServerAddr                       SteamServerAddr;                                   // 0x0040(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Players;                                           // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotPlayers;                                        // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVersion;                                     // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassword;                                         // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BSecure;                                           // 0x008D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x22];                                      // 0x008E(0x0022)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameServerItem) == 0x000008, "Wrong alignment on FGameServerItem");
static_assert(sizeof(FGameServerItem) == 0x0000B0, "Wrong size on FGameServerItem");
static_assert(offsetof(FGameServerItem, ServerName) == 0x000000, "Member 'FGameServerItem::ServerName' has a wrong offset!");
static_assert(offsetof(FGameServerItem, MapName) == 0x000010, "Member 'FGameServerItem::MapName' has a wrong offset!");
static_assert(offsetof(FGameServerItem, GameDescription) == 0x000020, "Member 'FGameServerItem::GameDescription' has a wrong offset!");
static_assert(offsetof(FGameServerItem, GameTags) == 0x000030, "Member 'FGameServerItem::GameTags' has a wrong offset!");
static_assert(offsetof(FGameServerItem, SteamServerAddr) == 0x000040, "Member 'FGameServerItem::SteamServerAddr' has a wrong offset!");
static_assert(offsetof(FGameServerItem, Ping) == 0x000078, "Member 'FGameServerItem::Ping' has a wrong offset!");
static_assert(offsetof(FGameServerItem, Players) == 0x00007C, "Member 'FGameServerItem::Players' has a wrong offset!");
static_assert(offsetof(FGameServerItem, MaxPlayers) == 0x000080, "Member 'FGameServerItem::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FGameServerItem, BotPlayers) == 0x000084, "Member 'FGameServerItem::BotPlayers' has a wrong offset!");
static_assert(offsetof(FGameServerItem, ServerVersion) == 0x000088, "Member 'FGameServerItem::ServerVersion' has a wrong offset!");
static_assert(offsetof(FGameServerItem, bPassword) == 0x00008C, "Member 'FGameServerItem::bPassword' has a wrong offset!");
static_assert(offsetof(FGameServerItem, BSecure) == 0x00008D, "Member 'FGameServerItem::BSecure' has a wrong offset!");

// ScriptStruct SteamCore.PlaybackStatusHasChanged
// 0x0001 (0x0001 - 0x0000)
struct FPlaybackStatusHasChanged final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaybackStatusHasChanged) == 0x000001, "Wrong alignment on FPlaybackStatusHasChanged");
static_assert(sizeof(FPlaybackStatusHasChanged) == 0x000001, "Wrong size on FPlaybackStatusHasChanged");

// ScriptStruct SteamCore.P2PSessionConnectFail
// 0x0010 (0x0010 - 0x0000)
struct FP2PSessionConnectFail final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamP2PSessionError                         P2PSessionError;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FP2PSessionConnectFail) == 0x000008, "Wrong alignment on FP2PSessionConnectFail");
static_assert(sizeof(FP2PSessionConnectFail) == 0x000010, "Wrong size on FP2PSessionConnectFail");
static_assert(offsetof(FP2PSessionConnectFail, SteamIDRemote) == 0x000000, "Member 'FP2PSessionConnectFail::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(FP2PSessionConnectFail, P2PSessionError) == 0x000008, "Member 'FP2PSessionConnectFail::P2PSessionError' has a wrong offset!");

// ScriptStruct SteamCore.PartyBeaconID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPartyBeaconID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyBeaconID) == 0x000008, "Wrong alignment on FPartyBeaconID");
static_assert(sizeof(FPartyBeaconID) == 0x000008, "Wrong size on FPartyBeaconID");

// ScriptStruct SteamCore.JoinPartyData
// 0x0028 (0x0028 - 0x0000)
struct FJoinPartyData final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyBeaconID                         BeaconID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDBeaconOwner;                                // 0x0010(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJoinPartyData) == 0x000008, "Wrong alignment on FJoinPartyData");
static_assert(sizeof(FJoinPartyData) == 0x000028, "Wrong size on FJoinPartyData");
static_assert(offsetof(FJoinPartyData, Result) == 0x000000, "Member 'FJoinPartyData::Result' has a wrong offset!");
static_assert(offsetof(FJoinPartyData, BeaconID) == 0x000008, "Member 'FJoinPartyData::BeaconID' has a wrong offset!");
static_assert(offsetof(FJoinPartyData, SteamIDBeaconOwner) == 0x000010, "Member 'FJoinPartyData::SteamIDBeaconOwner' has a wrong offset!");
static_assert(offsetof(FJoinPartyData, ConnectString) == 0x000018, "Member 'FJoinPartyData::ConnectString' has a wrong offset!");

// ScriptStruct SteamCore.CreateBeaconData
// 0x0010 (0x0010 - 0x0000)
struct FCreateBeaconData final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyBeaconID                         BeaconID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateBeaconData) == 0x000008, "Wrong alignment on FCreateBeaconData");
static_assert(sizeof(FCreateBeaconData) == 0x000010, "Wrong size on FCreateBeaconData");
static_assert(offsetof(FCreateBeaconData, Result) == 0x000000, "Member 'FCreateBeaconData::Result' has a wrong offset!");
static_assert(offsetof(FCreateBeaconData, BeaconID) == 0x000008, "Member 'FCreateBeaconData::BeaconID' has a wrong offset!");

// ScriptStruct SteamCore.ReservationNotificationData
// 0x0010 (0x0010 - 0x0000)
struct FReservationNotificationData final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDJoiner;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReservationNotificationData) == 0x000008, "Wrong alignment on FReservationNotificationData");
static_assert(sizeof(FReservationNotificationData) == 0x000010, "Wrong size on FReservationNotificationData");
static_assert(offsetof(FReservationNotificationData, BeaconID) == 0x000000, "Member 'FReservationNotificationData::BeaconID' has a wrong offset!");
static_assert(offsetof(FReservationNotificationData, SteamIDJoiner) == 0x000008, "Member 'FReservationNotificationData::SteamIDJoiner' has a wrong offset!");

// ScriptStruct SteamCore.ChangeNumOpenSlotsData
// 0x0001 (0x0001 - 0x0000)
struct FChangeNumOpenSlotsData final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChangeNumOpenSlotsData) == 0x000001, "Wrong alignment on FChangeNumOpenSlotsData");
static_assert(sizeof(FChangeNumOpenSlotsData) == 0x000001, "Wrong size on FChangeNumOpenSlotsData");
static_assert(offsetof(FChangeNumOpenSlotsData, Result) == 0x000000, "Member 'FChangeNumOpenSlotsData::Result' has a wrong offset!");

// ScriptStruct SteamCore.SteamRemotePlaySessionConnected
// 0x0004 (0x0004 - 0x0000)
struct FSteamRemotePlaySessionConnected final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamRemotePlaySessionConnected) == 0x000004, "Wrong alignment on FSteamRemotePlaySessionConnected");
static_assert(sizeof(FSteamRemotePlaySessionConnected) == 0x000004, "Wrong size on FSteamRemotePlaySessionConnected");
static_assert(offsetof(FSteamRemotePlaySessionConnected, SessionID) == 0x000000, "Member 'FSteamRemotePlaySessionConnected::SessionID' has a wrong offset!");

// ScriptStruct SteamCore.SteamRemotePlaySessionDisconnected
// 0x0004 (0x0004 - 0x0000)
struct FSteamRemotePlaySessionDisconnected final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamRemotePlaySessionDisconnected) == 0x000004, "Wrong alignment on FSteamRemotePlaySessionDisconnected");
static_assert(sizeof(FSteamRemotePlaySessionDisconnected) == 0x000004, "Wrong size on FSteamRemotePlaySessionDisconnected");
static_assert(offsetof(FSteamRemotePlaySessionDisconnected, SessionID) == 0x000000, "Member 'FSteamRemotePlaySessionDisconnected::SessionID' has a wrong offset!");

// ScriptStruct SteamCore.RemoteStorageUnsubscribePublishedFileResult
// 0x0010 (0x0010 - 0x0000)
struct FRemoteStorageUnsubscribePublishedFileResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteStorageUnsubscribePublishedFileResult) == 0x000008, "Wrong alignment on FRemoteStorageUnsubscribePublishedFileResult");
static_assert(sizeof(FRemoteStorageUnsubscribePublishedFileResult) == 0x000010, "Wrong size on FRemoteStorageUnsubscribePublishedFileResult");
static_assert(offsetof(FRemoteStorageUnsubscribePublishedFileResult, Result) == 0x000000, "Member 'FRemoteStorageUnsubscribePublishedFileResult::Result' has a wrong offset!");
static_assert(offsetof(FRemoteStorageUnsubscribePublishedFileResult, PublishedFileID) == 0x000008, "Member 'FRemoteStorageUnsubscribePublishedFileResult::PublishedFileID' has a wrong offset!");

// ScriptStruct SteamCore.RemoteStorageSubscribePublishedFileResult
// 0x0010 (0x0010 - 0x0000)
struct FRemoteStorageSubscribePublishedFileResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteStorageSubscribePublishedFileResult) == 0x000008, "Wrong alignment on FRemoteStorageSubscribePublishedFileResult");
static_assert(sizeof(FRemoteStorageSubscribePublishedFileResult) == 0x000010, "Wrong size on FRemoteStorageSubscribePublishedFileResult");
static_assert(offsetof(FRemoteStorageSubscribePublishedFileResult, Result) == 0x000000, "Member 'FRemoteStorageSubscribePublishedFileResult::Result' has a wrong offset!");
static_assert(offsetof(FRemoteStorageSubscribePublishedFileResult, PublishedFileID) == 0x000008, "Member 'FRemoteStorageSubscribePublishedFileResult::PublishedFileID' has a wrong offset!");

// ScriptStruct SteamCore.RemoteStoragePublishedFileUnsubscribed
// 0x0010 (0x0010 - 0x0000)
struct FRemoteStoragePublishedFileUnsubscribed final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoteStoragePublishedFileUnsubscribed) == 0x000008, "Wrong alignment on FRemoteStoragePublishedFileUnsubscribed");
static_assert(sizeof(FRemoteStoragePublishedFileUnsubscribed) == 0x000010, "Wrong size on FRemoteStoragePublishedFileUnsubscribed");
static_assert(offsetof(FRemoteStoragePublishedFileUnsubscribed, PublishedFileID) == 0x000000, "Member 'FRemoteStoragePublishedFileUnsubscribed::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FRemoteStoragePublishedFileUnsubscribed, AppID) == 0x000008, "Member 'FRemoteStoragePublishedFileUnsubscribed::AppID' has a wrong offset!");

// ScriptStruct SteamCore.InputHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FInputHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputHandle) == 0x000008, "Wrong alignment on FInputHandle");
static_assert(sizeof(FInputHandle) == 0x000008, "Wrong size on FInputHandle");

// ScriptStruct SteamCore.RemoteStoragePublishedFileSubscribed
// 0x0010 (0x0010 - 0x0000)
struct FRemoteStoragePublishedFileSubscribed final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoteStoragePublishedFileSubscribed) == 0x000008, "Wrong alignment on FRemoteStoragePublishedFileSubscribed");
static_assert(sizeof(FRemoteStoragePublishedFileSubscribed) == 0x000010, "Wrong size on FRemoteStoragePublishedFileSubscribed");
static_assert(offsetof(FRemoteStoragePublishedFileSubscribed, PublishedFileID) == 0x000000, "Member 'FRemoteStoragePublishedFileSubscribed::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FRemoteStoragePublishedFileSubscribed, AppID) == 0x000008, "Member 'FRemoteStoragePublishedFileSubscribed::AppID' has a wrong offset!");

// ScriptStruct SteamCore.RemoteStorageFileWriteAsyncComplete
// 0x0001 (0x0001 - 0x0000)
struct FRemoteStorageFileWriteAsyncComplete final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteStorageFileWriteAsyncComplete) == 0x000001, "Wrong alignment on FRemoteStorageFileWriteAsyncComplete");
static_assert(sizeof(FRemoteStorageFileWriteAsyncComplete) == 0x000001, "Wrong size on FRemoteStorageFileWriteAsyncComplete");
static_assert(offsetof(FRemoteStorageFileWriteAsyncComplete, Result) == 0x000000, "Member 'FRemoteStorageFileWriteAsyncComplete::Result' has a wrong offset!");

// ScriptStruct SteamCore.SteamUGCHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSteamUGCHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamUGCHandle) == 0x000008, "Wrong alignment on FSteamUGCHandle");
static_assert(sizeof(FSteamUGCHandle) == 0x000008, "Wrong size on FSteamUGCHandle");

// ScriptStruct SteamCore.RemoteStorageDownloadUGCResult
// 0x0030 (0x0030 - 0x0000)
struct FRemoteStorageDownloadUGCResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamUGCHandle                        FileHandle;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeInBytes;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDOwner;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteStorageDownloadUGCResult) == 0x000008, "Wrong alignment on FRemoteStorageDownloadUGCResult");
static_assert(sizeof(FRemoteStorageDownloadUGCResult) == 0x000030, "Wrong size on FRemoteStorageDownloadUGCResult");
static_assert(offsetof(FRemoteStorageDownloadUGCResult, Result) == 0x000000, "Member 'FRemoteStorageDownloadUGCResult::Result' has a wrong offset!");
static_assert(offsetof(FRemoteStorageDownloadUGCResult, FileHandle) == 0x000008, "Member 'FRemoteStorageDownloadUGCResult::FileHandle' has a wrong offset!");
static_assert(offsetof(FRemoteStorageDownloadUGCResult, AppID) == 0x000010, "Member 'FRemoteStorageDownloadUGCResult::AppID' has a wrong offset!");
static_assert(offsetof(FRemoteStorageDownloadUGCResult, SizeInBytes) == 0x000014, "Member 'FRemoteStorageDownloadUGCResult::SizeInBytes' has a wrong offset!");
static_assert(offsetof(FRemoteStorageDownloadUGCResult, Filename) == 0x000018, "Member 'FRemoteStorageDownloadUGCResult::Filename' has a wrong offset!");
static_assert(offsetof(FRemoteStorageDownloadUGCResult, SteamIDOwner) == 0x000028, "Member 'FRemoteStorageDownloadUGCResult::SteamIDOwner' has a wrong offset!");

// ScriptStruct SteamCore.RemoteStorageFileShareResult
// 0x0020 (0x0020 - 0x0000)
struct FRemoteStorageFileShareResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamUGCHandle                        File;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteStorageFileShareResult) == 0x000008, "Wrong alignment on FRemoteStorageFileShareResult");
static_assert(sizeof(FRemoteStorageFileShareResult) == 0x000020, "Wrong size on FRemoteStorageFileShareResult");
static_assert(offsetof(FRemoteStorageFileShareResult, Result) == 0x000000, "Member 'FRemoteStorageFileShareResult::Result' has a wrong offset!");
static_assert(offsetof(FRemoteStorageFileShareResult, File) == 0x000008, "Member 'FRemoteStorageFileShareResult::File' has a wrong offset!");
static_assert(offsetof(FRemoteStorageFileShareResult, Filename) == 0x000010, "Member 'FRemoteStorageFileShareResult::Filename' has a wrong offset!");

// ScriptStruct SteamCore.ScreenshotHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FScreenshotHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScreenshotHandle) == 0x000004, "Wrong alignment on FScreenshotHandle");
static_assert(sizeof(FScreenshotHandle) == 0x000004, "Wrong size on FScreenshotHandle");

// ScriptStruct SteamCore.ScreenshotReady
// 0x0008 (0x0008 - 0x0000)
struct FScreenshotReady final
{
public:
	struct FScreenshotHandle                      Handle;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScreenshotReady) == 0x000004, "Wrong alignment on FScreenshotReady");
static_assert(sizeof(FScreenshotReady) == 0x000008, "Wrong size on FScreenshotReady");
static_assert(offsetof(FScreenshotReady, Handle) == 0x000000, "Member 'FScreenshotReady::Handle' has a wrong offset!");
static_assert(offsetof(FScreenshotReady, Result) == 0x000004, "Member 'FScreenshotReady::Result' has a wrong offset!");

// ScriptStruct SteamCore.ScreenshotRequested
// 0x0001 (0x0001 - 0x0000)
struct FScreenshotRequested final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScreenshotRequested) == 0x000001, "Wrong alignment on FScreenshotRequested");
static_assert(sizeof(FScreenshotRequested) == 0x000001, "Wrong size on FScreenshotRequested");

// ScriptStruct SteamCore.UserFavoriteItemsListChanged
// 0x0010 (0x0010 - 0x0000)
struct FUserFavoriteItemsListChanged final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasAddRequest;                                    // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserFavoriteItemsListChanged) == 0x000008, "Wrong alignment on FUserFavoriteItemsListChanged");
static_assert(sizeof(FUserFavoriteItemsListChanged) == 0x000010, "Wrong size on FUserFavoriteItemsListChanged");
static_assert(offsetof(FUserFavoriteItemsListChanged, PublishedFileID) == 0x000000, "Member 'FUserFavoriteItemsListChanged::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FUserFavoriteItemsListChanged, Result) == 0x000008, "Member 'FUserFavoriteItemsListChanged::Result' has a wrong offset!");
static_assert(offsetof(FUserFavoriteItemsListChanged, bWasAddRequest) == 0x000009, "Member 'FUserFavoriteItemsListChanged::bWasAddRequest' has a wrong offset!");

// ScriptStruct SteamCore.CreateItemResult
// 0x0018 (0x0018 - 0x0000)
struct FCreateItemResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserNeedsToAcceptWorkshopLegalAgreement;          // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreateItemResult) == 0x000008, "Wrong alignment on FCreateItemResult");
static_assert(sizeof(FCreateItemResult) == 0x000018, "Wrong size on FCreateItemResult");
static_assert(offsetof(FCreateItemResult, Result) == 0x000000, "Member 'FCreateItemResult::Result' has a wrong offset!");
static_assert(offsetof(FCreateItemResult, PublishedFileID) == 0x000008, "Member 'FCreateItemResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FCreateItemResult, bUserNeedsToAcceptWorkshopLegalAgreement) == 0x000010, "Member 'FCreateItemResult::bUserNeedsToAcceptWorkshopLegalAgreement' has a wrong offset!");

// ScriptStruct SteamCore.SetUserItemVoteResult
// 0x0010 (0x0010 - 0x0000)
struct FSetUserItemVoteResult final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoteUp;                                           // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSetUserItemVoteResult) == 0x000008, "Wrong alignment on FSetUserItemVoteResult");
static_assert(sizeof(FSetUserItemVoteResult) == 0x000010, "Wrong size on FSetUserItemVoteResult");
static_assert(offsetof(FSetUserItemVoteResult, PublishedFileID) == 0x000000, "Member 'FSetUserItemVoteResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FSetUserItemVoteResult, Result) == 0x000008, "Member 'FSetUserItemVoteResult::Result' has a wrong offset!");
static_assert(offsetof(FSetUserItemVoteResult, bVoteUp) == 0x000009, "Member 'FSetUserItemVoteResult::bVoteUp' has a wrong offset!");

// ScriptStruct SteamCore.UGCQueryHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FUGCQueryHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCQueryHandle) == 0x000008, "Wrong alignment on FUGCQueryHandle");
static_assert(sizeof(FUGCQueryHandle) == 0x000008, "Wrong size on FUGCQueryHandle");

// ScriptStruct SteamCore.SteamUGCQueryCompleted
// 0x0018 (0x0018 - 0x0000)
struct FSteamUGCQueryCompleted final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumResultsReturned;                                // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalMatchingResults;                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedData;                                       // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamUGCQueryCompleted) == 0x000008, "Wrong alignment on FSteamUGCQueryCompleted");
static_assert(sizeof(FSteamUGCQueryCompleted) == 0x000018, "Wrong size on FSteamUGCQueryCompleted");
static_assert(offsetof(FSteamUGCQueryCompleted, Handle) == 0x000000, "Member 'FSteamUGCQueryCompleted::Handle' has a wrong offset!");
static_assert(offsetof(FSteamUGCQueryCompleted, Result) == 0x000008, "Member 'FSteamUGCQueryCompleted::Result' has a wrong offset!");
static_assert(offsetof(FSteamUGCQueryCompleted, NumResultsReturned) == 0x00000C, "Member 'FSteamUGCQueryCompleted::NumResultsReturned' has a wrong offset!");
static_assert(offsetof(FSteamUGCQueryCompleted, TotalMatchingResults) == 0x000010, "Member 'FSteamUGCQueryCompleted::TotalMatchingResults' has a wrong offset!");
static_assert(offsetof(FSteamUGCQueryCompleted, bCachedData) == 0x000014, "Member 'FSteamUGCQueryCompleted::bCachedData' has a wrong offset!");

// ScriptStruct SteamCore.SteamFriendsGroupID
// 0x0002 (0x0002 - 0x0000)
struct alignas(0x02) FSteamFriendsGroupID final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamFriendsGroupID) == 0x000002, "Wrong alignment on FSteamFriendsGroupID");
static_assert(sizeof(FSteamFriendsGroupID) == 0x000002, "Wrong size on FSteamFriendsGroupID");

// ScriptStruct SteamCore.AddAppDependencyResult
// 0x0018 (0x0018 - 0x0000)
struct FAddAppDependencyResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAddAppDependencyResult) == 0x000008, "Wrong alignment on FAddAppDependencyResult");
static_assert(sizeof(FAddAppDependencyResult) == 0x000018, "Wrong size on FAddAppDependencyResult");
static_assert(offsetof(FAddAppDependencyResult, Result) == 0x000000, "Member 'FAddAppDependencyResult::Result' has a wrong offset!");
static_assert(offsetof(FAddAppDependencyResult, PublishedFileID) == 0x000008, "Member 'FAddAppDependencyResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FAddAppDependencyResult, AppID) == 0x000010, "Member 'FAddAppDependencyResult::AppID' has a wrong offset!");

// ScriptStruct SteamCore.RemoveAppDependencyResult
// 0x0018 (0x0018 - 0x0000)
struct FRemoveAppDependencyResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoveAppDependencyResult) == 0x000008, "Wrong alignment on FRemoveAppDependencyResult");
static_assert(sizeof(FRemoveAppDependencyResult) == 0x000018, "Wrong size on FRemoveAppDependencyResult");
static_assert(offsetof(FRemoveAppDependencyResult, Result) == 0x000000, "Member 'FRemoveAppDependencyResult::Result' has a wrong offset!");
static_assert(offsetof(FRemoveAppDependencyResult, PublishedFileID) == 0x000008, "Member 'FRemoveAppDependencyResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FRemoveAppDependencyResult, AppID) == 0x000010, "Member 'FRemoveAppDependencyResult::AppID' has a wrong offset!");

// ScriptStruct SteamCore.AddUGCDependencyResult
// 0x0018 (0x0018 - 0x0000)
struct FAddUGCDependencyResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddUGCDependencyResult) == 0x000008, "Wrong alignment on FAddUGCDependencyResult");
static_assert(sizeof(FAddUGCDependencyResult) == 0x000018, "Wrong size on FAddUGCDependencyResult");
static_assert(offsetof(FAddUGCDependencyResult, Result) == 0x000000, "Member 'FAddUGCDependencyResult::Result' has a wrong offset!");
static_assert(offsetof(FAddUGCDependencyResult, PublishedFileID) == 0x000008, "Member 'FAddUGCDependencyResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FAddUGCDependencyResult, ChildPublishedFileId) == 0x000010, "Member 'FAddUGCDependencyResult::ChildPublishedFileId' has a wrong offset!");

// ScriptStruct SteamCore.RemoveUGCDependencyResult
// 0x0018 (0x0018 - 0x0000)
struct FRemoveUGCDependencyResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoveUGCDependencyResult) == 0x000008, "Wrong alignment on FRemoveUGCDependencyResult");
static_assert(sizeof(FRemoveUGCDependencyResult) == 0x000018, "Wrong size on FRemoveUGCDependencyResult");
static_assert(offsetof(FRemoveUGCDependencyResult, Result) == 0x000000, "Member 'FRemoveUGCDependencyResult::Result' has a wrong offset!");
static_assert(offsetof(FRemoveUGCDependencyResult, PublishedFileID) == 0x000008, "Member 'FRemoveUGCDependencyResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FRemoveUGCDependencyResult, ChildPublishedFileId) == 0x000010, "Member 'FRemoveUGCDependencyResult::ChildPublishedFileId' has a wrong offset!");

// ScriptStruct SteamCore.UGCDeleteItemResult
// 0x0010 (0x0010 - 0x0000)
struct FUGCDeleteItemResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUGCDeleteItemResult) == 0x000008, "Wrong alignment on FUGCDeleteItemResult");
static_assert(sizeof(FUGCDeleteItemResult) == 0x000010, "Wrong size on FUGCDeleteItemResult");
static_assert(offsetof(FUGCDeleteItemResult, Result) == 0x000000, "Member 'FUGCDeleteItemResult::Result' has a wrong offset!");
static_assert(offsetof(FUGCDeleteItemResult, PublishedFileID) == 0x000008, "Member 'FUGCDeleteItemResult::PublishedFileID' has a wrong offset!");

// ScriptStruct SteamCore.GetAppDependenciesResult
// 0x0028 (0x0028 - 0x0000)
struct FGetAppDependenciesResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AppIDs;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumAppDependencies;                                // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumAppDependencies;                           // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetAppDependenciesResult) == 0x000008, "Wrong alignment on FGetAppDependenciesResult");
static_assert(sizeof(FGetAppDependenciesResult) == 0x000028, "Wrong size on FGetAppDependenciesResult");
static_assert(offsetof(FGetAppDependenciesResult, Result) == 0x000000, "Member 'FGetAppDependenciesResult::Result' has a wrong offset!");
static_assert(offsetof(FGetAppDependenciesResult, PublishedFileID) == 0x000008, "Member 'FGetAppDependenciesResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FGetAppDependenciesResult, AppIDs) == 0x000010, "Member 'FGetAppDependenciesResult::AppIDs' has a wrong offset!");
static_assert(offsetof(FGetAppDependenciesResult, NumAppDependencies) == 0x000020, "Member 'FGetAppDependenciesResult::NumAppDependencies' has a wrong offset!");
static_assert(offsetof(FGetAppDependenciesResult, TotalNumAppDependencies) == 0x000024, "Member 'FGetAppDependenciesResult::TotalNumAppDependencies' has a wrong offset!");

// ScriptStruct SteamCore.SubmitItemUpdateResult
// 0x0010 (0x0010 - 0x0000)
struct FSubmitItemUpdateResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserNeedsToAcceptWorkshopLegalAgreement;          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmitItemUpdateResult) == 0x000008, "Wrong alignment on FSubmitItemUpdateResult");
static_assert(sizeof(FSubmitItemUpdateResult) == 0x000010, "Wrong size on FSubmitItemUpdateResult");
static_assert(offsetof(FSubmitItemUpdateResult, Result) == 0x000000, "Member 'FSubmitItemUpdateResult::Result' has a wrong offset!");
static_assert(offsetof(FSubmitItemUpdateResult, bUserNeedsToAcceptWorkshopLegalAgreement) == 0x000001, "Member 'FSubmitItemUpdateResult::bUserNeedsToAcceptWorkshopLegalAgreement' has a wrong offset!");
static_assert(offsetof(FSubmitItemUpdateResult, PublishedFileID) == 0x000008, "Member 'FSubmitItemUpdateResult::PublishedFileID' has a wrong offset!");

// ScriptStruct SteamCore.StartPlaytimeTrackingResult
// 0x0001 (0x0001 - 0x0000)
struct FStartPlaytimeTrackingResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartPlaytimeTrackingResult) == 0x000001, "Wrong alignment on FStartPlaytimeTrackingResult");
static_assert(sizeof(FStartPlaytimeTrackingResult) == 0x000001, "Wrong size on FStartPlaytimeTrackingResult");
static_assert(offsetof(FStartPlaytimeTrackingResult, Result) == 0x000000, "Member 'FStartPlaytimeTrackingResult::Result' has a wrong offset!");

// ScriptStruct SteamCore.StopPlaytimeTrackingResult
// 0x0001 (0x0001 - 0x0000)
struct FStopPlaytimeTrackingResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStopPlaytimeTrackingResult) == 0x000001, "Wrong alignment on FStopPlaytimeTrackingResult");
static_assert(sizeof(FStopPlaytimeTrackingResult) == 0x000001, "Wrong size on FStopPlaytimeTrackingResult");
static_assert(offsetof(FStopPlaytimeTrackingResult, Result) == 0x000000, "Member 'FStopPlaytimeTrackingResult::Result' has a wrong offset!");

// ScriptStruct SteamCore.DownloadItemResult
// 0x0018 (0x0018 - 0x0000)
struct FDownloadItemResult final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDownloadItemResult) == 0x000008, "Wrong alignment on FDownloadItemResult");
static_assert(sizeof(FDownloadItemResult) == 0x000018, "Wrong size on FDownloadItemResult");
static_assert(offsetof(FDownloadItemResult, AppID) == 0x000000, "Member 'FDownloadItemResult::AppID' has a wrong offset!");
static_assert(offsetof(FDownloadItemResult, PublishedFileID) == 0x000008, "Member 'FDownloadItemResult::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FDownloadItemResult, Result) == 0x000010, "Member 'FDownloadItemResult::Result' has a wrong offset!");

// ScriptStruct SteamCore.ItemInstalled
// 0x0010 (0x0010 - 0x0000)
struct FItemInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemInstalled) == 0x000008, "Wrong alignment on FItemInstalled");
static_assert(sizeof(FItemInstalled) == 0x000010, "Wrong size on FItemInstalled");
static_assert(offsetof(FItemInstalled, AppID) == 0x000000, "Member 'FItemInstalled::AppID' has a wrong offset!");
static_assert(offsetof(FItemInstalled, PublishedFileID) == 0x000008, "Member 'FItemInstalled::PublishedFileID' has a wrong offset!");

// ScriptStruct SteamCore.IPCFailure
// 0x0001 (0x0001 - 0x0000)
struct FIPCFailure final
{
public:
	ESteamFailureType                             FailureType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIPCFailure) == 0x000001, "Wrong alignment on FIPCFailure");
static_assert(sizeof(FIPCFailure) == 0x000001, "Wrong size on FIPCFailure");
static_assert(offsetof(FIPCFailure, FailureType) == 0x000000, "Member 'FIPCFailure::FailureType' has a wrong offset!");

// ScriptStruct SteamCore.LicensesUpdated
// 0x0001 (0x0001 - 0x0000)
struct FLicensesUpdated final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLicensesUpdated) == 0x000001, "Wrong alignment on FLicensesUpdated");
static_assert(sizeof(FLicensesUpdated) == 0x000001, "Wrong size on FLicensesUpdated");

// ScriptStruct SteamCore.MicroTxnAuthorizationResponse
// 0x0020 (0x0020 - 0x0000)
struct FMicroTxnAuthorizationResponse final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAuthorized;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMicroTxnAuthorizationResponse) == 0x000008, "Wrong alignment on FMicroTxnAuthorizationResponse");
static_assert(sizeof(FMicroTxnAuthorizationResponse) == 0x000020, "Wrong size on FMicroTxnAuthorizationResponse");
static_assert(offsetof(FMicroTxnAuthorizationResponse, AppID) == 0x000000, "Member 'FMicroTxnAuthorizationResponse::AppID' has a wrong offset!");
static_assert(offsetof(FMicroTxnAuthorizationResponse, OrderId) == 0x000008, "Member 'FMicroTxnAuthorizationResponse::OrderId' has a wrong offset!");
static_assert(offsetof(FMicroTxnAuthorizationResponse, bAuthorized) == 0x000018, "Member 'FMicroTxnAuthorizationResponse::bAuthorized' has a wrong offset!");

// ScriptStruct SteamCore.SteamServersConnected
// 0x0001 (0x0001 - 0x0000)
struct FSteamServersConnected final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamServersConnected) == 0x000001, "Wrong alignment on FSteamServersConnected");
static_assert(sizeof(FSteamServersConnected) == 0x000001, "Wrong size on FSteamServersConnected");

// ScriptStruct SteamCore.SteamServerConnectFailure
// 0x0002 (0x0002 - 0x0000)
struct FSteamServerConnectFailure final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStillRetrying;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamServerConnectFailure) == 0x000001, "Wrong alignment on FSteamServerConnectFailure");
static_assert(sizeof(FSteamServerConnectFailure) == 0x000002, "Wrong size on FSteamServerConnectFailure");
static_assert(offsetof(FSteamServerConnectFailure, Result) == 0x000000, "Member 'FSteamServerConnectFailure::Result' has a wrong offset!");
static_assert(offsetof(FSteamServerConnectFailure, bStillRetrying) == 0x000001, "Member 'FSteamServerConnectFailure::bStillRetrying' has a wrong offset!");

// ScriptStruct SteamCore.SteamServersDisconnected
// 0x0001 (0x0001 - 0x0000)
struct FSteamServersDisconnected final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamServersDisconnected) == 0x000001, "Wrong alignment on FSteamServersDisconnected");
static_assert(sizeof(FSteamServersDisconnected) == 0x000001, "Wrong size on FSteamServersDisconnected");
static_assert(offsetof(FSteamServersDisconnected, Result) == 0x000000, "Member 'FSteamServersDisconnected::Result' has a wrong offset!");

// ScriptStruct SteamCore.EncryptedAppTicketResponse
// 0x0001 (0x0001 - 0x0000)
struct FEncryptedAppTicketResponse final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncryptedAppTicketResponse) == 0x000001, "Wrong alignment on FEncryptedAppTicketResponse");
static_assert(sizeof(FEncryptedAppTicketResponse) == 0x000001, "Wrong size on FEncryptedAppTicketResponse");
static_assert(offsetof(FEncryptedAppTicketResponse, Result) == 0x000000, "Member 'FEncryptedAppTicketResponse::Result' has a wrong offset!");

// ScriptStruct SteamCore.StoreAuthURLResponse
// 0x0010 (0x0010 - 0x0000)
struct FStoreAuthURLResponse final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreAuthURLResponse) == 0x000008, "Wrong alignment on FStoreAuthURLResponse");
static_assert(sizeof(FStoreAuthURLResponse) == 0x000010, "Wrong size on FStoreAuthURLResponse");
static_assert(offsetof(FStoreAuthURLResponse, URL) == 0x000000, "Member 'FStoreAuthURLResponse::URL' has a wrong offset!");

// ScriptStruct SteamCore.UserAchievementIconFetched
// 0x0030 (0x0030 - 0x0000)
struct FUserAchievementIconFetched final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievementName;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserAchievementIconFetched) == 0x000008, "Wrong alignment on FUserAchievementIconFetched");
static_assert(sizeof(FUserAchievementIconFetched) == 0x000030, "Wrong size on FUserAchievementIconFetched");
static_assert(offsetof(FUserAchievementIconFetched, GameID) == 0x000000, "Member 'FUserAchievementIconFetched::GameID' has a wrong offset!");
static_assert(offsetof(FUserAchievementIconFetched, AchievementName) == 0x000008, "Member 'FUserAchievementIconFetched::AchievementName' has a wrong offset!");
static_assert(offsetof(FUserAchievementIconFetched, bAchieved) == 0x000018, "Member 'FUserAchievementIconFetched::bAchieved' has a wrong offset!");
static_assert(offsetof(FUserAchievementIconFetched, Icon) == 0x000020, "Member 'FUserAchievementIconFetched::Icon' has a wrong offset!");

// ScriptStruct SteamCore.UserAchievementStored
// 0x0028 (0x0028 - 0x0000)
struct FUserAchievementStored final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGroupAchievement;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AchievementName;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserAchievementStored) == 0x000008, "Wrong alignment on FUserAchievementStored");
static_assert(sizeof(FUserAchievementStored) == 0x000028, "Wrong size on FUserAchievementStored");
static_assert(offsetof(FUserAchievementStored, GameID) == 0x000000, "Member 'FUserAchievementStored::GameID' has a wrong offset!");
static_assert(offsetof(FUserAchievementStored, bGroupAchievement) == 0x000008, "Member 'FUserAchievementStored::bGroupAchievement' has a wrong offset!");
static_assert(offsetof(FUserAchievementStored, AchievementName) == 0x000010, "Member 'FUserAchievementStored::AchievementName' has a wrong offset!");
static_assert(offsetof(FUserAchievementStored, CurrentProgress) == 0x000020, "Member 'FUserAchievementStored::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FUserAchievementStored, MaxProgress) == 0x000024, "Member 'FUserAchievementStored::MaxProgress' has a wrong offset!");

// ScriptStruct SteamCore.UserStatsReceived
// 0x0018 (0x0018 - 0x0000)
struct FUserStatsReceived final
{
public:
	struct FSteamID                               GameID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserStatsReceived) == 0x000008, "Wrong alignment on FUserStatsReceived");
static_assert(sizeof(FUserStatsReceived) == 0x000018, "Wrong size on FUserStatsReceived");
static_assert(offsetof(FUserStatsReceived, GameID) == 0x000000, "Member 'FUserStatsReceived::GameID' has a wrong offset!");
static_assert(offsetof(FUserStatsReceived, Result) == 0x000008, "Member 'FUserStatsReceived::Result' has a wrong offset!");
static_assert(offsetof(FUserStatsReceived, SteamID) == 0x000010, "Member 'FUserStatsReceived::SteamID' has a wrong offset!");

// ScriptStruct SteamCore.UserStatsStored
// 0x0010 (0x0010 - 0x0000)
struct FUserStatsStored final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserStatsStored) == 0x000008, "Wrong alignment on FUserStatsStored");
static_assert(sizeof(FUserStatsStored) == 0x000010, "Wrong size on FUserStatsStored");
static_assert(offsetof(FUserStatsStored, GameID) == 0x000000, "Member 'FUserStatsStored::GameID' has a wrong offset!");
static_assert(offsetof(FUserStatsStored, Result) == 0x000008, "Member 'FUserStatsStored::Result' has a wrong offset!");

// ScriptStruct SteamCore.UserStatsUnloaded
// 0x0008 (0x0008 - 0x0000)
struct FUserStatsUnloaded final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserStatsUnloaded) == 0x000008, "Wrong alignment on FUserStatsUnloaded");
static_assert(sizeof(FUserStatsUnloaded) == 0x000008, "Wrong size on FUserStatsUnloaded");
static_assert(offsetof(FUserStatsUnloaded, SteamIDUser) == 0x000000, "Member 'FUserStatsUnloaded::SteamIDUser' has a wrong offset!");

// ScriptStruct SteamCore.LeaderboardScoresDownloaded
// 0x0018 (0x0018 - 0x0000)
struct FLeaderboardScoresDownloaded final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboardEntries               SteamLeaderboardEntries;                           // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryCount;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardScoresDownloaded) == 0x000008, "Wrong alignment on FLeaderboardScoresDownloaded");
static_assert(sizeof(FLeaderboardScoresDownloaded) == 0x000018, "Wrong size on FLeaderboardScoresDownloaded");
static_assert(offsetof(FLeaderboardScoresDownloaded, SteamLeaderboard) == 0x000000, "Member 'FLeaderboardScoresDownloaded::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoresDownloaded, SteamLeaderboardEntries) == 0x000008, "Member 'FLeaderboardScoresDownloaded::SteamLeaderboardEntries' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoresDownloaded, EntryCount) == 0x000010, "Member 'FLeaderboardScoresDownloaded::EntryCount' has a wrong offset!");

// ScriptStruct SteamCore.RequestUserStatsData
// 0x0018 (0x0018 - 0x0000)
struct FRequestUserStatsData final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDUser;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUserStatsData) == 0x000008, "Wrong alignment on FRequestUserStatsData");
static_assert(sizeof(FRequestUserStatsData) == 0x000018, "Wrong size on FRequestUserStatsData");
static_assert(offsetof(FRequestUserStatsData, GameID) == 0x000000, "Member 'FRequestUserStatsData::GameID' has a wrong offset!");
static_assert(offsetof(FRequestUserStatsData, Result) == 0x000008, "Member 'FRequestUserStatsData::Result' has a wrong offset!");
static_assert(offsetof(FRequestUserStatsData, SteamIDUser) == 0x000010, "Member 'FRequestUserStatsData::SteamIDUser' has a wrong offset!");

// ScriptStruct SteamCore.LeaderboardScoreUploaded
// 0x0020 (0x0020 - 0x0000)
struct FLeaderboardScoreUploaded final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScoreChanged;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GlobalRankNew;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalRankPrevious;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardScoreUploaded) == 0x000008, "Wrong alignment on FLeaderboardScoreUploaded");
static_assert(sizeof(FLeaderboardScoreUploaded) == 0x000020, "Wrong size on FLeaderboardScoreUploaded");
static_assert(offsetof(FLeaderboardScoreUploaded, bSuccess) == 0x000000, "Member 'FLeaderboardScoreUploaded::bSuccess' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoreUploaded, SteamLeaderboard) == 0x000008, "Member 'FLeaderboardScoreUploaded::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoreUploaded, Score) == 0x000010, "Member 'FLeaderboardScoreUploaded::Score' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoreUploaded, bScoreChanged) == 0x000014, "Member 'FLeaderboardScoreUploaded::bScoreChanged' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoreUploaded, GlobalRankNew) == 0x000018, "Member 'FLeaderboardScoreUploaded::GlobalRankNew' has a wrong offset!");
static_assert(offsetof(FLeaderboardScoreUploaded, GlobalRankPrevious) == 0x00001C, "Member 'FLeaderboardScoreUploaded::GlobalRankPrevious' has a wrong offset!");

// ScriptStruct SteamCore.AttachLeaderboardUGCData
// 0x0010 (0x0010 - 0x0000)
struct FAttachLeaderboardUGCData final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachLeaderboardUGCData) == 0x000008, "Wrong alignment on FAttachLeaderboardUGCData");
static_assert(sizeof(FAttachLeaderboardUGCData) == 0x000010, "Wrong size on FAttachLeaderboardUGCData");
static_assert(offsetof(FAttachLeaderboardUGCData, SteamLeaderboard) == 0x000000, "Member 'FAttachLeaderboardUGCData::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(FAttachLeaderboardUGCData, Result) == 0x000008, "Member 'FAttachLeaderboardUGCData::Result' has a wrong offset!");

// ScriptStruct SteamCore.LeaderboardFindResult
// 0x0010 (0x0010 - 0x0000)
struct FLeaderboardFindResult final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderboardFound;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardFindResult) == 0x000008, "Wrong alignment on FLeaderboardFindResult");
static_assert(sizeof(FLeaderboardFindResult) == 0x000010, "Wrong size on FLeaderboardFindResult");
static_assert(offsetof(FLeaderboardFindResult, SteamLeaderboard) == 0x000000, "Member 'FLeaderboardFindResult::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(FLeaderboardFindResult, bLeaderboardFound) == 0x000008, "Member 'FLeaderboardFindResult::bLeaderboardFound' has a wrong offset!");

// ScriptStruct SteamCore.FindOrCreateLeaderboardData
// 0x0010 (0x0010 - 0x0000)
struct FFindOrCreateLeaderboardData final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderboardFound;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFindOrCreateLeaderboardData) == 0x000008, "Wrong alignment on FFindOrCreateLeaderboardData");
static_assert(sizeof(FFindOrCreateLeaderboardData) == 0x000010, "Wrong size on FFindOrCreateLeaderboardData");
static_assert(offsetof(FFindOrCreateLeaderboardData, SteamLeaderboard) == 0x000000, "Member 'FFindOrCreateLeaderboardData::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(FFindOrCreateLeaderboardData, bLeaderboardFound) == 0x000008, "Member 'FFindOrCreateLeaderboardData::bLeaderboardFound' has a wrong offset!");

// ScriptStruct SteamCore.NumberOfCurrentPlayers
// 0x0008 (0x0008 - 0x0000)
struct FNumberOfCurrentPlayers final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Players;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNumberOfCurrentPlayers) == 0x000004, "Wrong alignment on FNumberOfCurrentPlayers");
static_assert(sizeof(FNumberOfCurrentPlayers) == 0x000008, "Wrong size on FNumberOfCurrentPlayers");
static_assert(offsetof(FNumberOfCurrentPlayers, bSuccess) == 0x000000, "Member 'FNumberOfCurrentPlayers::bSuccess' has a wrong offset!");
static_assert(offsetof(FNumberOfCurrentPlayers, Players) == 0x000004, "Member 'FNumberOfCurrentPlayers::Players' has a wrong offset!");

// ScriptStruct SteamCore.GlobalAchievementPercentagesReady
// 0x0010 (0x0010 - 0x0000)
struct FGlobalAchievementPercentagesReady final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalAchievementPercentagesReady) == 0x000008, "Wrong alignment on FGlobalAchievementPercentagesReady");
static_assert(sizeof(FGlobalAchievementPercentagesReady) == 0x000010, "Wrong size on FGlobalAchievementPercentagesReady");
static_assert(offsetof(FGlobalAchievementPercentagesReady, GameID) == 0x000000, "Member 'FGlobalAchievementPercentagesReady::GameID' has a wrong offset!");
static_assert(offsetof(FGlobalAchievementPercentagesReady, Result) == 0x000008, "Member 'FGlobalAchievementPercentagesReady::Result' has a wrong offset!");

// ScriptStruct SteamCore.GlobalStatsReceived
// 0x0010 (0x0010 - 0x0000)
struct FGlobalStatsReceived final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalStatsReceived) == 0x000008, "Wrong alignment on FGlobalStatsReceived");
static_assert(sizeof(FGlobalStatsReceived) == 0x000010, "Wrong size on FGlobalStatsReceived");
static_assert(offsetof(FGlobalStatsReceived, GameID) == 0x000000, "Member 'FGlobalStatsReceived::GameID' has a wrong offset!");
static_assert(offsetof(FGlobalStatsReceived, Result) == 0x000008, "Member 'FGlobalStatsReceived::Result' has a wrong offset!");

// ScriptStruct SteamCore.CheckFileSignature
// 0x0001 (0x0001 - 0x0000)
struct FCheckFileSignature final
{
public:
	ESteamCheckFileSignature                      CheckFileSignature;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckFileSignature) == 0x000001, "Wrong alignment on FCheckFileSignature");
static_assert(sizeof(FCheckFileSignature) == 0x000001, "Wrong size on FCheckFileSignature");
static_assert(offsetof(FCheckFileSignature, CheckFileSignature) == 0x000000, "Member 'FCheckFileSignature::CheckFileSignature' has a wrong offset!");

// ScriptStruct SteamCore.GamepadTextInputDismissed
// 0x0008 (0x0008 - 0x0000)
struct FGamepadTextInputDismissed final
{
public:
	bool                                          bSubmitted;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubmittedText;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamepadTextInputDismissed) == 0x000004, "Wrong alignment on FGamepadTextInputDismissed");
static_assert(sizeof(FGamepadTextInputDismissed) == 0x000008, "Wrong size on FGamepadTextInputDismissed");
static_assert(offsetof(FGamepadTextInputDismissed, bSubmitted) == 0x000000, "Member 'FGamepadTextInputDismissed::bSubmitted' has a wrong offset!");
static_assert(offsetof(FGamepadTextInputDismissed, SubmittedText) == 0x000004, "Member 'FGamepadTextInputDismissed::SubmittedText' has a wrong offset!");

// ScriptStruct SteamCore.IPCountry
// 0x0001 (0x0001 - 0x0000)
struct FIPCountry final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIPCountry) == 0x000001, "Wrong alignment on FIPCountry");
static_assert(sizeof(FIPCountry) == 0x000001, "Wrong size on FIPCountry");

// ScriptStruct SteamCore.LowBatteryPower
// 0x0004 (0x0004 - 0x0000)
struct FLowBatteryPower final
{
public:
	int32                                         MinutesBatteryLeft;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLowBatteryPower) == 0x000004, "Wrong alignment on FLowBatteryPower");
static_assert(sizeof(FLowBatteryPower) == 0x000004, "Wrong size on FLowBatteryPower");
static_assert(offsetof(FLowBatteryPower, MinutesBatteryLeft) == 0x000000, "Member 'FLowBatteryPower::MinutesBatteryLeft' has a wrong offset!");

// ScriptStruct SteamCore.SteamShutdown
// 0x0001 (0x0001 - 0x0000)
struct FSteamShutdown final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamShutdown) == 0x000001, "Wrong alignment on FSteamShutdown");
static_assert(sizeof(FSteamShutdown) == 0x000001, "Wrong size on FSteamShutdown");

// ScriptStruct SteamCore.GetOPFSettingsResult
// 0x0008 (0x0008 - 0x0000)
struct FGetOPFSettingsResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AppID;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetOPFSettingsResult) == 0x000004, "Wrong alignment on FGetOPFSettingsResult");
static_assert(sizeof(FGetOPFSettingsResult) == 0x000008, "Wrong size on FGetOPFSettingsResult");
static_assert(offsetof(FGetOPFSettingsResult, Result) == 0x000000, "Member 'FGetOPFSettingsResult::Result' has a wrong offset!");
static_assert(offsetof(FGetOPFSettingsResult, AppID) == 0x000004, "Member 'FGetOPFSettingsResult::AppID' has a wrong offset!");

// ScriptStruct SteamCore.GetVideoURLResult
// 0x0018 (0x0018 - 0x0000)
struct FGetVideoURLResult final
{
public:
	ESteamResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AppID;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetVideoURLResult) == 0x000008, "Wrong alignment on FGetVideoURLResult");
static_assert(sizeof(FGetVideoURLResult) == 0x000018, "Wrong size on FGetVideoURLResult");
static_assert(offsetof(FGetVideoURLResult, Result) == 0x000000, "Member 'FGetVideoURLResult::Result' has a wrong offset!");
static_assert(offsetof(FGetVideoURLResult, AppID) == 0x000004, "Member 'FGetVideoURLResult::AppID' has a wrong offset!");
static_assert(offsetof(FGetVideoURLResult, URL) == 0x000008, "Member 'FGetVideoURLResult::URL' has a wrong offset!");

// ScriptStruct SteamCore.InputAnalogActionHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FInputAnalogActionHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputAnalogActionHandle) == 0x000008, "Wrong alignment on FInputAnalogActionHandle");
static_assert(sizeof(FInputAnalogActionHandle) == 0x000008, "Wrong size on FInputAnalogActionHandle");

// ScriptStruct SteamCore.InputDigitalActionHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FInputDigitalActionHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputDigitalActionHandle) == 0x000008, "Wrong alignment on FInputDigitalActionHandle");
static_assert(sizeof(FInputDigitalActionHandle) == 0x000008, "Wrong size on FInputDigitalActionHandle");

// ScriptStruct SteamCore.InputActionSetHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FInputActionSetHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputActionSetHandle) == 0x000008, "Wrong alignment on FInputActionSetHandle");
static_assert(sizeof(FInputActionSetHandle) == 0x000008, "Wrong size on FInputActionSetHandle");

// ScriptStruct SteamCore.InputMotionData
// 0x0028 (0x0028 - 0x0000)
struct FInputMotionData final
{
public:
	float                                         RotQuatX;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotQuatY;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotQuatZ;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotQuatW;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosAccelX;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosAccelY;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosAccelZ;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotVelX;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotVelY;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotVelZ;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputMotionData) == 0x000004, "Wrong alignment on FInputMotionData");
static_assert(sizeof(FInputMotionData) == 0x000028, "Wrong size on FInputMotionData");
static_assert(offsetof(FInputMotionData, RotQuatX) == 0x000000, "Member 'FInputMotionData::RotQuatX' has a wrong offset!");
static_assert(offsetof(FInputMotionData, RotQuatY) == 0x000004, "Member 'FInputMotionData::RotQuatY' has a wrong offset!");
static_assert(offsetof(FInputMotionData, RotQuatZ) == 0x000008, "Member 'FInputMotionData::RotQuatZ' has a wrong offset!");
static_assert(offsetof(FInputMotionData, RotQuatW) == 0x00000C, "Member 'FInputMotionData::RotQuatW' has a wrong offset!");
static_assert(offsetof(FInputMotionData, PosAccelX) == 0x000010, "Member 'FInputMotionData::PosAccelX' has a wrong offset!");
static_assert(offsetof(FInputMotionData, PosAccelY) == 0x000014, "Member 'FInputMotionData::PosAccelY' has a wrong offset!");
static_assert(offsetof(FInputMotionData, PosAccelZ) == 0x000018, "Member 'FInputMotionData::PosAccelZ' has a wrong offset!");
static_assert(offsetof(FInputMotionData, RotVelX) == 0x00001C, "Member 'FInputMotionData::RotVelX' has a wrong offset!");
static_assert(offsetof(FInputMotionData, RotVelY) == 0x000020, "Member 'FInputMotionData::RotVelY' has a wrong offset!");
static_assert(offsetof(FInputMotionData, RotVelZ) == 0x000024, "Member 'FInputMotionData::RotVelZ' has a wrong offset!");

// ScriptStruct SteamCore.InputDigitalActionData
// 0x0002 (0x0002 - 0x0000)
struct FInputDigitalActionData final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputDigitalActionData) == 0x000001, "Wrong alignment on FInputDigitalActionData");
static_assert(sizeof(FInputDigitalActionData) == 0x000002, "Wrong size on FInputDigitalActionData");
static_assert(offsetof(FInputDigitalActionData, bState) == 0x000000, "Member 'FInputDigitalActionData::bState' has a wrong offset!");
static_assert(offsetof(FInputDigitalActionData, bActive) == 0x000001, "Member 'FInputDigitalActionData::bActive' has a wrong offset!");

// ScriptStruct SteamCore.InputAnalogActionData
// 0x0010 (0x0010 - 0x0000)
struct FInputAnalogActionData final
{
public:
	ESteamCoreInputSourceMode                     Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         X;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputAnalogActionData) == 0x000004, "Wrong alignment on FInputAnalogActionData");
static_assert(sizeof(FInputAnalogActionData) == 0x000010, "Wrong size on FInputAnalogActionData");
static_assert(offsetof(FInputAnalogActionData, Mode) == 0x000000, "Member 'FInputAnalogActionData::Mode' has a wrong offset!");
static_assert(offsetof(FInputAnalogActionData, X) == 0x000004, "Member 'FInputAnalogActionData::X' has a wrong offset!");
static_assert(offsetof(FInputAnalogActionData, Y) == 0x000008, "Member 'FInputAnalogActionData::Y' has a wrong offset!");
static_assert(offsetof(FInputAnalogActionData, bActive) == 0x00000C, "Member 'FInputAnalogActionData::bActive' has a wrong offset!");

// ScriptStruct SteamCore.SteamItemInstanceID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSteamItemInstanceID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamItemInstanceID) == 0x000008, "Wrong alignment on FSteamItemInstanceID");
static_assert(sizeof(FSteamItemInstanceID) == 0x000008, "Wrong size on FSteamItemInstanceID");

// ScriptStruct SteamCore.SteamItemDef
// 0x0004 (0x0004 - 0x0000)
struct FSteamItemDef final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSteamItemDef) == 0x000004, "Wrong alignment on FSteamItemDef");
static_assert(sizeof(FSteamItemDef) == 0x000004, "Wrong size on FSteamItemDef");
static_assert(offsetof(FSteamItemDef, Value) == 0x000000, "Member 'FSteamItemDef::Value' has a wrong offset!");

// ScriptStruct SteamCore.SteamItemDetails
// 0x0020 (0x0020 - 0x0000)
struct FSteamItemDetails final
{
public:
	struct FSteamItemInstanceID                   InstanceID;                                        // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemDef                          Definition;                                        // 0x0008(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamCoreItemFlags>                   Flags;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamItemDetails) == 0x000008, "Wrong alignment on FSteamItemDetails");
static_assert(sizeof(FSteamItemDetails) == 0x000020, "Wrong size on FSteamItemDetails");
static_assert(offsetof(FSteamItemDetails, InstanceID) == 0x000000, "Member 'FSteamItemDetails::InstanceID' has a wrong offset!");
static_assert(offsetof(FSteamItemDetails, Definition) == 0x000008, "Member 'FSteamItemDetails::Definition' has a wrong offset!");
static_assert(offsetof(FSteamItemDetails, Quantity) == 0x00000C, "Member 'FSteamItemDetails::Quantity' has a wrong offset!");
static_assert(offsetof(FSteamItemDetails, Flags) == 0x000010, "Member 'FSteamItemDetails::Flags' has a wrong offset!");

// ScriptStruct SteamCore.SteamP2PSessionState
// 0x0028 (0x0028 - 0x0000)
struct FSteamP2PSessionState final
{
public:
	bool                                          bConnectionActive;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConnecting;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESteamP2PSessionError                         P2PSessionError;                                   // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingRelay;                                       // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BytesQueuedForSend;                                // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PacketsQueuedForSend;                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RemoteIP;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RemotePort;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamP2PSessionState) == 0x000008, "Wrong alignment on FSteamP2PSessionState");
static_assert(sizeof(FSteamP2PSessionState) == 0x000028, "Wrong size on FSteamP2PSessionState");
static_assert(offsetof(FSteamP2PSessionState, bConnectionActive) == 0x000000, "Member 'FSteamP2PSessionState::bConnectionActive' has a wrong offset!");
static_assert(offsetof(FSteamP2PSessionState, bConnecting) == 0x000001, "Member 'FSteamP2PSessionState::bConnecting' has a wrong offset!");
static_assert(offsetof(FSteamP2PSessionState, P2PSessionError) == 0x000002, "Member 'FSteamP2PSessionState::P2PSessionError' has a wrong offset!");
static_assert(offsetof(FSteamP2PSessionState, bUsingRelay) == 0x000003, "Member 'FSteamP2PSessionState::bUsingRelay' has a wrong offset!");
static_assert(offsetof(FSteamP2PSessionState, BytesQueuedForSend) == 0x000004, "Member 'FSteamP2PSessionState::BytesQueuedForSend' has a wrong offset!");
static_assert(offsetof(FSteamP2PSessionState, PacketsQueuedForSend) == 0x000008, "Member 'FSteamP2PSessionState::PacketsQueuedForSend' has a wrong offset!");
static_assert(offsetof(FSteamP2PSessionState, RemoteIP) == 0x000010, "Member 'FSteamP2PSessionState::RemoteIP' has a wrong offset!");
static_assert(offsetof(FSteamP2PSessionState, RemotePort) == 0x000020, "Member 'FSteamP2PSessionState::RemotePort' has a wrong offset!");

// ScriptStruct SteamCore.SteamNetworkPingLocation
// 0x0010 (0x0010 - 0x0000)
struct FSteamNetworkPingLocation final
{
public:
	class FString                                 Location;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSteamNetworkPingLocation) == 0x000008, "Wrong alignment on FSteamNetworkPingLocation");
static_assert(sizeof(FSteamNetworkPingLocation) == 0x000010, "Wrong size on FSteamNetworkPingLocation");
static_assert(offsetof(FSteamNetworkPingLocation, Location) == 0x000000, "Member 'FSteamNetworkPingLocation::Location' has a wrong offset!");

// ScriptStruct SteamCore.SteamParentalSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct FSteamParentalSettingsChanged final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamParentalSettingsChanged) == 0x000001, "Wrong alignment on FSteamParentalSettingsChanged");
static_assert(sizeof(FSteamParentalSettingsChanged) == 0x000001, "Wrong size on FSteamParentalSettingsChanged");

// ScriptStruct SteamCore.SteamPartyBeaconLocation
// 0x0018 (0x0018 - 0x0000)
struct FSteamPartyBeaconLocation final
{
public:
	ESteamPartiesBeaconLocationType               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocationId;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamPartyBeaconLocation) == 0x000008, "Wrong alignment on FSteamPartyBeaconLocation");
static_assert(sizeof(FSteamPartyBeaconLocation) == 0x000018, "Wrong size on FSteamPartyBeaconLocation");
static_assert(offsetof(FSteamPartyBeaconLocation, Type) == 0x000000, "Member 'FSteamPartyBeaconLocation::Type' has a wrong offset!");
static_assert(offsetof(FSteamPartyBeaconLocation, LocationId) == 0x000008, "Member 'FSteamPartyBeaconLocation::LocationId' has a wrong offset!");

// ScriptStruct SteamCore.UGCFileWriteStreamHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FUGCFileWriteStreamHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCFileWriteStreamHandle) == 0x000008, "Wrong alignment on FUGCFileWriteStreamHandle");
static_assert(sizeof(FUGCFileWriteStreamHandle) == 0x000008, "Wrong size on FUGCFileWriteStreamHandle");

// ScriptStruct SteamCore.HostPingData
// 0x0010 (0x0010 - 0x0000)
struct FHostPingData final
{
public:
	class FString                                 HostString;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHostPingData) == 0x000008, "Wrong alignment on FHostPingData");
static_assert(sizeof(FHostPingData) == 0x000010, "Wrong size on FHostPingData");
static_assert(offsetof(FHostPingData, HostString) == 0x000000, "Member 'FHostPingData::HostString' has a wrong offset!");

// ScriptStruct SteamCore.SteamInventoryUpdateHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSteamInventoryUpdateHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamInventoryUpdateHandle) == 0x000008, "Wrong alignment on FSteamInventoryUpdateHandle");
static_assert(sizeof(FSteamInventoryUpdateHandle) == 0x000008, "Wrong size on FSteamInventoryUpdateHandle");

// ScriptStruct SteamCore.SteamUGCDetails
// 0x00A8 (0x00A8 - 0x0000)
struct FSteamUGCDetails final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  Result;                                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamWorkshopFileType                        FileType;                                          // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CreatorAppID;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDOwner;                                      // 0x0038(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeCreated;                                       // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeUpdated;                                       // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeAddedToUserList;                               // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamRemoteStoragePublishedFileVisibility    Visibility;                                        // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBanned;                                           // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptedForUse;                                   // 0x004E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagsTruncated;                                    // 0x004F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        File;                                              // 0x0060(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        PreviewFile;                                       // 0x0068(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewFileSize;                                   // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotesUp;                                           // 0x0098(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotesDown;                                         // 0x009C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumChildren;                                       // 0x00A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamUGCDetails) == 0x000008, "Wrong alignment on FSteamUGCDetails");
static_assert(sizeof(FSteamUGCDetails) == 0x0000A8, "Wrong size on FSteamUGCDetails");
static_assert(offsetof(FSteamUGCDetails, PublishedFileID) == 0x000000, "Member 'FSteamUGCDetails::PublishedFileID' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, Result) == 0x000008, "Member 'FSteamUGCDetails::Result' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, FileType) == 0x000009, "Member 'FSteamUGCDetails::FileType' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, CreatorAppID) == 0x00000C, "Member 'FSteamUGCDetails::CreatorAppID' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, ConsumerAppID) == 0x000010, "Member 'FSteamUGCDetails::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, Title) == 0x000018, "Member 'FSteamUGCDetails::Title' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, Description) == 0x000028, "Member 'FSteamUGCDetails::Description' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, SteamIDOwner) == 0x000038, "Member 'FSteamUGCDetails::SteamIDOwner' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, TimeCreated) == 0x000040, "Member 'FSteamUGCDetails::TimeCreated' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, TimeUpdated) == 0x000044, "Member 'FSteamUGCDetails::TimeUpdated' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, TimeAddedToUserList) == 0x000048, "Member 'FSteamUGCDetails::TimeAddedToUserList' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, Visibility) == 0x00004C, "Member 'FSteamUGCDetails::Visibility' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, bBanned) == 0x00004D, "Member 'FSteamUGCDetails::bBanned' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, bAcceptedForUse) == 0x00004E, "Member 'FSteamUGCDetails::bAcceptedForUse' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, bTagsTruncated) == 0x00004F, "Member 'FSteamUGCDetails::bTagsTruncated' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, Tags) == 0x000050, "Member 'FSteamUGCDetails::Tags' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, File) == 0x000060, "Member 'FSteamUGCDetails::File' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, PreviewFile) == 0x000068, "Member 'FSteamUGCDetails::PreviewFile' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, Filename) == 0x000070, "Member 'FSteamUGCDetails::Filename' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, FileSize) == 0x000080, "Member 'FSteamUGCDetails::FileSize' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, PreviewFileSize) == 0x000084, "Member 'FSteamUGCDetails::PreviewFileSize' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, URL) == 0x000088, "Member 'FSteamUGCDetails::URL' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, VotesUp) == 0x000098, "Member 'FSteamUGCDetails::VotesUp' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, VotesDown) == 0x00009C, "Member 'FSteamUGCDetails::VotesDown' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, Score) == 0x0000A0, "Member 'FSteamUGCDetails::Score' has a wrong offset!");
static_assert(offsetof(FSteamUGCDetails, NumChildren) == 0x0000A4, "Member 'FSteamUGCDetails::NumChildren' has a wrong offset!");

// ScriptStruct SteamCore.SteamLeaderboardEntry
// 0x0020 (0x0020 - 0x0000)
struct FSteamLeaderboardEntry final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalRank;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Details;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamUGCHandle                        UGCHandle;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamLeaderboardEntry) == 0x000008, "Wrong alignment on FSteamLeaderboardEntry");
static_assert(sizeof(FSteamLeaderboardEntry) == 0x000020, "Wrong size on FSteamLeaderboardEntry");
static_assert(offsetof(FSteamLeaderboardEntry, SteamID) == 0x000000, "Member 'FSteamLeaderboardEntry::SteamID' has a wrong offset!");
static_assert(offsetof(FSteamLeaderboardEntry, GlobalRank) == 0x000008, "Member 'FSteamLeaderboardEntry::GlobalRank' has a wrong offset!");
static_assert(offsetof(FSteamLeaderboardEntry, Score) == 0x00000C, "Member 'FSteamLeaderboardEntry::Score' has a wrong offset!");
static_assert(offsetof(FSteamLeaderboardEntry, Details) == 0x000010, "Member 'FSteamLeaderboardEntry::Details' has a wrong offset!");
static_assert(offsetof(FSteamLeaderboardEntry, UGCHandle) == 0x000018, "Member 'FSteamLeaderboardEntry::UGCHandle' has a wrong offset!");

}

