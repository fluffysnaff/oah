#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GunInfoChild

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass GunInfoChild.GunInfoChild_C
// 0x0058 (0x02B8 - 0x0260)
class UGunInfoChild_C final : public UUserWidget
{
public:
	class UTextBlock*                             TextBlock_0;                                       // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_87;                                      // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_166;                                     // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_234;                                     // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Unit;                                              // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ValueMultiplier;                                   // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         CompareValue;                                      // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LessIsBetter_;                                     // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Float_value_;                                      // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	class FText GetText_0();
	class FText GetText_1();
	ESlateVisibility GetVisibility_0();
	struct FSlateColor GetColorAndOpacity_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GunInfoChild_C">();
	}
	static class UGunInfoChild_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGunInfoChild_C>();
	}
};
static_assert(alignof(UGunInfoChild_C) == 0x000008, "Wrong alignment on UGunInfoChild_C");
static_assert(sizeof(UGunInfoChild_C) == 0x0002B8, "Wrong size on UGunInfoChild_C");
static_assert(offsetof(UGunInfoChild_C, TextBlock_0) == 0x000260, "Member 'UGunInfoChild_C::TextBlock_0' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, TextBlock_87) == 0x000268, "Member 'UGunInfoChild_C::TextBlock_87' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, TextBlock_166) == 0x000270, "Member 'UGunInfoChild_C::TextBlock_166' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, TextBlock_234) == 0x000278, "Member 'UGunInfoChild_C::TextBlock_234' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, Name_0) == 0x000280, "Member 'UGunInfoChild_C::Name_0' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, Value) == 0x000290, "Member 'UGunInfoChild_C::Value' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, Unit) == 0x000298, "Member 'UGunInfoChild_C::Unit' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, ValueMultiplier) == 0x0002A8, "Member 'UGunInfoChild_C::ValueMultiplier' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, CompareValue) == 0x0002AC, "Member 'UGunInfoChild_C::CompareValue' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, LessIsBetter_) == 0x0002B0, "Member 'UGunInfoChild_C::LessIsBetter_' has a wrong offset!");
static_assert(offsetof(UGunInfoChild_C, Float_value_) == 0x0002B1, "Member 'UGunInfoChild_C::Float_value_' has a wrong offset!");

}

