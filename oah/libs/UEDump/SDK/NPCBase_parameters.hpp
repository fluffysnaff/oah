#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPCBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function NPCBase.NPCBase_C.Death__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_C_Death__DelegateSignature final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCBase_C_Death__DelegateSignature) == 0x000008, "Wrong alignment on NPCBase_C_Death__DelegateSignature");
static_assert(sizeof(NPCBase_C_Death__DelegateSignature) == 0x000008, "Wrong size on NPCBase_C_Death__DelegateSignature");
static_assert(offsetof(NPCBase_C_Death__DelegateSignature, Player) == 0x000000, "Member 'NPCBase_C_Death__DelegateSignature::Player' has a wrong offset!");

// Function NPCBase.NPCBase_C.CallGesture__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_C_CallGesture__DelegateSignature final
{
public:
	class UAnimSequenceBase*                      Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loops_;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPCBase_C_CallGesture__DelegateSignature) == 0x000008, "Wrong alignment on NPCBase_C_CallGesture__DelegateSignature");
static_assert(sizeof(NPCBase_C_CallGesture__DelegateSignature) == 0x000010, "Wrong size on NPCBase_C_CallGesture__DelegateSignature");
static_assert(offsetof(NPCBase_C_CallGesture__DelegateSignature, Anim) == 0x000000, "Member 'NPCBase_C_CallGesture__DelegateSignature::Anim' has a wrong offset!");
static_assert(offsetof(NPCBase_C_CallGesture__DelegateSignature, Loops_) == 0x000008, "Member 'NPCBase_C_CallGesture__DelegateSignature::Loops_' has a wrong offset!");

// Function NPCBase.NPCBase_C.ExecuteUbergraph_NPCBase
// 0x01A8 (0x01A8 - 0x0000)
struct NPCBase_C_ExecuteUbergraph_NPCBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Amount;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Damage;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Player_1;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPoliceTargetInterface_C> K2Node_DynamicCast_AsPolice_Target_Interface;      // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Player;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_Amount;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_Bone;                   // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_HitLocation;            // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_StartLocation;          // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Instigator;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DamageMultiplier_Multiplier;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitLocation;                    // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_StartLocation;                  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Downsplat_;                     // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetAllSocketNames_ReturnValue;            // 0x00E0(0x0010)(ReferenceParm)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0100(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCBase_C*                             K2Node_DynamicCast_AsNPCBase;                      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_CustomEvent_Anim;                           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Loops_;                         // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x019C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Picked_up_;                           // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPCBase_C_ExecuteUbergraph_NPCBase) == 0x000008, "Wrong alignment on NPCBase_C_ExecuteUbergraph_NPCBase");
static_assert(sizeof(NPCBase_C_ExecuteUbergraph_NPCBase) == 0x0001A8, "Wrong size on NPCBase_C_ExecuteUbergraph_NPCBase");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, EntryPoint) == 0x000000, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_Event_location) == 0x000004, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_Event_Amount) == 0x000010, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_Event_Amount' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_Damage) == 0x000018, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_Player_1) == 0x000020, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_Player_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_DynamicCast_AsPolice_Target_Interface) == 0x000030, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_DynamicCast_AsPolice_Target_Interface' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_DoesImplementInterface_ReturnValue) == 0x000041, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_Player) == 0x000048, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000054, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_ComponentBoundEvent_Amount) == 0x000058, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_ComponentBoundEvent_Amount' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_ComponentBoundEvent_Bone) == 0x00005C, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_ComponentBoundEvent_Bone' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_ComponentBoundEvent_HitLocation) == 0x000064, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_ComponentBoundEvent_HitLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_ComponentBoundEvent_StartLocation) == 0x000070, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_ComponentBoundEvent_StartLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_ComponentBoundEvent_Instigator) == 0x000080, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_ComponentBoundEvent_Instigator' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_DamageMultiplier_Multiplier) == 0x000088, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_DamageMultiplier_Multiplier' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_HasAuthority_ReturnValue) == 0x00008C, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000090, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_FTrunc_ReturnValue) == 0x000094, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, Temp_int_Array_Index_Variable) == 0x000098, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_HitLocation) == 0x00009C, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_HitLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_StartLocation) == 0x0000A8, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_StartLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_Downsplat_) == 0x0000B4, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_Downsplat_' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Greater_IntInt_ReturnValue) == 0x0000B5, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000B8, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, Temp_int_Variable) == 0x0000BC, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C0, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_Event_DeltaSeconds) == 0x0000CC, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_GetComponentVelocity_ReturnValue) == 0x0000D0, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_GetAllSocketNames_ReturnValue) == 0x0000E0, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_GetAllSocketNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_VSize_ReturnValue) == 0x0000F0, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Array_Length_ReturnValue) == 0x0000F4, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000F8, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Less_IntInt_ReturnValue) == 0x0000F9, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000100, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Array_Get_Item) == 0x000110, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Array_Length_ReturnValue_1) == 0x000118, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_DynamicCast_AsCharacter) == 0x000120, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_DynamicCast_bSuccess_1) == 0x000128, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00012C, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_FindLookAtRotation_ReturnValue) == 0x000138, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_GetDistanceTo_ReturnValue) == 0x000144, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_GetForwardVector_ReturnValue) == 0x000148, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000154, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000158, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000164, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_DynamicCast_AsNPCBase) == 0x000168, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_DynamicCast_AsNPCBase' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_DynamicCast_bSuccess_2) == 0x000170, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000174, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_Anim) == 0x000180, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_Anim' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_CustomEvent_Loops_) == 0x000188, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_CustomEvent_Loops_' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, Temp_int_Loop_Counter_Variable_1) == 0x00018C, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Less_IntInt_ReturnValue_1) == 0x000190, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Add_IntInt_ReturnValue_1) == 0x000194, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, Temp_int_Array_Index_Variable_1) == 0x000198, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, CallFunc_Array_Get_Item_1) == 0x00019C, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_ExecuteUbergraph_NPCBase, K2Node_Event_Picked_up_) == 0x0001A4, "Member 'NPCBase_C_ExecuteUbergraph_NPCBase::K2Node_Event_Picked_up_' has a wrong offset!");

// Function NPCBase.NPCBase_C.RagdollPickedUp
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_C_RagdollPickedUp final
{
public:
	bool                                          Picked_up_;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPCBase_C_RagdollPickedUp) == 0x000001, "Wrong alignment on NPCBase_C_RagdollPickedUp");
static_assert(sizeof(NPCBase_C_RagdollPickedUp) == 0x000001, "Wrong size on NPCBase_C_RagdollPickedUp");
static_assert(offsetof(NPCBase_C_RagdollPickedUp, Picked_up_) == 0x000000, "Member 'NPCBase_C_RagdollPickedUp::Picked_up_' has a wrong offset!");

// Function NPCBase.NPCBase_C.PlayAnimGesture
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_C_PlayAnimGesture final
{
public:
	class UAnimSequenceBase*                      Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loops_;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPCBase_C_PlayAnimGesture) == 0x000008, "Wrong alignment on NPCBase_C_PlayAnimGesture");
static_assert(sizeof(NPCBase_C_PlayAnimGesture) == 0x000010, "Wrong size on NPCBase_C_PlayAnimGesture");
static_assert(offsetof(NPCBase_C_PlayAnimGesture, Anim) == 0x000000, "Member 'NPCBase_C_PlayAnimGesture::Anim' has a wrong offset!");
static_assert(offsetof(NPCBase_C_PlayAnimGesture, Loops_) == 0x000008, "Member 'NPCBase_C_PlayAnimGesture::Loops_' has a wrong offset!");

// Function NPCBase.NPCBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCBase_C_ReceiveTick) == 0x000004, "Wrong alignment on NPCBase_C_ReceiveTick");
static_assert(sizeof(NPCBase_C_ReceiveTick) == 0x000004, "Wrong size on NPCBase_C_ReceiveTick");
static_assert(offsetof(NPCBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'NPCBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function NPCBase.NPCBase_C.BloodSplatMulti
// 0x001C (0x001C - 0x0000)
struct NPCBase_C_BloodSplatMulti final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Downsplat_;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPCBase_C_BloodSplatMulti) == 0x000004, "Wrong alignment on NPCBase_C_BloodSplatMulti");
static_assert(sizeof(NPCBase_C_BloodSplatMulti) == 0x00001C, "Wrong size on NPCBase_C_BloodSplatMulti");
static_assert(offsetof(NPCBase_C_BloodSplatMulti, HitLocation) == 0x000000, "Member 'NPCBase_C_BloodSplatMulti::HitLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplatMulti, StartLocation) == 0x00000C, "Member 'NPCBase_C_BloodSplatMulti::StartLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplatMulti, Downsplat_) == 0x000018, "Member 'NPCBase_C_BloodSplatMulti::Downsplat_' has a wrong offset!");

// Function NPCBase.NPCBase_C.BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Bone;                                              // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator_0;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature) == 0x000008, "Wrong alignment on NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature");
static_assert(sizeof(NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature) == 0x000030, "Wrong size on NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature");
static_assert(offsetof(NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature, Amount) == 0x000000, "Member 'NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature::Amount' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature, Bone) == 0x000004, "Member 'NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature::Bone' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature, HitLocation) == 0x00000C, "Member 'NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature::HitLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature, StartLocation) == 0x000018, "Member 'NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature::StartLocation' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature, Instigator_0) == 0x000028, "Member 'NPCBase_C_BndEvt__NPCBase_DamageComponent_K2Node_ComponentBoundEvent_0_Damage__DelegateSignature::Instigator_0' has a wrong offset!");

// Function NPCBase.NPCBase_C.Die
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_C_Die final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCBase_C_Die) == 0x000008, "Wrong alignment on NPCBase_C_Die");
static_assert(sizeof(NPCBase_C_Die) == 0x000008, "Wrong size on NPCBase_C_Die");
static_assert(offsetof(NPCBase_C_Die, Player) == 0x000000, "Member 'NPCBase_C_Die::Player' has a wrong offset!");

// Function NPCBase.NPCBase_C.TakeDamage
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_C_TakeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCBase_C_TakeDamage) == 0x000008, "Wrong alignment on NPCBase_C_TakeDamage");
static_assert(sizeof(NPCBase_C_TakeDamage) == 0x000010, "Wrong size on NPCBase_C_TakeDamage");
static_assert(offsetof(NPCBase_C_TakeDamage, Damage) == 0x000000, "Member 'NPCBase_C_TakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(NPCBase_C_TakeDamage, Player) == 0x000008, "Member 'NPCBase_C_TakeDamage::Player' has a wrong offset!");

// Function NPCBase.NPCBase_C.SpawnAmmo
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_C_SpawnAmmo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCBase_C_SpawnAmmo) == 0x000004, "Wrong alignment on NPCBase_C_SpawnAmmo");
static_assert(sizeof(NPCBase_C_SpawnAmmo) == 0x000010, "Wrong size on NPCBase_C_SpawnAmmo");
static_assert(offsetof(NPCBase_C_SpawnAmmo, Location) == 0x000000, "Member 'NPCBase_C_SpawnAmmo::Location' has a wrong offset!");
static_assert(offsetof(NPCBase_C_SpawnAmmo, Amount) == 0x00000C, "Member 'NPCBase_C_SpawnAmmo::Amount' has a wrong offset!");

// Function NPCBase.NPCBase_C.DamageMultiplier
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_C_DamageMultiplier final
{
public:
	class FName                                   Bone_name;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Multiplier;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPCBase_C_DamageMultiplier) == 0x000004, "Wrong alignment on NPCBase_C_DamageMultiplier");
static_assert(sizeof(NPCBase_C_DamageMultiplier) == 0x000010, "Wrong size on NPCBase_C_DamageMultiplier");
static_assert(offsetof(NPCBase_C_DamageMultiplier, Bone_name) == 0x000000, "Member 'NPCBase_C_DamageMultiplier::Bone_name' has a wrong offset!");
static_assert(offsetof(NPCBase_C_DamageMultiplier, Multiplier) == 0x000008, "Member 'NPCBase_C_DamageMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(NPCBase_C_DamageMultiplier, K2Node_SwitchName_CmpSuccess) == 0x00000C, "Member 'NPCBase_C_DamageMultiplier::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function NPCBase.NPCBase_C.BloodSplat
// 0x0248 (0x0248 - 0x0000)
struct NPCBase_C_BloodSplat final
{
public:
	struct FVector                                HitLoc;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLoc;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Downsplat_;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_3;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default_1;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0108(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_193[0x1];                                      // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        CallFunc_SpawnDecalAtLocation_ReturnValue;         // 0x0240(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCBase_C_BloodSplat) == 0x000008, "Wrong alignment on NPCBase_C_BloodSplat");
static_assert(sizeof(NPCBase_C_BloodSplat) == 0x000248, "Wrong size on NPCBase_C_BloodSplat");
static_assert(offsetof(NPCBase_C_BloodSplat, HitLoc) == 0x000000, "Member 'NPCBase_C_BloodSplat::HitLoc' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, StartLoc) == 0x00000C, "Member 'NPCBase_C_BloodSplat::StartLoc' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, Downsplat_) == 0x000018, "Member 'NPCBase_C_BloodSplat::Downsplat_' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, Temp_int_Variable) == 0x00001C, "Member 'NPCBase_C_BloodSplat::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, Temp_object_Variable) == 0x000020, "Member 'NPCBase_C_BloodSplat::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, Temp_object_Variable_1) == 0x000028, "Member 'NPCBase_C_BloodSplat::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, Temp_object_Variable_2) == 0x000030, "Member 'NPCBase_C_BloodSplat::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, Temp_bool_Variable) == 0x000038, "Member 'NPCBase_C_BloodSplat::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, Temp_object_Variable_3) == 0x000040, "Member 'NPCBase_C_BloodSplat::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_GetActorUpVector_ReturnValue) == 0x000050, "Member 'NPCBase_C_BloodSplat::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_MakeLiteralFloat_ReturnValue) == 0x00005C, "Member 'NPCBase_C_BloodSplat::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'NPCBase_C_BloodSplat::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'NPCBase_C_BloodSplat::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Add_VectorVector_ReturnValue) == 0x000070, "Member 'NPCBase_C_BloodSplat::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_RandomFloatInRange_ReturnValue) == 0x00007C, "Member 'NPCBase_C_BloodSplat::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, K2Node_Select_Default) == 0x000080, "Member 'NPCBase_C_BloodSplat::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00008C, "Member 'NPCBase_C_BloodSplat::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_FindLookAtRotation_ReturnValue) == 0x000090, "Member 'NPCBase_C_BloodSplat::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x00009C, "Member 'NPCBase_C_BloodSplat::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakRotator_Roll) == 0x0000A0, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakRotator_Pitch) == 0x0000A4, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakRotator_Yaw) == 0x0000A8, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x0000AC, "Member 'NPCBase_C_BloodSplat::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B0, "Member 'NPCBase_C_BloodSplat::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000B4, "Member 'NPCBase_C_BloodSplat::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000B8, "Member 'NPCBase_C_BloodSplat::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x0000BC, "Member 'NPCBase_C_BloodSplat::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_MakeRotator_ReturnValue) == 0x0000C0, "Member 'NPCBase_C_BloodSplat::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_MakeVector_ReturnValue) == 0x0000CC, "Member 'NPCBase_C_BloodSplat::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_GetForwardVector_ReturnValue) == 0x0000D8, "Member 'NPCBase_C_BloodSplat::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0000E4, "Member 'NPCBase_C_BloodSplat::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000E8, "Member 'NPCBase_C_BloodSplat::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000F4, "Member 'NPCBase_C_BloodSplat::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, K2Node_Select_Default_1) == 0x000100, "Member 'NPCBase_C_BloodSplat::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_LineTraceSingle_OutHit) == 0x000108, "Member 'NPCBase_C_BloodSplat::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_LineTraceSingle_ReturnValue) == 0x000190, "Member 'NPCBase_C_BloodSplat::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_bBlockingHit) == 0x000191, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_bInitialOverlap) == 0x000192, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_Time) == 0x000194, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_Distance) == 0x000198, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_Location) == 0x00019C, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A8, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_Normal) == 0x0001B4, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_ImpactNormal) == 0x0001C0, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_PhysMat) == 0x0001D0, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_HitActor) == 0x0001D8, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_HitComponent) == 0x0001E0, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_HitBoneName) == 0x0001E8, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_HitItem) == 0x0001F0, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_ElementIndex) == 0x0001F4, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_FaceIndex) == 0x0001F8, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_TraceStart) == 0x0001FC, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakHitResult_TraceEnd) == 0x000208, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000214, "Member 'NPCBase_C_BloodSplat::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_MakeRotFromX_ReturnValue) == 0x000218, "Member 'NPCBase_C_BloodSplat::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakRotator_Roll_1) == 0x000224, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakRotator_Pitch_1) == 0x000228, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_BreakRotator_Yaw_1) == 0x00022C, "Member 'NPCBase_C_BloodSplat::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_MakeRotator_ReturnValue_1) == 0x000230, "Member 'NPCBase_C_BloodSplat::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCBase_C_BloodSplat, CallFunc_SpawnDecalAtLocation_ReturnValue) == 0x000240, "Member 'NPCBase_C_BloodSplat::CallFunc_SpawnDecalAtLocation_ReturnValue' has a wrong offset!");

}

