#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameAnalytics

#include "Basic.hpp"

#include "GameAnalytics_structs.hpp"


namespace SDK::Params
{

// Function GameAnalytics.GameAnalytics.AddAdEvent
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddAdEvent final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEvent");
static_assert(sizeof(GameAnalytics_AddAdEvent) == 0x000028, "Wrong size on GameAnalytics_AddAdEvent");
static_assert(offsetof(GameAnalytics_AddAdEvent, Action) == 0x000000, "Member 'GameAnalytics_AddAdEvent::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEvent, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEvent::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEvent, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEvent::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEvent, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEvent::AdPlacement' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithDuration
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddAdEventWithDuration final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Duration;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithDuration) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithDuration");
static_assert(sizeof(GameAnalytics_AddAdEventWithDuration) == 0x000030, "Wrong size on GameAnalytics_AddAdEventWithDuration");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithDuration::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithDuration::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithDuration::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithDuration::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, Duration) == 0x000028, "Member 'GameAnalytics_AddAdEventWithDuration::Duration' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithDurationAndFields
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddAdEventWithDurationAndFields final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Duration;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithDurationAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithDurationAndFields");
static_assert(sizeof(GameAnalytics_AddAdEventWithDurationAndFields) == 0x000040, "Wrong size on GameAnalytics_AddAdEventWithDurationAndFields");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndFields, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithDurationAndFields::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndFields, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithDurationAndFields::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndFields, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithDurationAndFields::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndFields, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithDurationAndFields::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndFields, Duration) == 0x000028, "Member 'GameAnalytics_AddAdEventWithDurationAndFields::Duration' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndFields, CustomFields) == 0x000030, "Member 'GameAnalytics_AddAdEventWithDurationAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithDurationAndMergeFields
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddAdEventWithDurationAndMergeFields final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Duration;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithDurationAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithDurationAndMergeFields");
static_assert(sizeof(GameAnalytics_AddAdEventWithDurationAndMergeFields) == 0x000040, "Wrong size on GameAnalytics_AddAdEventWithDurationAndMergeFields");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndMergeFields, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithDurationAndMergeFields::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndMergeFields, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithDurationAndMergeFields::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndMergeFields, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithDurationAndMergeFields::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndMergeFields, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithDurationAndMergeFields::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndMergeFields, Duration) == 0x000028, "Member 'GameAnalytics_AddAdEventWithDurationAndMergeFields::Duration' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDurationAndMergeFields, CustomFields) == 0x000030, "Member 'GameAnalytics_AddAdEventWithDurationAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithFields
// 0x0038 (0x0038 - 0x0000)
struct GameAnalytics_AddAdEventWithFields final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithFields");
static_assert(sizeof(GameAnalytics_AddAdEventWithFields) == 0x000038, "Wrong size on GameAnalytics_AddAdEventWithFields");
static_assert(offsetof(GameAnalytics_AddAdEventWithFields, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithFields::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithFields, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithFields::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithFields, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithFields::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithFields, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithFields::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithFields, CustomFields) == 0x000028, "Member 'GameAnalytics_AddAdEventWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithMergeFields
// 0x0038 (0x0038 - 0x0000)
struct GameAnalytics_AddAdEventWithMergeFields final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithMergeFields");
static_assert(sizeof(GameAnalytics_AddAdEventWithMergeFields) == 0x000038, "Wrong size on GameAnalytics_AddAdEventWithMergeFields");
static_assert(offsetof(GameAnalytics_AddAdEventWithMergeFields, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithMergeFields::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithMergeFields, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithMergeFields::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithMergeFields, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithMergeFields::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithMergeFields, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithMergeFields::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithMergeFields, CustomFields) == 0x000028, "Member 'GameAnalytics_AddAdEventWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithNoAdReason
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddAdEventWithNoAdReason final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdError                                    NoAdReason;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddAdEventWithNoAdReason) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithNoAdReason");
static_assert(sizeof(GameAnalytics_AddAdEventWithNoAdReason) == 0x000030, "Wrong size on GameAnalytics_AddAdEventWithNoAdReason");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithNoAdReason::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithNoAdReason::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithNoAdReason::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithNoAdReason::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, NoAdReason) == 0x000028, "Member 'GameAnalytics_AddAdEventWithNoAdReason::NoAdReason' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithNoAdReasonAndFields
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddAdEventWithNoAdReasonAndFields final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdError                                    NoAdReason;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithNoAdReasonAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithNoAdReasonAndFields");
static_assert(sizeof(GameAnalytics_AddAdEventWithNoAdReasonAndFields) == 0x000040, "Wrong size on GameAnalytics_AddAdEventWithNoAdReasonAndFields");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndFields, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndFields::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndFields, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndFields::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndFields, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndFields::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndFields, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndFields::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndFields, NoAdReason) == 0x000028, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndFields::NoAdReason' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndFields, CustomFields) == 0x000030, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithNoAdReasonAndMergeFields
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     AdType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdError                                    NoAdReason;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields");
static_assert(sizeof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields) == 0x000040, "Wrong size on GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields, AdType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields::AdType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields, AdSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields::AdSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields, AdPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields::AdPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields, NoAdReason) == 0x000028, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields::NoAdReason' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields, CustomFields) == 0x000030, "Member 'GameAnalytics_AddAdEventWithNoAdReasonAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEvent
// 0x0048 (0x0048 - 0x0000)
struct GameAnalytics_AddBusinessEvent final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEvent");
static_assert(sizeof(GameAnalytics_AddBusinessEvent) == 0x000048, "Wrong size on GameAnalytics_AddBusinessEvent");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEvent::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEvent::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEvent::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEvent::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEvent::CartType' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndAutoFetchReceipt
// 0x0048 (0x0048 - 0x0000)
struct GameAnalytics_AddBusinessEventAndAutoFetchReceipt final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndAutoFetchReceipt");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt) == 0x000048, "Wrong size on GameAnalytics_AddBusinessEventAndAutoFetchReceipt");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::CartType' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndAutoFetchReceiptWithFields
// 0x0058 (0x0058 - 0x0000)
struct GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields) == 0x000058, "Wrong size on GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields, CustomFields) == 0x000048, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndAutoFetchReceiptWithMergeFields
// 0x0058 (0x0058 - 0x0000)
struct GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields) == 0x000058, "Wrong size on GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields, CustomFields) == 0x000048, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceiptWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndroid
// 0x0068 (0x0068 - 0x0000)
struct GameAnalytics_AddBusinessEventAndroid final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndroid) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndroid");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndroid) == 0x000068, "Wrong size on GameAnalytics_AddBusinessEventAndroid");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndroid::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndroid::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndroid::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndroid::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndroid::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventAndroid::Receipt' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Signature) == 0x000058, "Member 'GameAnalytics_AddBusinessEventAndroid::Signature' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndroidWithFields
// 0x0078 (0x0078 - 0x0000)
struct GameAnalytics_AddBusinessEventAndroidWithFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndroidWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndroidWithFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndroidWithFields) == 0x000078, "Wrong size on GameAnalytics_AddBusinessEventAndroidWithFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::Receipt' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, Signature) == 0x000058, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::Signature' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithFields, CustomFields) == 0x000068, "Member 'GameAnalytics_AddBusinessEventAndroidWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndroidWithMergeFields
// 0x0078 (0x0078 - 0x0000)
struct GameAnalytics_AddBusinessEventAndroidWithMergeFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndroidWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndroidWithMergeFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndroidWithMergeFields) == 0x000078, "Wrong size on GameAnalytics_AddBusinessEventAndroidWithMergeFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::Receipt' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, Signature) == 0x000058, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::Signature' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroidWithMergeFields, CustomFields) == 0x000068, "Member 'GameAnalytics_AddBusinessEventAndroidWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventIOS
// 0x0058 (0x0058 - 0x0000)
struct GameAnalytics_AddBusinessEventIOS final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventIOS) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventIOS");
static_assert(sizeof(GameAnalytics_AddBusinessEventIOS) == 0x000058, "Wrong size on GameAnalytics_AddBusinessEventIOS");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventIOS::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventIOS::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventIOS::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventIOS::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventIOS::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventIOS::Receipt' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventIOSWithFields
// 0x0068 (0x0068 - 0x0000)
struct GameAnalytics_AddBusinessEventIOSWithFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventIOSWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventIOSWithFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventIOSWithFields) == 0x000068, "Wrong size on GameAnalytics_AddBusinessEventIOSWithFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventIOSWithFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventIOSWithFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventIOSWithFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventIOSWithFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventIOSWithFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithFields, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventIOSWithFields::Receipt' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithFields, CustomFields) == 0x000058, "Member 'GameAnalytics_AddBusinessEventIOSWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventIOSWithMergeFields
// 0x0068 (0x0068 - 0x0000)
struct GameAnalytics_AddBusinessEventIOSWithMergeFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventIOSWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventIOSWithMergeFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventIOSWithMergeFields) == 0x000068, "Wrong size on GameAnalytics_AddBusinessEventIOSWithMergeFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithMergeFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventIOSWithMergeFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithMergeFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventIOSWithMergeFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithMergeFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventIOSWithMergeFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithMergeFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventIOSWithMergeFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithMergeFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventIOSWithMergeFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithMergeFields, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventIOSWithMergeFields::Receipt' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOSWithMergeFields, CustomFields) == 0x000058, "Member 'GameAnalytics_AddBusinessEventIOSWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventWithFields
// 0x0058 (0x0058 - 0x0000)
struct GameAnalytics_AddBusinessEventWithFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventWithFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventWithFields) == 0x000058, "Wrong size on GameAnalytics_AddBusinessEventWithFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventWithFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventWithFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventWithFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventWithFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventWithFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithFields, CustomFields) == 0x000048, "Member 'GameAnalytics_AddBusinessEventWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventWithMergeFields
// 0x0058 (0x0058 - 0x0000)
struct GameAnalytics_AddBusinessEventWithMergeFields final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventWithMergeFields");
static_assert(sizeof(GameAnalytics_AddBusinessEventWithMergeFields) == 0x000058, "Wrong size on GameAnalytics_AddBusinessEventWithMergeFields");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithMergeFields, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventWithMergeFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithMergeFields, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventWithMergeFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithMergeFields, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventWithMergeFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithMergeFields, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventWithMergeFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithMergeFields, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventWithMergeFields::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventWithMergeFields, CustomFields) == 0x000048, "Member 'GameAnalytics_AddBusinessEventWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEvent
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_AddDesignEvent final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddDesignEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEvent");
static_assert(sizeof(GameAnalytics_AddDesignEvent) == 0x000010, "Wrong size on GameAnalytics_AddDesignEvent");
static_assert(offsetof(GameAnalytics_AddDesignEvent, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEvent::EventId' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEventWithFields
// 0x0020 (0x0020 - 0x0000)
struct GameAnalytics_AddDesignEventWithFields final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddDesignEventWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEventWithFields");
static_assert(sizeof(GameAnalytics_AddDesignEventWithFields) == 0x000020, "Wrong size on GameAnalytics_AddDesignEventWithFields");
static_assert(offsetof(GameAnalytics_AddDesignEventWithFields, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEventWithFields::EventId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithFields, CustomFields) == 0x000010, "Member 'GameAnalytics_AddDesignEventWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEventWithMergeFields
// 0x0020 (0x0020 - 0x0000)
struct GameAnalytics_AddDesignEventWithMergeFields final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddDesignEventWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEventWithMergeFields");
static_assert(sizeof(GameAnalytics_AddDesignEventWithMergeFields) == 0x000020, "Wrong size on GameAnalytics_AddDesignEventWithMergeFields");
static_assert(offsetof(GameAnalytics_AddDesignEventWithMergeFields, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEventWithMergeFields::EventId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithMergeFields, CustomFields) == 0x000010, "Member 'GameAnalytics_AddDesignEventWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEventWithValue
// 0x0018 (0x0018 - 0x0000)
struct GameAnalytics_AddDesignEventWithValue final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddDesignEventWithValue) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEventWithValue");
static_assert(sizeof(GameAnalytics_AddDesignEventWithValue) == 0x000018, "Wrong size on GameAnalytics_AddDesignEventWithValue");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValue, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEventWithValue::EventId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValue, Value) == 0x000010, "Member 'GameAnalytics_AddDesignEventWithValue::Value' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEventWithValueAndFields
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddDesignEventWithValueAndFields final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddDesignEventWithValueAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEventWithValueAndFields");
static_assert(sizeof(GameAnalytics_AddDesignEventWithValueAndFields) == 0x000028, "Wrong size on GameAnalytics_AddDesignEventWithValueAndFields");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValueAndFields, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEventWithValueAndFields::EventId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValueAndFields, Value) == 0x000010, "Member 'GameAnalytics_AddDesignEventWithValueAndFields::Value' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValueAndFields, CustomFields) == 0x000018, "Member 'GameAnalytics_AddDesignEventWithValueAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEventWithValueAndMergeFields
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddDesignEventWithValueAndMergeFields final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddDesignEventWithValueAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEventWithValueAndMergeFields");
static_assert(sizeof(GameAnalytics_AddDesignEventWithValueAndMergeFields) == 0x000028, "Wrong size on GameAnalytics_AddDesignEventWithValueAndMergeFields");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValueAndMergeFields, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEventWithValueAndMergeFields::EventId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValueAndMergeFields, Value) == 0x000010, "Member 'GameAnalytics_AddDesignEventWithValueAndMergeFields::Value' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValueAndMergeFields, CustomFields) == 0x000018, "Member 'GameAnalytics_AddDesignEventWithValueAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddErrorEvent
// 0x0018 (0x0018 - 0x0000)
struct GameAnalytics_AddErrorEvent final
{
public:
	EGAErrorSeverity                              Severity;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddErrorEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddErrorEvent");
static_assert(sizeof(GameAnalytics_AddErrorEvent) == 0x000018, "Wrong size on GameAnalytics_AddErrorEvent");
static_assert(offsetof(GameAnalytics_AddErrorEvent, Severity) == 0x000000, "Member 'GameAnalytics_AddErrorEvent::Severity' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddErrorEvent, Message) == 0x000008, "Member 'GameAnalytics_AddErrorEvent::Message' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddErrorEventWithFields
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddErrorEventWithFields final
{
public:
	EGAErrorSeverity                              Severity;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddErrorEventWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddErrorEventWithFields");
static_assert(sizeof(GameAnalytics_AddErrorEventWithFields) == 0x000028, "Wrong size on GameAnalytics_AddErrorEventWithFields");
static_assert(offsetof(GameAnalytics_AddErrorEventWithFields, Severity) == 0x000000, "Member 'GameAnalytics_AddErrorEventWithFields::Severity' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddErrorEventWithFields, Message) == 0x000008, "Member 'GameAnalytics_AddErrorEventWithFields::Message' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddErrorEventWithFields, CustomFields) == 0x000018, "Member 'GameAnalytics_AddErrorEventWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddErrorEventWithMergeFields
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddErrorEventWithMergeFields final
{
public:
	EGAErrorSeverity                              Severity;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddErrorEventWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddErrorEventWithMergeFields");
static_assert(sizeof(GameAnalytics_AddErrorEventWithMergeFields) == 0x000028, "Wrong size on GameAnalytics_AddErrorEventWithMergeFields");
static_assert(offsetof(GameAnalytics_AddErrorEventWithMergeFields, Severity) == 0x000000, "Member 'GameAnalytics_AddErrorEventWithMergeFields::Severity' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddErrorEventWithMergeFields, Message) == 0x000008, "Member 'GameAnalytics_AddErrorEventWithMergeFields::Message' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddErrorEventWithMergeFields, CustomFields) == 0x000018, "Member 'GameAnalytics_AddErrorEventWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOne
// 0x0018 (0x0018 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOne final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOne) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOne");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOne) == 0x000018, "Wrong size on GameAnalytics_AddProgressionEventWithOne");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOne, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOne::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOne, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOne::Progression01' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndFields
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneAndFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneAndFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneAndFields) == 0x000028, "Wrong size on GameAnalytics_AddProgressionEventWithOneAndFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneAndFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneAndFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndFields, CustomFields) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndMergeFields
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneAndMergeFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneAndMergeFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneAndMergeFields) == 0x000028, "Wrong size on GameAnalytics_AddProgressionEventWithOneAndMergeFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndMergeFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneAndMergeFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndMergeFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneAndMergeFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndMergeFields, CustomFields) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndScore
// 0x0020 (0x0020 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneAndScore final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneAndScore) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneAndScore");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneAndScore) == 0x000020, "Wrong size on GameAnalytics_AddProgressionEventWithOneAndScore");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndScore, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneAndScore::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndScore, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneAndScore::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndScore, Score) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneAndScore::Score' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndTwo
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneAndTwo final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneAndTwo) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneAndTwo");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneAndTwo) == 0x000028, "Wrong size on GameAnalytics_AddProgressionEventWithOneAndTwo");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndTwo, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneAndTwo::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndTwo, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneAndTwo::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndTwo, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneAndTwo::Progression02' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneScoreAndFields
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneScoreAndFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneScoreAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneScoreAndFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneScoreAndFields) == 0x000030, "Wrong size on GameAnalytics_AddProgressionEventWithOneScoreAndFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndFields, Score) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndFields::Score' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndFields, CustomFields) == 0x000020, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneScoreAndMergeFields
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields) == 0x000030, "Wrong size on GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields, Score) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields::Score' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields, CustomFields) == 0x000020, "Member 'GameAnalytics_AddProgressionEventWithOneScoreAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndFields
// 0x0038 (0x0038 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoAndFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoAndFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoAndFields) == 0x000038, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoAndFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndFields, CustomFields) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndMergeFields
// 0x0038 (0x0038 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields) == 0x000038, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields, CustomFields) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndScore
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoAndScore final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoAndScore) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoAndScore");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoAndScore) == 0x000030, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoAndScore");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, Score) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::Score' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndThree
// 0x0038 (0x0038 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoAndThree final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoAndThree) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoAndThree");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoAndThree) == 0x000038, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoAndThree");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::Progression03' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoScoreAndFields
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields) == 0x000040, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields, Score) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields::Score' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields, CustomFields) == 0x000030, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoScoreAndMergeFields
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields) == 0x000040, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields, Score) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields::Score' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields, CustomFields) == 0x000030, "Member 'GameAnalytics_AddProgressionEventWithOneTwoScoreAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoThreeAndFields
// 0x0048 (0x0048 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields) == 0x000048, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields::Progression03' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields, CustomFields) == 0x000038, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoThreeAndMergeFields
// 0x0048 (0x0048 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields) == 0x000048, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields::Progression03' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields, CustomFields) == 0x000038, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoThreeAndScore
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore) == 0x000040, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Progression03' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Score) == 0x000038, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Score' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoThreeScoreAndFields
// 0x0050 (0x0050 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields) == 0x000050, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields::Progression03' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields, Score) == 0x000038, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields::Score' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields, CustomFields) == 0x000040, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoThreeScoreAndMergeFields
// 0x0050 (0x0050 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields) == 0x000050, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields::Progression03' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields, Score) == 0x000038, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields::Score' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields, CustomFields) == 0x000040, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeScoreAndMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddResourceEvent
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddResourceEvent final
{
public:
	EGAResourceFlowType                           FlowType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddResourceEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddResourceEvent");
static_assert(sizeof(GameAnalytics_AddResourceEvent) == 0x000040, "Wrong size on GameAnalytics_AddResourceEvent");
static_assert(offsetof(GameAnalytics_AddResourceEvent, FlowType) == 0x000000, "Member 'GameAnalytics_AddResourceEvent::FlowType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, Currency) == 0x000008, "Member 'GameAnalytics_AddResourceEvent::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, Amount) == 0x000018, "Member 'GameAnalytics_AddResourceEvent::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, ItemType) == 0x000020, "Member 'GameAnalytics_AddResourceEvent::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, ItemId) == 0x000030, "Member 'GameAnalytics_AddResourceEvent::ItemId' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddResourceEventWithFields
// 0x0050 (0x0050 - 0x0000)
struct GameAnalytics_AddResourceEventWithFields final
{
public:
	EGAResourceFlowType                           FlowType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddResourceEventWithFields) == 0x000008, "Wrong alignment on GameAnalytics_AddResourceEventWithFields");
static_assert(sizeof(GameAnalytics_AddResourceEventWithFields) == 0x000050, "Wrong size on GameAnalytics_AddResourceEventWithFields");
static_assert(offsetof(GameAnalytics_AddResourceEventWithFields, FlowType) == 0x000000, "Member 'GameAnalytics_AddResourceEventWithFields::FlowType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithFields, Currency) == 0x000008, "Member 'GameAnalytics_AddResourceEventWithFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithFields, Amount) == 0x000018, "Member 'GameAnalytics_AddResourceEventWithFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithFields, ItemType) == 0x000020, "Member 'GameAnalytics_AddResourceEventWithFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithFields, ItemId) == 0x000030, "Member 'GameAnalytics_AddResourceEventWithFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithFields, CustomFields) == 0x000040, "Member 'GameAnalytics_AddResourceEventWithFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddResourceEventWithMergeFields
// 0x0050 (0x0050 - 0x0000)
struct GameAnalytics_AddResourceEventWithMergeFields final
{
public:
	EGAResourceFlowType                           FlowType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameAnalyticsCustomEventField> CustomFields;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddResourceEventWithMergeFields) == 0x000008, "Wrong alignment on GameAnalytics_AddResourceEventWithMergeFields");
static_assert(sizeof(GameAnalytics_AddResourceEventWithMergeFields) == 0x000050, "Wrong size on GameAnalytics_AddResourceEventWithMergeFields");
static_assert(offsetof(GameAnalytics_AddResourceEventWithMergeFields, FlowType) == 0x000000, "Member 'GameAnalytics_AddResourceEventWithMergeFields::FlowType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithMergeFields, Currency) == 0x000008, "Member 'GameAnalytics_AddResourceEventWithMergeFields::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithMergeFields, Amount) == 0x000018, "Member 'GameAnalytics_AddResourceEventWithMergeFields::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithMergeFields, ItemType) == 0x000020, "Member 'GameAnalytics_AddResourceEventWithMergeFields::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithMergeFields, ItemId) == 0x000030, "Member 'GameAnalytics_AddResourceEventWithMergeFields::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEventWithMergeFields, CustomFields) == 0x000040, "Member 'GameAnalytics_AddResourceEventWithMergeFields::CustomFields' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetABTestingId
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_GetABTestingId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetABTestingId) == 0x000008, "Wrong alignment on GameAnalytics_GetABTestingId");
static_assert(sizeof(GameAnalytics_GetABTestingId) == 0x000010, "Wrong size on GameAnalytics_GetABTestingId");
static_assert(offsetof(GameAnalytics_GetABTestingId, ReturnValue) == 0x000000, "Member 'GameAnalytics_GetABTestingId::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetABTestingVariantId
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_GetABTestingVariantId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetABTestingVariantId) == 0x000008, "Wrong alignment on GameAnalytics_GetABTestingVariantId");
static_assert(sizeof(GameAnalytics_GetABTestingVariantId) == 0x000010, "Wrong size on GameAnalytics_GetABTestingVariantId");
static_assert(offsetof(GameAnalytics_GetABTestingVariantId, ReturnValue) == 0x000000, "Member 'GameAnalytics_GetABTestingVariantId::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetRemoteConfigsContentAsString
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_GetRemoteConfigsContentAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetRemoteConfigsContentAsString) == 0x000008, "Wrong alignment on GameAnalytics_GetRemoteConfigsContentAsString");
static_assert(sizeof(GameAnalytics_GetRemoteConfigsContentAsString) == 0x000010, "Wrong size on GameAnalytics_GetRemoteConfigsContentAsString");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsContentAsString, ReturnValue) == 0x000000, "Member 'GameAnalytics_GetRemoteConfigsContentAsString::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetRemoteConfigsValueAsString
// 0x0020 (0x0020 - 0x0000)
struct GameAnalytics_GetRemoteConfigsValueAsString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetRemoteConfigsValueAsString) == 0x000008, "Wrong alignment on GameAnalytics_GetRemoteConfigsValueAsString");
static_assert(sizeof(GameAnalytics_GetRemoteConfigsValueAsString) == 0x000020, "Wrong size on GameAnalytics_GetRemoteConfigsValueAsString");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsString, Key) == 0x000000, "Member 'GameAnalytics_GetRemoteConfigsValueAsString::Key' has a wrong offset!");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsString, ReturnValue) == 0x000010, "Member 'GameAnalytics_GetRemoteConfigsValueAsString::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetRemoteConfigsValueAsStringWithDefaultValue
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue) == 0x000008, "Wrong alignment on GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue");
static_assert(sizeof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue) == 0x000030, "Wrong size on GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue, Key) == 0x000000, "Member 'GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue::Key' has a wrong offset!");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue, DefaultValue) == 0x000010, "Member 'GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue::DefaultValue' has a wrong offset!");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue, ReturnValue) == 0x000020, "Member 'GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.IsRemoteConfigsReady
// 0x0001 (0x0001 - 0x0000)
struct GameAnalytics_IsRemoteConfigsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_IsRemoteConfigsReady) == 0x000001, "Wrong alignment on GameAnalytics_IsRemoteConfigsReady");
static_assert(sizeof(GameAnalytics_IsRemoteConfigsReady) == 0x000001, "Wrong size on GameAnalytics_IsRemoteConfigsReady");
static_assert(offsetof(GameAnalytics_IsRemoteConfigsReady, ReturnValue) == 0x000000, "Member 'GameAnalytics_IsRemoteConfigsReady::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.SetCustomDimension01
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_SetCustomDimension01 final
{
public:
	class FString                                 CustomDimension;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_SetCustomDimension01) == 0x000008, "Wrong alignment on GameAnalytics_SetCustomDimension01");
static_assert(sizeof(GameAnalytics_SetCustomDimension01) == 0x000010, "Wrong size on GameAnalytics_SetCustomDimension01");
static_assert(offsetof(GameAnalytics_SetCustomDimension01, CustomDimension) == 0x000000, "Member 'GameAnalytics_SetCustomDimension01::CustomDimension' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.SetCustomDimension02
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_SetCustomDimension02 final
{
public:
	class FString                                 CustomDimension;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_SetCustomDimension02) == 0x000008, "Wrong alignment on GameAnalytics_SetCustomDimension02");
static_assert(sizeof(GameAnalytics_SetCustomDimension02) == 0x000010, "Wrong size on GameAnalytics_SetCustomDimension02");
static_assert(offsetof(GameAnalytics_SetCustomDimension02, CustomDimension) == 0x000000, "Member 'GameAnalytics_SetCustomDimension02::CustomDimension' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.SetCustomDimension03
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_SetCustomDimension03 final
{
public:
	class FString                                 CustomDimension;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_SetCustomDimension03) == 0x000008, "Wrong alignment on GameAnalytics_SetCustomDimension03");
static_assert(sizeof(GameAnalytics_SetCustomDimension03) == 0x000010, "Wrong size on GameAnalytics_SetCustomDimension03");
static_assert(offsetof(GameAnalytics_SetCustomDimension03, CustomDimension) == 0x000000, "Member 'GameAnalytics_SetCustomDimension03::CustomDimension' has a wrong offset!");

}

