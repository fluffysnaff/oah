#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Apartment_single_modular

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Apartment_single_modular.Apartment_single_modular_C
// 0x0090 (0x02B0 - 0x0220)
class AApartment_single_modular_C final : public AActor
{
public:
	class UStaticMeshComponent*                   ShopWindow;                                        // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Door;                                              // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RunInConstruct_;                                   // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_25B1[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Floors;                                            // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            AparmentMesh;                                      // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            ApartmentDoorMesh;                                 // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            ShopWindowmesh;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 RoofProp;                                          // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            RoofMesh;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInterface*                     BuildingMat;                                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UClass*>                         StreetProps;                                       // 0x0270(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UClass*                                 SignProps;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    WindowProps;                                       // 0x0288(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	float                                         WindowPropChance;                                  // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          FireStairs_;                                       // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_25B2[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindowRows;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         WindowRowSpacing;                                  // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         WindowRowStartOffset;                              // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         WindowHeight;                                      // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateBuilding();
	void Randomize();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Apartment_single_modular_C">();
	}
	static class AApartment_single_modular_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AApartment_single_modular_C>();
	}
};
static_assert(alignof(AApartment_single_modular_C) == 0x000008, "Wrong alignment on AApartment_single_modular_C");
static_assert(sizeof(AApartment_single_modular_C) == 0x0002B0, "Wrong size on AApartment_single_modular_C");
static_assert(offsetof(AApartment_single_modular_C, ShopWindow) == 0x000220, "Member 'AApartment_single_modular_C::ShopWindow' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, Door) == 0x000228, "Member 'AApartment_single_modular_C::Door' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, DefaultSceneRoot) == 0x000230, "Member 'AApartment_single_modular_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, RunInConstruct_) == 0x000238, "Member 'AApartment_single_modular_C::RunInConstruct_' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, Floors) == 0x00023C, "Member 'AApartment_single_modular_C::Floors' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, AparmentMesh) == 0x000240, "Member 'AApartment_single_modular_C::AparmentMesh' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, ApartmentDoorMesh) == 0x000248, "Member 'AApartment_single_modular_C::ApartmentDoorMesh' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, ShopWindowmesh) == 0x000250, "Member 'AApartment_single_modular_C::ShopWindowmesh' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, RoofProp) == 0x000258, "Member 'AApartment_single_modular_C::RoofProp' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, RoofMesh) == 0x000260, "Member 'AApartment_single_modular_C::RoofMesh' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, BuildingMat) == 0x000268, "Member 'AApartment_single_modular_C::BuildingMat' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, StreetProps) == 0x000270, "Member 'AApartment_single_modular_C::StreetProps' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, SignProps) == 0x000280, "Member 'AApartment_single_modular_C::SignProps' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, WindowProps) == 0x000288, "Member 'AApartment_single_modular_C::WindowProps' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, WindowPropChance) == 0x000298, "Member 'AApartment_single_modular_C::WindowPropChance' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, FireStairs_) == 0x00029C, "Member 'AApartment_single_modular_C::FireStairs_' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, WindowRows) == 0x0002A0, "Member 'AApartment_single_modular_C::WindowRows' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, WindowRowSpacing) == 0x0002A4, "Member 'AApartment_single_modular_C::WindowRowSpacing' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, WindowRowStartOffset) == 0x0002A8, "Member 'AApartment_single_modular_C::WindowRowStartOffset' has a wrong offset!");
static_assert(offsetof(AApartment_single_modular_C, WindowHeight) == 0x0002AC, "Member 'AApartment_single_modular_C::WindowHeight' has a wrong offset!");

}

