#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DoorBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DoorBP.DoorBP_C
// 0x00B8 (0x02D8 - 0x0220)
class ADoorBP_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Overlaper;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Handle;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DoorFloor;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAlertComponent_C*                      AlertComponent;                                    // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent_C*                     DamageComponent;                                   // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          NavCorrecter;                                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULockpickComponent_C*                   LockpickComponent;                                 // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHackableItemComponent_C*               HackableItemComponent;                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULookatInfoComponent_C*                 LookatInfoComponent;                               // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractComponent_C*                   InteractComponent;                                 // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Door;                                              // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            DoorMesh;                                          // 0x02A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Open_;                                             // 0x02A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OneDirection;                                      // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2AA[0x2];                                      // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpenTime;                                          // 0x02AC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked_;                                           // 0x02B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          SneakOpen_;                                        // 0x02B1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Opening_;                                          // 0x02B2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B3[0x1];                                      // 0x02B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Health;                                            // 0x02B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanShootOpen_;                                     // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          PowerLocked_;                                      // 0x02B9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          AlarmTriggered_;                                   // 0x02BA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UnlockWhenOnPowerShort;                            // 0x02BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OpenSound;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CloseSound;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartOpen;                                         // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_DoorBP(int32 EntryPoint);
	void SetDoorName(const class FString& Name_0);
	void BndEvt__DoorBP_HackableItemComponent_K2Node_ComponentBoundEvent_6_PowerboxUnlock__DelegateSignature();
	void ExplodeDoorMulti();
	void ReceiveBeginPlay();
	void ExplodeDoor(class AActor* Instigator_0);
	void BndEvt__DoorBP_AlertComponent_K2Node_ComponentBoundEvent_8_OnAlarmtriggered__DelegateSignature();
	void HitDoorServer(class AActor* Actor);
	void ChangeDoorMesh();
	void UnlockDoor();
	void BndEvt__DoorBP_DamageComponent_K2Node_ComponentBoundEvent_5_Damage__DelegateSignature(int32 Amount, class FName Bone, const struct FVector& HitLocation, const struct FVector& StartLocation, class AActor* Instigator_0);
	void OpenDoorServer(class AActor* Player, float Open_speed, bool Sneaking_, bool Ease_);
	void BndEvt__DoorBP_Door_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__DoorBP_LockpickComponent_K2Node_ComponentBoundEvent_3_Unlock__DelegateSignature();
	void HackDoorOpen();
	void BndEvt__DoorBP_HackableItemComponent_K2Node_ComponentBoundEvent_2_HackItem__DelegateSignature();
	void CloseDoor();
	void OverlapNPC(class AActor* Actor);
	void BndEvt__DoorBP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OpenDoorMulti(class AActor* Player, float OpenSpeed, bool Open__0, bool Sneaking_, bool Ease_);
	void BndEvt__DoorBP_InteractComponent_K2Node_ComponentBoundEvent_0_Interact__DelegateSignature(class AActor* Player, class UPrimitiveComponent* HitComponent);
	void UserConstructionScript();
	void OnRep_Opening_();
	void OpenDoorNav();
	void PlayerHitDoorOpen(class APlayerCharacter_C* PlayerCharacter);
	void IsDoorOpenInterfaceCall(bool* IsOpen_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DoorBP_C">();
	}
	static class ADoorBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADoorBP_C>();
	}
};
static_assert(alignof(ADoorBP_C) == 0x000008, "Wrong alignment on ADoorBP_C");
static_assert(sizeof(ADoorBP_C) == 0x0002D8, "Wrong size on ADoorBP_C");
static_assert(offsetof(ADoorBP_C, UberGraphFrame) == 0x000220, "Member 'ADoorBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Overlaper) == 0x000228, "Member 'ADoorBP_C::Overlaper' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, NavModifier) == 0x000230, "Member 'ADoorBP_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Handle) == 0x000238, "Member 'ADoorBP_C::Handle' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, DoorFloor) == 0x000240, "Member 'ADoorBP_C::DoorFloor' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, AlertComponent) == 0x000248, "Member 'ADoorBP_C::AlertComponent' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, DamageComponent) == 0x000250, "Member 'ADoorBP_C::DamageComponent' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, NavCorrecter) == 0x000258, "Member 'ADoorBP_C::NavCorrecter' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, LockpickComponent) == 0x000260, "Member 'ADoorBP_C::LockpickComponent' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, HackableItemComponent) == 0x000268, "Member 'ADoorBP_C::HackableItemComponent' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, LookatInfoComponent) == 0x000270, "Member 'ADoorBP_C::LookatInfoComponent' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Box) == 0x000278, "Member 'ADoorBP_C::Box' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Arrow) == 0x000280, "Member 'ADoorBP_C::Arrow' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, InteractComponent) == 0x000288, "Member 'ADoorBP_C::InteractComponent' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Door) == 0x000290, "Member 'ADoorBP_C::Door' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, DefaultSceneRoot) == 0x000298, "Member 'ADoorBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, DoorMesh) == 0x0002A0, "Member 'ADoorBP_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Open_) == 0x0002A8, "Member 'ADoorBP_C::Open_' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, OneDirection) == 0x0002A9, "Member 'ADoorBP_C::OneDirection' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, OpenTime) == 0x0002AC, "Member 'ADoorBP_C::OpenTime' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Locked_) == 0x0002B0, "Member 'ADoorBP_C::Locked_' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, SneakOpen_) == 0x0002B1, "Member 'ADoorBP_C::SneakOpen_' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Opening_) == 0x0002B2, "Member 'ADoorBP_C::Opening_' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, Health) == 0x0002B4, "Member 'ADoorBP_C::Health' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, CanShootOpen_) == 0x0002B8, "Member 'ADoorBP_C::CanShootOpen_' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, PowerLocked_) == 0x0002B9, "Member 'ADoorBP_C::PowerLocked_' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, AlarmTriggered_) == 0x0002BA, "Member 'ADoorBP_C::AlarmTriggered_' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, UnlockWhenOnPowerShort) == 0x0002BB, "Member 'ADoorBP_C::UnlockWhenOnPowerShort' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, OpenSound) == 0x0002C0, "Member 'ADoorBP_C::OpenSound' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, CloseSound) == 0x0002C8, "Member 'ADoorBP_C::CloseSound' has a wrong offset!");
static_assert(offsetof(ADoorBP_C, StartOpen) == 0x0002D0, "Member 'ADoorBP_C::StartOpen' has a wrong offset!");

}

