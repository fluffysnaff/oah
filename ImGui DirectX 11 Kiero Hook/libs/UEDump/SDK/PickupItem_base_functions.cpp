#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PickupItem_base

#include "Basic.hpp"

#include "PickupItem_base_classes.hpp"
#include "PickupItem_base_parameters.hpp"


namespace SDK
{

// Function PickupItem_base.PickupItem_base_C.ExecuteUbergraph_PickupItem_base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APickupItem_base_C::ExecuteUbergraph_PickupItem_base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickupItem_base_C", "ExecuteUbergraph_PickupItem_base");

	Params::PickupItem_base_C_ExecuteUbergraph_PickupItem_base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PickupItem_base.PickupItem_base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APickupItem_base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickupItem_base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickupItem_base.PickupItem_base_C.SetCollisionResponeOverlapServer
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void APickupItem_base_C::SetCollisionResponeOverlapServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickupItem_base_C", "SetCollisionResponeOverlapServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickupItem_base.PickupItem_base_C.BndEvt__PickupItem_base_PickupItemComponent_K2Node_ComponentBoundEvent_0_PickUpItem__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Pickuplocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         PickupRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APickupItem_base_C::BndEvt__PickupItem_base_PickupItemComponent_K2Node_ComponentBoundEvent_0_PickUpItem__DelegateSignature(class AActor* Player, const struct FVector& Pickuplocation, const struct FRotator& PickupRotation, const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickupItem_base_C", "BndEvt__PickupItem_base_PickupItemComponent_K2Node_ComponentBoundEvent_0_PickUpItem__DelegateSignature");

	Params::PickupItem_base_C_BndEvt__PickupItem_base_PickupItemComponent_K2Node_ComponentBoundEvent_0_PickUpItem__DelegateSignature Parms{};

	Parms.Player = Player;
	Parms.Pickuplocation = std::move(Pickuplocation);
	Parms.PickupRotation = std::move(PickupRotation);
	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PickupItem_base.PickupItem_base_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APickupItem_base_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickupItem_base_C", "ReceiveActorEndOverlap");

	Params::PickupItem_base_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PickupItem_base.PickupItem_base_C.OnPickupInterfaceCall
// (Public, BlueprintCallable, BlueprintEvent)

void APickupItem_base_C::OnPickupInterfaceCall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickupItem_base_C", "OnPickupInterfaceCall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PickupItem_base.PickupItem_base_C.CheckIfOverlappingPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Overlapping_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APickupItem_base_C::CheckIfOverlappingPlayer(bool* Overlapping_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PickupItem_base_C", "CheckIfOverlappingPlayer");

	Params::PickupItem_base_C_CheckIfOverlappingPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Overlapping_ != nullptr)
		*Overlapping_ = Parms.Overlapping_;
}

}

