#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CameraBP.CameraBP_C
// 0x00D0 (0x0350 - 0x0280)
class ACameraBP_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAlertComponent_C*                      AlertComponent;                                    // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotPlayerComponent_C*                 SpotPlayerComponent;                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpottedHighlightcomponent_C*           SpottedHighlightcomponent;                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent_C*                     DamageComponent;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CameraViewCollision;                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CameraHead;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CameraArm;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Roofcam_;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CamStartRotation;                                  // 0x02E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          DoesRotate_;                                       // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CamEndRotation;                                    // 0x02F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	float                                         RotationDelay;                                     // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CollisionVisibleInEditor_;                         // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Possessed_;                                        // 0x0305(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Destroyed_;                                        // 0x0306(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_307[0x1];                                      // 0x0307(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCharacter_C*                     Possessed_Player;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SeenArmedPlayer;                                   // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             CamDestroyed;                                      // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class APlayerCharacter_C*>             SpottedPlayers;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Ignored_;                                          // 0x0340(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CamNumber;                                         // 0x0344(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HasRotated_;                                       // 0x0348(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void SeenArmedPlayer__DelegateSignature(const struct FVector& Location, const class FString& SpotReason);
	void CamDestroyed__DelegateSignature(const struct FVector& Location, class ACameraBP_C* Camera_0);
	void ExecuteUbergraph_CameraBP(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RotateCam(bool Rotated_);
	void StartCamRotation();
	void BndEvt__CameraBP_SpotPlayerComponent_K2Node_ComponentBoundEvent_2_PlayerSpotted__DelegateSignature(class APawn* Player);
	void IgnoreCamera();
	void NPCDieOverlapEnd(class AActor* NPC);
	void BndEvt__CameraBP_CameraViewCollision_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void RemoveCameraUI();
	void PossessPlayer();
	void CameraUI();
	void SwitchCamera(int32 SwitchNum);
	void DestroyCamera();
	void BndEvt__CameraBP_DamageComponent_K2Node_ComponentBoundEvent_1_Damage__DelegateSignature(int32 Amount, class FName Bone, const struct FVector& HitLocation, const struct FVector& StartLocation, class AActor* Instigator_0);
	void CameraCheck();
	void ReceiveTick(float DeltaSeconds);
	void PossessCamera(class APlayerCharacter_C* PossessedPlayer);
	void InpActEvt_Right_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Left_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void UserConstructionScript();
	void FindNextCam(int32 SwitchNum, int32 CamNumber_0, class ACameraBP_C** Camera_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CameraBP_C">();
	}
	static class ACameraBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraBP_C>();
	}
};
static_assert(alignof(ACameraBP_C) == 0x000008, "Wrong alignment on ACameraBP_C");
static_assert(sizeof(ACameraBP_C) == 0x000350, "Wrong size on ACameraBP_C");
static_assert(offsetof(ACameraBP_C, UberGraphFrame) == 0x000280, "Member 'ACameraBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, AlertComponent) == 0x000288, "Member 'ACameraBP_C::AlertComponent' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, PointLight) == 0x000290, "Member 'ACameraBP_C::PointLight' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, SpotPlayerComponent) == 0x000298, "Member 'ACameraBP_C::SpotPlayerComponent' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, SpottedHighlightcomponent) == 0x0002A0, "Member 'ACameraBP_C::SpottedHighlightcomponent' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, DamageComponent) == 0x0002A8, "Member 'ACameraBP_C::DamageComponent' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CameraViewCollision) == 0x0002B0, "Member 'ACameraBP_C::CameraViewCollision' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, Arrow) == 0x0002B8, "Member 'ACameraBP_C::Arrow' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, Camera) == 0x0002C0, "Member 'ACameraBP_C::Camera' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CameraHead) == 0x0002C8, "Member 'ACameraBP_C::CameraHead' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CameraArm) == 0x0002D0, "Member 'ACameraBP_C::CameraArm' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, DefaultSceneRoot) == 0x0002D8, "Member 'ACameraBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, Roofcam_) == 0x0002E0, "Member 'ACameraBP_C::Roofcam_' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CamStartRotation) == 0x0002E4, "Member 'ACameraBP_C::CamStartRotation' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, DoesRotate_) == 0x0002F0, "Member 'ACameraBP_C::DoesRotate_' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CamEndRotation) == 0x0002F4, "Member 'ACameraBP_C::CamEndRotation' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, RotationDelay) == 0x000300, "Member 'ACameraBP_C::RotationDelay' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CollisionVisibleInEditor_) == 0x000304, "Member 'ACameraBP_C::CollisionVisibleInEditor_' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, Possessed_) == 0x000305, "Member 'ACameraBP_C::Possessed_' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, Destroyed_) == 0x000306, "Member 'ACameraBP_C::Destroyed_' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, Possessed_Player) == 0x000308, "Member 'ACameraBP_C::Possessed_Player' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, SeenArmedPlayer) == 0x000310, "Member 'ACameraBP_C::SeenArmedPlayer' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CamDestroyed) == 0x000320, "Member 'ACameraBP_C::CamDestroyed' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, SpottedPlayers) == 0x000330, "Member 'ACameraBP_C::SpottedPlayers' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, Ignored_) == 0x000340, "Member 'ACameraBP_C::Ignored_' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, CamNumber) == 0x000344, "Member 'ACameraBP_C::CamNumber' has a wrong offset!");
static_assert(offsetof(ACameraBP_C, HasRotated_) == 0x000348, "Member 'ACameraBP_C::HasRotated_' has a wrong offset!");

}

