#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamCore

#include "Basic.hpp"

#include "SteamCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SteamCore.SteamCoreUGCAsyncActionGetUserItemVote.GetUserItemVoteAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionGetUserItemVote* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, Timeout) == 0x000010, "Member 'SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionGetUserItemVote.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback final
{
public:
	struct FGetUserItemVoteResult                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionGetUserItemVote_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSetUserItemVote.SetUserItemVoteAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoteUp;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreUGCAsyncActionSetUserItemVote* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, bVoteUp) == 0x000010, "Member 'SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::bVoteUp' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, Timeout) == 0x000014, "Member 'SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSetUserItemVote.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback final
{
public:
	struct FSetUserItemVoteResult                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionSetUserItemVote_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.AppList.GetAppBuildId
// 0x0008 (0x0008 - 0x0000)
struct AppList_GetAppBuildId final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppList_GetAppBuildId) == 0x000004, "Wrong alignment on AppList_GetAppBuildId");
static_assert(sizeof(AppList_GetAppBuildId) == 0x000008, "Wrong size on AppList_GetAppBuildId");
static_assert(offsetof(AppList_GetAppBuildId, AppID) == 0x000000, "Member 'AppList_GetAppBuildId::AppID' has a wrong offset!");
static_assert(offsetof(AppList_GetAppBuildId, ReturnValue) == 0x000004, "Member 'AppList_GetAppBuildId::ReturnValue' has a wrong offset!");

// Function SteamCore.AppList.GetAppInstallDir
// 0x0020 (0x0020 - 0x0000)
struct AppList_GetAppInstallDir final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Directory;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppList_GetAppInstallDir) == 0x000008, "Wrong alignment on AppList_GetAppInstallDir");
static_assert(sizeof(AppList_GetAppInstallDir) == 0x000020, "Wrong size on AppList_GetAppInstallDir");
static_assert(offsetof(AppList_GetAppInstallDir, AppID) == 0x000000, "Member 'AppList_GetAppInstallDir::AppID' has a wrong offset!");
static_assert(offsetof(AppList_GetAppInstallDir, Directory) == 0x000008, "Member 'AppList_GetAppInstallDir::Directory' has a wrong offset!");
static_assert(offsetof(AppList_GetAppInstallDir, ReturnValue) == 0x000018, "Member 'AppList_GetAppInstallDir::ReturnValue' has a wrong offset!");

// Function SteamCore.AppList.GetAppName
// 0x0020 (0x0020 - 0x0000)
struct AppList_GetAppName final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppList_GetAppName) == 0x000008, "Wrong alignment on AppList_GetAppName");
static_assert(sizeof(AppList_GetAppName) == 0x000020, "Wrong size on AppList_GetAppName");
static_assert(offsetof(AppList_GetAppName, AppID) == 0x000000, "Member 'AppList_GetAppName::AppID' has a wrong offset!");
static_assert(offsetof(AppList_GetAppName, Name_0) == 0x000008, "Member 'AppList_GetAppName::Name_0' has a wrong offset!");
static_assert(offsetof(AppList_GetAppName, ReturnValue) == 0x000018, "Member 'AppList_GetAppName::ReturnValue' has a wrong offset!");

// Function SteamCore.AppList.GetInstalledApps
// 0x0018 (0x0018 - 0x0000)
struct AppList_GetInstalledApps final
{
public:
	TArray<int32>                                 AppIDs;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxAppIDs;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppList_GetInstalledApps) == 0x000008, "Wrong alignment on AppList_GetInstalledApps");
static_assert(sizeof(AppList_GetInstalledApps) == 0x000018, "Wrong size on AppList_GetInstalledApps");
static_assert(offsetof(AppList_GetInstalledApps, AppIDs) == 0x000000, "Member 'AppList_GetInstalledApps::AppIDs' has a wrong offset!");
static_assert(offsetof(AppList_GetInstalledApps, MaxAppIDs) == 0x000010, "Member 'AppList_GetInstalledApps::MaxAppIDs' has a wrong offset!");
static_assert(offsetof(AppList_GetInstalledApps, ReturnValue) == 0x000014, "Member 'AppList_GetInstalledApps::ReturnValue' has a wrong offset!");

// Function SteamCore.AppList.GetNumInstalledApps
// 0x0004 (0x0004 - 0x0000)
struct AppList_GetNumInstalledApps final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppList_GetNumInstalledApps) == 0x000004, "Wrong alignment on AppList_GetNumInstalledApps");
static_assert(sizeof(AppList_GetNumInstalledApps) == 0x000004, "Wrong size on AppList_GetNumInstalledApps");
static_assert(offsetof(AppList_GetNumInstalledApps, ReturnValue) == 0x000000, "Member 'AppList_GetNumInstalledApps::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSubmitItemUpdate.SubmitItemUpdateAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCUpdateHandle                       Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChangeNote;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionSubmitItemUpdate* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync) == 0x000030, "Wrong size on SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, Handle) == 0x000008, "Member 'SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::Handle' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, ChangeNote) == 0x000010, "Member 'SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::ChangeNote' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, Timeout) == 0x000020, "Member 'SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, ReturnValue) == 0x000028, "Member 'SteamCoreUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSubmitItemUpdate.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback final
{
public:
	struct FSubmitItemUpdateResult                Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionSubmitItemUpdate_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.Apps.BGetDLCDataByIndex
// 0x0028 (0x0028 - 0x0000)
struct Apps_BGetDLCDataByIndex final
{
public:
	int32                                         DLC;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvailable;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_BGetDLCDataByIndex) == 0x000008, "Wrong alignment on Apps_BGetDLCDataByIndex");
static_assert(sizeof(Apps_BGetDLCDataByIndex) == 0x000028, "Wrong size on Apps_BGetDLCDataByIndex");
static_assert(offsetof(Apps_BGetDLCDataByIndex, DLC) == 0x000000, "Member 'Apps_BGetDLCDataByIndex::DLC' has a wrong offset!");
static_assert(offsetof(Apps_BGetDLCDataByIndex, AppID) == 0x000004, "Member 'Apps_BGetDLCDataByIndex::AppID' has a wrong offset!");
static_assert(offsetof(Apps_BGetDLCDataByIndex, bAvailable) == 0x000008, "Member 'Apps_BGetDLCDataByIndex::bAvailable' has a wrong offset!");
static_assert(offsetof(Apps_BGetDLCDataByIndex, Name_0) == 0x000010, "Member 'Apps_BGetDLCDataByIndex::Name_0' has a wrong offset!");
static_assert(offsetof(Apps_BGetDLCDataByIndex, ReturnValue) == 0x000020, "Member 'Apps_BGetDLCDataByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsAppInstalled
// 0x0008 (0x0008 - 0x0000)
struct Apps_BIsAppInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_BIsAppInstalled) == 0x000004, "Wrong alignment on Apps_BIsAppInstalled");
static_assert(sizeof(Apps_BIsAppInstalled) == 0x000008, "Wrong size on Apps_BIsAppInstalled");
static_assert(offsetof(Apps_BIsAppInstalled, AppID) == 0x000000, "Member 'Apps_BIsAppInstalled::AppID' has a wrong offset!");
static_assert(offsetof(Apps_BIsAppInstalled, ReturnValue) == 0x000004, "Member 'Apps_BIsAppInstalled::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsCybercafe
// 0x0001 (0x0001 - 0x0000)
struct Apps_BIsCybercafe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_BIsCybercafe) == 0x000001, "Wrong alignment on Apps_BIsCybercafe");
static_assert(sizeof(Apps_BIsCybercafe) == 0x000001, "Wrong size on Apps_BIsCybercafe");
static_assert(offsetof(Apps_BIsCybercafe, ReturnValue) == 0x000000, "Member 'Apps_BIsCybercafe::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsDlcInstalled
// 0x0008 (0x0008 - 0x0000)
struct Apps_BIsDlcInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_BIsDlcInstalled) == 0x000004, "Wrong alignment on Apps_BIsDlcInstalled");
static_assert(sizeof(Apps_BIsDlcInstalled) == 0x000008, "Wrong size on Apps_BIsDlcInstalled");
static_assert(offsetof(Apps_BIsDlcInstalled, AppID) == 0x000000, "Member 'Apps_BIsDlcInstalled::AppID' has a wrong offset!");
static_assert(offsetof(Apps_BIsDlcInstalled, ReturnValue) == 0x000004, "Member 'Apps_BIsDlcInstalled::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsLowViolence
// 0x0001 (0x0001 - 0x0000)
struct Apps_BIsLowViolence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_BIsLowViolence) == 0x000001, "Wrong alignment on Apps_BIsLowViolence");
static_assert(sizeof(Apps_BIsLowViolence) == 0x000001, "Wrong size on Apps_BIsLowViolence");
static_assert(offsetof(Apps_BIsLowViolence, ReturnValue) == 0x000000, "Member 'Apps_BIsLowViolence::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsSubscribed
// 0x0001 (0x0001 - 0x0000)
struct Apps_BIsSubscribed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_BIsSubscribed) == 0x000001, "Wrong alignment on Apps_BIsSubscribed");
static_assert(sizeof(Apps_BIsSubscribed) == 0x000001, "Wrong size on Apps_BIsSubscribed");
static_assert(offsetof(Apps_BIsSubscribed, ReturnValue) == 0x000000, "Member 'Apps_BIsSubscribed::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsSubscribedApp
// 0x0008 (0x0008 - 0x0000)
struct Apps_BIsSubscribedApp final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_BIsSubscribedApp) == 0x000004, "Wrong alignment on Apps_BIsSubscribedApp");
static_assert(sizeof(Apps_BIsSubscribedApp) == 0x000008, "Wrong size on Apps_BIsSubscribedApp");
static_assert(offsetof(Apps_BIsSubscribedApp, AppID) == 0x000000, "Member 'Apps_BIsSubscribedApp::AppID' has a wrong offset!");
static_assert(offsetof(Apps_BIsSubscribedApp, ReturnValue) == 0x000004, "Member 'Apps_BIsSubscribedApp::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsSubscribedFromFamilySharing
// 0x0001 (0x0001 - 0x0000)
struct Apps_BIsSubscribedFromFamilySharing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_BIsSubscribedFromFamilySharing) == 0x000001, "Wrong alignment on Apps_BIsSubscribedFromFamilySharing");
static_assert(sizeof(Apps_BIsSubscribedFromFamilySharing) == 0x000001, "Wrong size on Apps_BIsSubscribedFromFamilySharing");
static_assert(offsetof(Apps_BIsSubscribedFromFamilySharing, ReturnValue) == 0x000000, "Member 'Apps_BIsSubscribedFromFamilySharing::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsSubscribedFromFreeWeekend
// 0x0001 (0x0001 - 0x0000)
struct Apps_BIsSubscribedFromFreeWeekend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_BIsSubscribedFromFreeWeekend) == 0x000001, "Wrong alignment on Apps_BIsSubscribedFromFreeWeekend");
static_assert(sizeof(Apps_BIsSubscribedFromFreeWeekend) == 0x000001, "Wrong size on Apps_BIsSubscribedFromFreeWeekend");
static_assert(offsetof(Apps_BIsSubscribedFromFreeWeekend, ReturnValue) == 0x000000, "Member 'Apps_BIsSubscribedFromFreeWeekend::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsTimedTrial
// 0x000C (0x000C - 0x0000)
struct Apps_BIsTimedTrial final
{
public:
	int32                                         SecondsAllowed;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsPlayed;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_BIsTimedTrial) == 0x000004, "Wrong alignment on Apps_BIsTimedTrial");
static_assert(sizeof(Apps_BIsTimedTrial) == 0x00000C, "Wrong size on Apps_BIsTimedTrial");
static_assert(offsetof(Apps_BIsTimedTrial, SecondsAllowed) == 0x000000, "Member 'Apps_BIsTimedTrial::SecondsAllowed' has a wrong offset!");
static_assert(offsetof(Apps_BIsTimedTrial, SecondsPlayed) == 0x000004, "Member 'Apps_BIsTimedTrial::SecondsPlayed' has a wrong offset!");
static_assert(offsetof(Apps_BIsTimedTrial, ReturnValue) == 0x000008, "Member 'Apps_BIsTimedTrial::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.BIsVACBanned
// 0x0001 (0x0001 - 0x0000)
struct Apps_BIsVACBanned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_BIsVACBanned) == 0x000001, "Wrong alignment on Apps_BIsVACBanned");
static_assert(sizeof(Apps_BIsVACBanned) == 0x000001, "Wrong size on Apps_BIsVACBanned");
static_assert(offsetof(Apps_BIsVACBanned, ReturnValue) == 0x000000, "Member 'Apps_BIsVACBanned::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetAppBuildId
// 0x0004 (0x0004 - 0x0000)
struct Apps_GetAppBuildId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetAppBuildId) == 0x000004, "Wrong alignment on Apps_GetAppBuildId");
static_assert(sizeof(Apps_GetAppBuildId) == 0x000004, "Wrong size on Apps_GetAppBuildId");
static_assert(offsetof(Apps_GetAppBuildId, ReturnValue) == 0x000000, "Member 'Apps_GetAppBuildId::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetAppInstallDir
// 0x0020 (0x0020 - 0x0000)
struct Apps_GetAppInstallDir final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Folder;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_GetAppInstallDir) == 0x000008, "Wrong alignment on Apps_GetAppInstallDir");
static_assert(sizeof(Apps_GetAppInstallDir) == 0x000020, "Wrong size on Apps_GetAppInstallDir");
static_assert(offsetof(Apps_GetAppInstallDir, AppID) == 0x000000, "Member 'Apps_GetAppInstallDir::AppID' has a wrong offset!");
static_assert(offsetof(Apps_GetAppInstallDir, Folder) == 0x000008, "Member 'Apps_GetAppInstallDir::Folder' has a wrong offset!");
static_assert(offsetof(Apps_GetAppInstallDir, ReturnValue) == 0x000018, "Member 'Apps_GetAppInstallDir::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetAppOwner
// 0x0008 (0x0008 - 0x0000)
struct Apps_GetAppOwner final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetAppOwner) == 0x000008, "Wrong alignment on Apps_GetAppOwner");
static_assert(sizeof(Apps_GetAppOwner) == 0x000008, "Wrong size on Apps_GetAppOwner");
static_assert(offsetof(Apps_GetAppOwner, ReturnValue) == 0x000000, "Member 'Apps_GetAppOwner::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetAvailableGameLanguages
// 0x0010 (0x0010 - 0x0000)
struct Apps_GetAvailableGameLanguages final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetAvailableGameLanguages) == 0x000008, "Wrong alignment on Apps_GetAvailableGameLanguages");
static_assert(sizeof(Apps_GetAvailableGameLanguages) == 0x000010, "Wrong size on Apps_GetAvailableGameLanguages");
static_assert(offsetof(Apps_GetAvailableGameLanguages, ReturnValue) == 0x000000, "Member 'Apps_GetAvailableGameLanguages::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetCurrentBetaName
// 0x0018 (0x0018 - 0x0000)
struct Apps_GetCurrentBetaName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_GetCurrentBetaName) == 0x000008, "Wrong alignment on Apps_GetCurrentBetaName");
static_assert(sizeof(Apps_GetCurrentBetaName) == 0x000018, "Wrong size on Apps_GetCurrentBetaName");
static_assert(offsetof(Apps_GetCurrentBetaName, Name_0) == 0x000000, "Member 'Apps_GetCurrentBetaName::Name_0' has a wrong offset!");
static_assert(offsetof(Apps_GetCurrentBetaName, ReturnValue) == 0x000010, "Member 'Apps_GetCurrentBetaName::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetCurrentGameLanguage
// 0x0010 (0x0010 - 0x0000)
struct Apps_GetCurrentGameLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetCurrentGameLanguage) == 0x000008, "Wrong alignment on Apps_GetCurrentGameLanguage");
static_assert(sizeof(Apps_GetCurrentGameLanguage) == 0x000010, "Wrong size on Apps_GetCurrentGameLanguage");
static_assert(offsetof(Apps_GetCurrentGameLanguage, ReturnValue) == 0x000000, "Member 'Apps_GetCurrentGameLanguage::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetDLCCount
// 0x0004 (0x0004 - 0x0000)
struct Apps_GetDLCCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetDLCCount) == 0x000004, "Wrong alignment on Apps_GetDLCCount");
static_assert(sizeof(Apps_GetDLCCount) == 0x000004, "Wrong size on Apps_GetDLCCount");
static_assert(offsetof(Apps_GetDLCCount, ReturnValue) == 0x000000, "Member 'Apps_GetDLCCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetDlcDownloadProgress
// 0x0010 (0x0010 - 0x0000)
struct Apps_GetDlcDownloadProgress final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesDownloaded;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesTotal;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_GetDlcDownloadProgress) == 0x000004, "Wrong alignment on Apps_GetDlcDownloadProgress");
static_assert(sizeof(Apps_GetDlcDownloadProgress) == 0x000010, "Wrong size on Apps_GetDlcDownloadProgress");
static_assert(offsetof(Apps_GetDlcDownloadProgress, AppID) == 0x000000, "Member 'Apps_GetDlcDownloadProgress::AppID' has a wrong offset!");
static_assert(offsetof(Apps_GetDlcDownloadProgress, BytesDownloaded) == 0x000004, "Member 'Apps_GetDlcDownloadProgress::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(Apps_GetDlcDownloadProgress, BytesTotal) == 0x000008, "Member 'Apps_GetDlcDownloadProgress::BytesTotal' has a wrong offset!");
static_assert(offsetof(Apps_GetDlcDownloadProgress, ReturnValue) == 0x00000C, "Member 'Apps_GetDlcDownloadProgress::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetEarliestPurchaseUnixTime
// 0x0008 (0x0008 - 0x0000)
struct Apps_GetEarliestPurchaseUnixTime final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetEarliestPurchaseUnixTime) == 0x000004, "Wrong alignment on Apps_GetEarliestPurchaseUnixTime");
static_assert(sizeof(Apps_GetEarliestPurchaseUnixTime) == 0x000008, "Wrong size on Apps_GetEarliestPurchaseUnixTime");
static_assert(offsetof(Apps_GetEarliestPurchaseUnixTime, AppID) == 0x000000, "Member 'Apps_GetEarliestPurchaseUnixTime::AppID' has a wrong offset!");
static_assert(offsetof(Apps_GetEarliestPurchaseUnixTime, ReturnValue) == 0x000004, "Member 'Apps_GetEarliestPurchaseUnixTime::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetInstalledDepots
// 0x0020 (0x0020 - 0x0000)
struct Apps_GetInstalledDepots final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDepots;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Depots;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_GetInstalledDepots) == 0x000008, "Wrong alignment on Apps_GetInstalledDepots");
static_assert(sizeof(Apps_GetInstalledDepots) == 0x000020, "Wrong size on Apps_GetInstalledDepots");
static_assert(offsetof(Apps_GetInstalledDepots, AppID) == 0x000000, "Member 'Apps_GetInstalledDepots::AppID' has a wrong offset!");
static_assert(offsetof(Apps_GetInstalledDepots, MaxDepots) == 0x000004, "Member 'Apps_GetInstalledDepots::MaxDepots' has a wrong offset!");
static_assert(offsetof(Apps_GetInstalledDepots, Depots) == 0x000008, "Member 'Apps_GetInstalledDepots::Depots' has a wrong offset!");
static_assert(offsetof(Apps_GetInstalledDepots, ReturnValue) == 0x000018, "Member 'Apps_GetInstalledDepots::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetLaunchCommandLine
// 0x0018 (0x0018 - 0x0000)
struct Apps_GetLaunchCommandLine final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Apps_GetLaunchCommandLine) == 0x000008, "Wrong alignment on Apps_GetLaunchCommandLine");
static_assert(sizeof(Apps_GetLaunchCommandLine) == 0x000018, "Wrong size on Apps_GetLaunchCommandLine");
static_assert(offsetof(Apps_GetLaunchCommandLine, CommandLine) == 0x000000, "Member 'Apps_GetLaunchCommandLine::CommandLine' has a wrong offset!");
static_assert(offsetof(Apps_GetLaunchCommandLine, ReturnValue) == 0x000010, "Member 'Apps_GetLaunchCommandLine::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.GetLaunchQueryParam
// 0x0020 (0x0020 - 0x0000)
struct Apps_GetLaunchQueryParam final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetLaunchQueryParam) == 0x000008, "Wrong alignment on Apps_GetLaunchQueryParam");
static_assert(sizeof(Apps_GetLaunchQueryParam) == 0x000020, "Wrong size on Apps_GetLaunchQueryParam");
static_assert(offsetof(Apps_GetLaunchQueryParam, Key) == 0x000000, "Member 'Apps_GetLaunchQueryParam::Key' has a wrong offset!");
static_assert(offsetof(Apps_GetLaunchQueryParam, ReturnValue) == 0x000010, "Member 'Apps_GetLaunchQueryParam::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.InstallDLC
// 0x0004 (0x0004 - 0x0000)
struct Apps_InstallDLC final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_InstallDLC) == 0x000004, "Wrong alignment on Apps_InstallDLC");
static_assert(sizeof(Apps_InstallDLC) == 0x000004, "Wrong size on Apps_InstallDLC");
static_assert(offsetof(Apps_InstallDLC, AppID) == 0x000000, "Member 'Apps_InstallDLC::AppID' has a wrong offset!");

// Function SteamCore.Apps.MarkContentCorrupt
// 0x0002 (0x0002 - 0x0000)
struct Apps_MarkContentCorrupt final
{
public:
	bool                                          bMissingFilesOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_MarkContentCorrupt) == 0x000001, "Wrong alignment on Apps_MarkContentCorrupt");
static_assert(sizeof(Apps_MarkContentCorrupt) == 0x000002, "Wrong size on Apps_MarkContentCorrupt");
static_assert(offsetof(Apps_MarkContentCorrupt, bMissingFilesOnly) == 0x000000, "Member 'Apps_MarkContentCorrupt::bMissingFilesOnly' has a wrong offset!");
static_assert(offsetof(Apps_MarkContentCorrupt, ReturnValue) == 0x000001, "Member 'Apps_MarkContentCorrupt::ReturnValue' has a wrong offset!");

// Function SteamCore.Apps.UninstallDLC
// 0x0004 (0x0004 - 0x0000)
struct Apps_UninstallDLC final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_UninstallDLC) == 0x000004, "Wrong alignment on Apps_UninstallDLC");
static_assert(sizeof(Apps_UninstallDLC) == 0x000004, "Wrong size on Apps_UninstallDLC");
static_assert(offsetof(Apps_UninstallDLC, AppID) == 0x000000, "Member 'Apps_UninstallDLC::AppID' has a wrong offset!");

// Function SteamCore.Apps.GetFileDetails
// 0x0020 (0x0020 - 0x0000)
struct Apps_GetFileDetails final
{
public:
	TDelegate<void(struct FFileDetailsResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Apps_GetFileDetails) == 0x000008, "Wrong alignment on Apps_GetFileDetails");
static_assert(sizeof(Apps_GetFileDetails) == 0x000020, "Wrong size on Apps_GetFileDetails");
static_assert(offsetof(Apps_GetFileDetails, Callback) == 0x000000, "Member 'Apps_GetFileDetails::Callback' has a wrong offset!");
static_assert(offsetof(Apps_GetFileDetails, Filename) == 0x000010, "Member 'Apps_GetFileDetails::Filename' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSendQueryUGCRequest.SendQueryUGCRequestAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionSendQueryUGCRequest* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, Handle) == 0x000008, "Member 'SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::Handle' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, Timeout) == 0x000010, "Member 'SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSendQueryUGCRequest.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback final
{
public:
	struct FSteamUGCQueryCompleted                Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUGCAsyncActionSendQueryUGCRequest_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionAddAppDependency.AddAppDependencyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreUGCAsyncActionAddAppDependency* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync, AppID) == 0x000010, "Member 'SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync, Timeout) == 0x000014, "Member 'SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionAddAppDependency_AddAppDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionAddAppDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionAddAppDependency_HandleCallback final
{
public:
	struct FAddAppDependencyResult                Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionAddAppDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionAddAppDependency_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionAddAppDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionAddAppDependency_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionAddAppDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionAddAppDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddAppDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUGCAsyncActionAddAppDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreAppsAsyncActionGetFileDetails.GetFileDetailsAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreAppsAsyncActionGetFileDetails* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync) == 0x000028, "Wrong size on SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync, Filename) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync::Filename' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync, Timeout) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync, ReturnValue) == 0x000020, "Member 'SteamCoreAppsAsyncActionGetFileDetails_GetFileDetailsAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreAppsAsyncActionGetFileDetails.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreAppsAsyncActionGetFileDetails_HandleCallback final
{
public:
	struct FFileDetailsResult                     Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreAppsAsyncActionGetFileDetails_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetFileDetails_HandleCallback");
static_assert(sizeof(SteamCoreAppsAsyncActionGetFileDetails_HandleCallback) == 0x000030, "Wrong size on SteamCoreAppsAsyncActionGetFileDetails_HandleCallback");
static_assert(offsetof(SteamCoreAppsAsyncActionGetFileDetails_HandleCallback, Data) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetFileDetails_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetFileDetails_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreAppsAsyncActionGetFileDetails_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.Friends.ActivateGameOverlay
// 0x0010 (0x0010 - 0x0000)
struct Friends_ActivateGameOverlay final
{
public:
	class FString                                 Dialog;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_ActivateGameOverlay) == 0x000008, "Wrong alignment on Friends_ActivateGameOverlay");
static_assert(sizeof(Friends_ActivateGameOverlay) == 0x000010, "Wrong size on Friends_ActivateGameOverlay");
static_assert(offsetof(Friends_ActivateGameOverlay, Dialog) == 0x000000, "Member 'Friends_ActivateGameOverlay::Dialog' has a wrong offset!");

// Function SteamCore.Friends.ActivateGameOverlayInvitedialog
// 0x0008 (0x0008 - 0x0000)
struct Friends_ActivateGameOverlayInvitedialog final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_ActivateGameOverlayInvitedialog) == 0x000008, "Wrong alignment on Friends_ActivateGameOverlayInvitedialog");
static_assert(sizeof(Friends_ActivateGameOverlayInvitedialog) == 0x000008, "Wrong size on Friends_ActivateGameOverlayInvitedialog");
static_assert(offsetof(Friends_ActivateGameOverlayInvitedialog, SteamIDLobby) == 0x000000, "Member 'Friends_ActivateGameOverlayInvitedialog::SteamIDLobby' has a wrong offset!");

// Function SteamCore.Friends.ActivateGameOverlayInviteDialogConnectString
// 0x0010 (0x0010 - 0x0000)
struct Friends_ActivateGameOverlayInviteDialogConnectString final
{
public:
	class FString                                 ConnectString;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_ActivateGameOverlayInviteDialogConnectString) == 0x000008, "Wrong alignment on Friends_ActivateGameOverlayInviteDialogConnectString");
static_assert(sizeof(Friends_ActivateGameOverlayInviteDialogConnectString) == 0x000010, "Wrong size on Friends_ActivateGameOverlayInviteDialogConnectString");
static_assert(offsetof(Friends_ActivateGameOverlayInviteDialogConnectString, ConnectString) == 0x000000, "Member 'Friends_ActivateGameOverlayInviteDialogConnectString::ConnectString' has a wrong offset!");

// Function SteamCore.Friends.ActivateGameOverlayToStore
// 0x0008 (0x0008 - 0x0000)
struct Friends_ActivateGameOverlayToStore final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamOverlayToStoreFlag                      Flag;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_ActivateGameOverlayToStore) == 0x000004, "Wrong alignment on Friends_ActivateGameOverlayToStore");
static_assert(sizeof(Friends_ActivateGameOverlayToStore) == 0x000008, "Wrong size on Friends_ActivateGameOverlayToStore");
static_assert(offsetof(Friends_ActivateGameOverlayToStore, AppID) == 0x000000, "Member 'Friends_ActivateGameOverlayToStore::AppID' has a wrong offset!");
static_assert(offsetof(Friends_ActivateGameOverlayToStore, Flag) == 0x000004, "Member 'Friends_ActivateGameOverlayToStore::Flag' has a wrong offset!");

// Function SteamCore.Friends.ActivateGameOverlayToUser
// 0x0018 (0x0018 - 0x0000)
struct Friends_ActivateGameOverlayToUser final
{
public:
	class FString                                 Dialog;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_ActivateGameOverlayToUser) == 0x000008, "Wrong alignment on Friends_ActivateGameOverlayToUser");
static_assert(sizeof(Friends_ActivateGameOverlayToUser) == 0x000018, "Wrong size on Friends_ActivateGameOverlayToUser");
static_assert(offsetof(Friends_ActivateGameOverlayToUser, Dialog) == 0x000000, "Member 'Friends_ActivateGameOverlayToUser::Dialog' has a wrong offset!");
static_assert(offsetof(Friends_ActivateGameOverlayToUser, SteamID) == 0x000010, "Member 'Friends_ActivateGameOverlayToUser::SteamID' has a wrong offset!");

// Function SteamCore.Friends.ActivateGameOverlayToWebPage
// 0x0018 (0x0018 - 0x0000)
struct Friends_ActivateGameOverlayToWebPage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamActivateGameOverlayToWebPageMode        Mode;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_ActivateGameOverlayToWebPage) == 0x000008, "Wrong alignment on Friends_ActivateGameOverlayToWebPage");
static_assert(sizeof(Friends_ActivateGameOverlayToWebPage) == 0x000018, "Wrong size on Friends_ActivateGameOverlayToWebPage");
static_assert(offsetof(Friends_ActivateGameOverlayToWebPage, URL) == 0x000000, "Member 'Friends_ActivateGameOverlayToWebPage::URL' has a wrong offset!");
static_assert(offsetof(Friends_ActivateGameOverlayToWebPage, Mode) == 0x000010, "Member 'Friends_ActivateGameOverlayToWebPage::Mode' has a wrong offset!");

// Function SteamCore.Friends.CloseClanChatWindowInSteam
// 0x0010 (0x0010 - 0x0000)
struct Friends_CloseClanChatWindowInSteam final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_CloseClanChatWindowInSteam) == 0x000008, "Wrong alignment on Friends_CloseClanChatWindowInSteam");
static_assert(sizeof(Friends_CloseClanChatWindowInSteam) == 0x000010, "Wrong size on Friends_CloseClanChatWindowInSteam");
static_assert(offsetof(Friends_CloseClanChatWindowInSteam, SteamIDClanChat) == 0x000000, "Member 'Friends_CloseClanChatWindowInSteam::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(Friends_CloseClanChatWindowInSteam, ReturnValue) == 0x000008, "Member 'Friends_CloseClanChatWindowInSteam::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetChatMemberByIndex
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetChatMemberByIndex final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         User;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetChatMemberByIndex) == 0x000008, "Wrong alignment on Friends_GetChatMemberByIndex");
static_assert(sizeof(Friends_GetChatMemberByIndex) == 0x000018, "Wrong size on Friends_GetChatMemberByIndex");
static_assert(offsetof(Friends_GetChatMemberByIndex, SteamIDClan) == 0x000000, "Member 'Friends_GetChatMemberByIndex::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetChatMemberByIndex, User) == 0x000008, "Member 'Friends_GetChatMemberByIndex::User' has a wrong offset!");
static_assert(offsetof(Friends_GetChatMemberByIndex, ReturnValue) == 0x000010, "Member 'Friends_GetChatMemberByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanActivityCounts
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetClanActivityCounts final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Online;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGame;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chatting;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetClanActivityCounts) == 0x000008, "Wrong alignment on Friends_GetClanActivityCounts");
static_assert(sizeof(Friends_GetClanActivityCounts) == 0x000018, "Wrong size on Friends_GetClanActivityCounts");
static_assert(offsetof(Friends_GetClanActivityCounts, SteamIDClan) == 0x000000, "Member 'Friends_GetClanActivityCounts::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanActivityCounts, Online) == 0x000008, "Member 'Friends_GetClanActivityCounts::Online' has a wrong offset!");
static_assert(offsetof(Friends_GetClanActivityCounts, InGame) == 0x00000C, "Member 'Friends_GetClanActivityCounts::InGame' has a wrong offset!");
static_assert(offsetof(Friends_GetClanActivityCounts, Chatting) == 0x000010, "Member 'Friends_GetClanActivityCounts::Chatting' has a wrong offset!");
static_assert(offsetof(Friends_GetClanActivityCounts, ReturnValue) == 0x000014, "Member 'Friends_GetClanActivityCounts::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanByIndex
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetClanByIndex final
{
public:
	int32                                         Clan;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetClanByIndex) == 0x000008, "Wrong alignment on Friends_GetClanByIndex");
static_assert(sizeof(Friends_GetClanByIndex) == 0x000010, "Wrong size on Friends_GetClanByIndex");
static_assert(offsetof(Friends_GetClanByIndex, Clan) == 0x000000, "Member 'Friends_GetClanByIndex::Clan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanByIndex, ReturnValue) == 0x000008, "Member 'Friends_GetClanByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanChatMemberCount
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetClanChatMemberCount final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetClanChatMemberCount) == 0x000008, "Wrong alignment on Friends_GetClanChatMemberCount");
static_assert(sizeof(Friends_GetClanChatMemberCount) == 0x000010, "Wrong size on Friends_GetClanChatMemberCount");
static_assert(offsetof(Friends_GetClanChatMemberCount, SteamIDClan) == 0x000000, "Member 'Friends_GetClanChatMemberCount::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanChatMemberCount, ReturnValue) == 0x000008, "Member 'Friends_GetClanChatMemberCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanChatMessage
// 0x0038 (0x0038 - 0x0000)
struct Friends_GetClanChatMessage final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatEntryType                           ChatEntryType;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDChatter;                                    // 0x0028(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetClanChatMessage) == 0x000008, "Wrong alignment on Friends_GetClanChatMessage");
static_assert(sizeof(Friends_GetClanChatMessage) == 0x000038, "Wrong size on Friends_GetClanChatMessage");
static_assert(offsetof(Friends_GetClanChatMessage, SteamIDClanChat) == 0x000000, "Member 'Friends_GetClanChatMessage::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(Friends_GetClanChatMessage, MessageID) == 0x000008, "Member 'Friends_GetClanChatMessage::MessageID' has a wrong offset!");
static_assert(offsetof(Friends_GetClanChatMessage, Text) == 0x000010, "Member 'Friends_GetClanChatMessage::Text' has a wrong offset!");
static_assert(offsetof(Friends_GetClanChatMessage, ChatEntryType) == 0x000020, "Member 'Friends_GetClanChatMessage::ChatEntryType' has a wrong offset!");
static_assert(offsetof(Friends_GetClanChatMessage, SteamIDChatter) == 0x000028, "Member 'Friends_GetClanChatMessage::SteamIDChatter' has a wrong offset!");
static_assert(offsetof(Friends_GetClanChatMessage, ReturnValue) == 0x000030, "Member 'Friends_GetClanChatMessage::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanCount
// 0x0004 (0x0004 - 0x0000)
struct Friends_GetClanCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetClanCount) == 0x000004, "Wrong alignment on Friends_GetClanCount");
static_assert(sizeof(Friends_GetClanCount) == 0x000004, "Wrong size on Friends_GetClanCount");
static_assert(offsetof(Friends_GetClanCount, ReturnValue) == 0x000000, "Member 'Friends_GetClanCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanName
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetClanName final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetClanName) == 0x000008, "Wrong alignment on Friends_GetClanName");
static_assert(sizeof(Friends_GetClanName) == 0x000018, "Wrong size on Friends_GetClanName");
static_assert(offsetof(Friends_GetClanName, SteamIDClan) == 0x000000, "Member 'Friends_GetClanName::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanName, ReturnValue) == 0x000008, "Member 'Friends_GetClanName::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanOfficerByIndex
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetClanOfficerByIndex final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Officer;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetClanOfficerByIndex) == 0x000008, "Wrong alignment on Friends_GetClanOfficerByIndex");
static_assert(sizeof(Friends_GetClanOfficerByIndex) == 0x000018, "Wrong size on Friends_GetClanOfficerByIndex");
static_assert(offsetof(Friends_GetClanOfficerByIndex, SteamIDClan) == 0x000000, "Member 'Friends_GetClanOfficerByIndex::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanOfficerByIndex, Officer) == 0x000008, "Member 'Friends_GetClanOfficerByIndex::Officer' has a wrong offset!");
static_assert(offsetof(Friends_GetClanOfficerByIndex, ReturnValue) == 0x000010, "Member 'Friends_GetClanOfficerByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanOfficerCount
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetClanOfficerCount final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetClanOfficerCount) == 0x000008, "Wrong alignment on Friends_GetClanOfficerCount");
static_assert(sizeof(Friends_GetClanOfficerCount) == 0x000010, "Wrong size on Friends_GetClanOfficerCount");
static_assert(offsetof(Friends_GetClanOfficerCount, SteamIDClan) == 0x000000, "Member 'Friends_GetClanOfficerCount::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanOfficerCount, ReturnValue) == 0x000008, "Member 'Friends_GetClanOfficerCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanOwner
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetClanOwner final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetClanOwner) == 0x000008, "Wrong alignment on Friends_GetClanOwner");
static_assert(sizeof(Friends_GetClanOwner) == 0x000010, "Wrong size on Friends_GetClanOwner");
static_assert(offsetof(Friends_GetClanOwner, SteamIDClan) == 0x000000, "Member 'Friends_GetClanOwner::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanOwner, ReturnValue) == 0x000008, "Member 'Friends_GetClanOwner::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetClanTag
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetClanTag final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetClanTag) == 0x000008, "Wrong alignment on Friends_GetClanTag");
static_assert(sizeof(Friends_GetClanTag) == 0x000018, "Wrong size on Friends_GetClanTag");
static_assert(offsetof(Friends_GetClanTag, SteamIDClan) == 0x000000, "Member 'Friends_GetClanTag::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_GetClanTag, ReturnValue) == 0x000008, "Member 'Friends_GetClanTag::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetCoplayFriend
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetCoplayFriend final
{
public:
	int32                                         CoplayFriend;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetCoplayFriend) == 0x000008, "Wrong alignment on Friends_GetCoplayFriend");
static_assert(sizeof(Friends_GetCoplayFriend) == 0x000010, "Wrong size on Friends_GetCoplayFriend");
static_assert(offsetof(Friends_GetCoplayFriend, CoplayFriend) == 0x000000, "Member 'Friends_GetCoplayFriend::CoplayFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetCoplayFriend, ReturnValue) == 0x000008, "Member 'Friends_GetCoplayFriend::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetCoplayFriendCount
// 0x0004 (0x0004 - 0x0000)
struct Friends_GetCoplayFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetCoplayFriendCount) == 0x000004, "Wrong alignment on Friends_GetCoplayFriendCount");
static_assert(sizeof(Friends_GetCoplayFriendCount) == 0x000004, "Wrong size on Friends_GetCoplayFriendCount");
static_assert(offsetof(Friends_GetCoplayFriendCount, ReturnValue) == 0x000000, "Member 'Friends_GetCoplayFriendCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendByIndex
// 0x0020 (0x0020 - 0x0000)
struct Friends_GetFriendByIndex final
{
public:
	int32                                         Ifriend;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESteamFriendFlags>                     Flags_0;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendByIndex) == 0x000008, "Wrong alignment on Friends_GetFriendByIndex");
static_assert(sizeof(Friends_GetFriendByIndex) == 0x000020, "Wrong size on Friends_GetFriendByIndex");
static_assert(offsetof(Friends_GetFriendByIndex, Ifriend) == 0x000000, "Member 'Friends_GetFriendByIndex::Ifriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendByIndex, Flags_0) == 0x000008, "Member 'Friends_GetFriendByIndex::Flags_0' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendByIndex, ReturnValue) == 0x000018, "Member 'Friends_GetFriendByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendCoplayGame
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetFriendCoplayGame final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendCoplayGame) == 0x000008, "Wrong alignment on Friends_GetFriendCoplayGame");
static_assert(sizeof(Friends_GetFriendCoplayGame) == 0x000010, "Wrong size on Friends_GetFriendCoplayGame");
static_assert(offsetof(Friends_GetFriendCoplayGame, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendCoplayGame::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendCoplayGame, ReturnValue) == 0x000008, "Member 'Friends_GetFriendCoplayGame::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendCoplayTime
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetFriendCoplayTime final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendCoplayTime) == 0x000008, "Wrong alignment on Friends_GetFriendCoplayTime");
static_assert(sizeof(Friends_GetFriendCoplayTime) == 0x000010, "Wrong size on Friends_GetFriendCoplayTime");
static_assert(offsetof(Friends_GetFriendCoplayTime, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendCoplayTime::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendCoplayTime, ReturnValue) == 0x000008, "Member 'Friends_GetFriendCoplayTime::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendCount
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetFriendCount final
{
public:
	TArray<ESteamFriendFlags>                     Flags_0;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendCount) == 0x000008, "Wrong alignment on Friends_GetFriendCount");
static_assert(sizeof(Friends_GetFriendCount) == 0x000018, "Wrong size on Friends_GetFriendCount");
static_assert(offsetof(Friends_GetFriendCount, Flags_0) == 0x000000, "Member 'Friends_GetFriendCount::Flags_0' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendCount, ReturnValue) == 0x000010, "Member 'Friends_GetFriendCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendCountFromSource
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetFriendCountFromSource final
{
public:
	struct FSteamID                               SteamIDSource;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendCountFromSource) == 0x000008, "Wrong alignment on Friends_GetFriendCountFromSource");
static_assert(sizeof(Friends_GetFriendCountFromSource) == 0x000010, "Wrong size on Friends_GetFriendCountFromSource");
static_assert(offsetof(Friends_GetFriendCountFromSource, SteamIDSource) == 0x000000, "Member 'Friends_GetFriendCountFromSource::SteamIDSource' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendCountFromSource, ReturnValue) == 0x000008, "Member 'Friends_GetFriendCountFromSource::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendFromSourceByIndex
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetFriendFromSourceByIndex final
{
public:
	struct FSteamID                               SteamIDSource;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ifriend;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendFromSourceByIndex) == 0x000008, "Wrong alignment on Friends_GetFriendFromSourceByIndex");
static_assert(sizeof(Friends_GetFriendFromSourceByIndex) == 0x000018, "Wrong size on Friends_GetFriendFromSourceByIndex");
static_assert(offsetof(Friends_GetFriendFromSourceByIndex, SteamIDSource) == 0x000000, "Member 'Friends_GetFriendFromSourceByIndex::SteamIDSource' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendFromSourceByIndex, Ifriend) == 0x000008, "Member 'Friends_GetFriendFromSourceByIndex::Ifriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendFromSourceByIndex, ReturnValue) == 0x000010, "Member 'Friends_GetFriendFromSourceByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendGamePlayed
// 0x0038 (0x0038 - 0x0000)
struct Friends_GetFriendGamePlayed final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamGameID                           GameID;                                            // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameIP;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0028(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendGamePlayed) == 0x000008, "Wrong alignment on Friends_GetFriendGamePlayed");
static_assert(sizeof(Friends_GetFriendGamePlayed) == 0x000038, "Wrong size on Friends_GetFriendGamePlayed");
static_assert(offsetof(Friends_GetFriendGamePlayed, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendGamePlayed::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendGamePlayed, GameID) == 0x000008, "Member 'Friends_GetFriendGamePlayed::GameID' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendGamePlayed, GameIP) == 0x000010, "Member 'Friends_GetFriendGamePlayed::GameIP' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendGamePlayed, ConnectionPort) == 0x000020, "Member 'Friends_GetFriendGamePlayed::ConnectionPort' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendGamePlayed, QueryPort) == 0x000024, "Member 'Friends_GetFriendGamePlayed::QueryPort' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendGamePlayed, SteamIDLobby) == 0x000028, "Member 'Friends_GetFriendGamePlayed::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendGamePlayed, ReturnValue) == 0x000030, "Member 'Friends_GetFriendGamePlayed::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendMessage
// 0x0028 (0x0028 - 0x0000)
struct Friends_GetFriendMessage final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatEntryType                           ChatEntryType;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendMessage) == 0x000008, "Wrong alignment on Friends_GetFriendMessage");
static_assert(sizeof(Friends_GetFriendMessage) == 0x000028, "Wrong size on Friends_GetFriendMessage");
static_assert(offsetof(Friends_GetFriendMessage, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendMessage::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendMessage, MessageID) == 0x000008, "Member 'Friends_GetFriendMessage::MessageID' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendMessage, Text) == 0x000010, "Member 'Friends_GetFriendMessage::Text' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendMessage, ChatEntryType) == 0x000020, "Member 'Friends_GetFriendMessage::ChatEntryType' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendMessage, ReturnValue) == 0x000024, "Member 'Friends_GetFriendMessage::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendPersonaName
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetFriendPersonaName final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendPersonaName) == 0x000008, "Wrong alignment on Friends_GetFriendPersonaName");
static_assert(sizeof(Friends_GetFriendPersonaName) == 0x000018, "Wrong size on Friends_GetFriendPersonaName");
static_assert(offsetof(Friends_GetFriendPersonaName, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendPersonaName::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendPersonaName, ReturnValue) == 0x000008, "Member 'Friends_GetFriendPersonaName::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendPersonaNameHistory
// 0x0020 (0x0020 - 0x0000)
struct Friends_GetFriendPersonaNameHistory final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonaName;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendPersonaNameHistory) == 0x000008, "Wrong alignment on Friends_GetFriendPersonaNameHistory");
static_assert(sizeof(Friends_GetFriendPersonaNameHistory) == 0x000020, "Wrong size on Friends_GetFriendPersonaNameHistory");
static_assert(offsetof(Friends_GetFriendPersonaNameHistory, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendPersonaNameHistory::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendPersonaNameHistory, PersonaName) == 0x000008, "Member 'Friends_GetFriendPersonaNameHistory::PersonaName' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendPersonaNameHistory, ReturnValue) == 0x000010, "Member 'Friends_GetFriendPersonaNameHistory::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendPersonaState
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetFriendPersonaState final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamPersonaState                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendPersonaState) == 0x000008, "Wrong alignment on Friends_GetFriendPersonaState");
static_assert(sizeof(Friends_GetFriendPersonaState) == 0x000010, "Wrong size on Friends_GetFriendPersonaState");
static_assert(offsetof(Friends_GetFriendPersonaState, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendPersonaState::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendPersonaState, ReturnValue) == 0x000008, "Member 'Friends_GetFriendPersonaState::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendRelationship
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetFriendRelationship final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamFriendRelationship                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendRelationship) == 0x000008, "Wrong alignment on Friends_GetFriendRelationship");
static_assert(sizeof(Friends_GetFriendRelationship) == 0x000010, "Wrong size on Friends_GetFriendRelationship");
static_assert(offsetof(Friends_GetFriendRelationship, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendRelationship::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendRelationship, ReturnValue) == 0x000008, "Member 'Friends_GetFriendRelationship::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendRichPresence
// 0x0028 (0x0028 - 0x0000)
struct Friends_GetFriendRichPresence final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendRichPresence) == 0x000008, "Wrong alignment on Friends_GetFriendRichPresence");
static_assert(sizeof(Friends_GetFriendRichPresence) == 0x000028, "Wrong size on Friends_GetFriendRichPresence");
static_assert(offsetof(Friends_GetFriendRichPresence, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendRichPresence::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendRichPresence, Key) == 0x000008, "Member 'Friends_GetFriendRichPresence::Key' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendRichPresence, ReturnValue) == 0x000018, "Member 'Friends_GetFriendRichPresence::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendRichPresenceKeyByIndex
// 0x0020 (0x0020 - 0x0000)
struct Friends_GetFriendRichPresenceKeyByIndex final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendRichPresenceKeyByIndex) == 0x000008, "Wrong alignment on Friends_GetFriendRichPresenceKeyByIndex");
static_assert(sizeof(Friends_GetFriendRichPresenceKeyByIndex) == 0x000020, "Wrong size on Friends_GetFriendRichPresenceKeyByIndex");
static_assert(offsetof(Friends_GetFriendRichPresenceKeyByIndex, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendRichPresenceKeyByIndex::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendRichPresenceKeyByIndex, Key) == 0x000008, "Member 'Friends_GetFriendRichPresenceKeyByIndex::Key' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendRichPresenceKeyByIndex, ReturnValue) == 0x000010, "Member 'Friends_GetFriendRichPresenceKeyByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendRichPresenceKeyCount
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetFriendRichPresenceKeyCount final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendRichPresenceKeyCount) == 0x000008, "Wrong alignment on Friends_GetFriendRichPresenceKeyCount");
static_assert(sizeof(Friends_GetFriendRichPresenceKeyCount) == 0x000010, "Wrong size on Friends_GetFriendRichPresenceKeyCount");
static_assert(offsetof(Friends_GetFriendRichPresenceKeyCount, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendRichPresenceKeyCount::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendRichPresenceKeyCount, ReturnValue) == 0x000008, "Member 'Friends_GetFriendRichPresenceKeyCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendsGroupCount
// 0x0004 (0x0004 - 0x0000)
struct Friends_GetFriendsGroupCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendsGroupCount) == 0x000004, "Wrong alignment on Friends_GetFriendsGroupCount");
static_assert(sizeof(Friends_GetFriendsGroupCount) == 0x000004, "Wrong size on Friends_GetFriendsGroupCount");
static_assert(offsetof(Friends_GetFriendsGroupCount, ReturnValue) == 0x000000, "Member 'Friends_GetFriendsGroupCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendsGroupIDByIndex
// 0x0008 (0x0008 - 0x0000)
struct Friends_GetFriendsGroupIDByIndex final
{
public:
	int32                                         FriendGroup;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamFriendsGroupID                   ReturnValue;                                       // 0x0004(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendsGroupIDByIndex) == 0x000004, "Wrong alignment on Friends_GetFriendsGroupIDByIndex");
static_assert(sizeof(Friends_GetFriendsGroupIDByIndex) == 0x000008, "Wrong size on Friends_GetFriendsGroupIDByIndex");
static_assert(offsetof(Friends_GetFriendsGroupIDByIndex, FriendGroup) == 0x000000, "Member 'Friends_GetFriendsGroupIDByIndex::FriendGroup' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendsGroupIDByIndex, ReturnValue) == 0x000004, "Member 'Friends_GetFriendsGroupIDByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendsGroupMembersCount
// 0x0008 (0x0008 - 0x0000)
struct Friends_GetFriendsGroupMembersCount final
{
public:
	struct FSteamFriendsGroupID                   FriendsGroupID;                                    // 0x0000(0x0002)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendsGroupMembersCount) == 0x000004, "Wrong alignment on Friends_GetFriendsGroupMembersCount");
static_assert(sizeof(Friends_GetFriendsGroupMembersCount) == 0x000008, "Wrong size on Friends_GetFriendsGroupMembersCount");
static_assert(offsetof(Friends_GetFriendsGroupMembersCount, FriendsGroupID) == 0x000000, "Member 'Friends_GetFriendsGroupMembersCount::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendsGroupMembersCount, ReturnValue) == 0x000004, "Member 'Friends_GetFriendsGroupMembersCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendsGroupMembersList
// 0x0020 (0x0020 - 0x0000)
struct Friends_GetFriendsGroupMembersList final
{
public:
	struct FSteamFriendsGroupID                   FriendsGroupID;                                    // 0x0000(0x0002)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamID>                       SteamIDMembers;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MembersCount;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendsGroupMembersList) == 0x000008, "Wrong alignment on Friends_GetFriendsGroupMembersList");
static_assert(sizeof(Friends_GetFriendsGroupMembersList) == 0x000020, "Wrong size on Friends_GetFriendsGroupMembersList");
static_assert(offsetof(Friends_GetFriendsGroupMembersList, FriendsGroupID) == 0x000000, "Member 'Friends_GetFriendsGroupMembersList::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendsGroupMembersList, SteamIDMembers) == 0x000008, "Member 'Friends_GetFriendsGroupMembersList::SteamIDMembers' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendsGroupMembersList, MembersCount) == 0x000018, "Member 'Friends_GetFriendsGroupMembersList::MembersCount' has a wrong offset!");

// Function SteamCore.Friends.GetFriendsGroupName
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetFriendsGroupName final
{
public:
	struct FSteamFriendsGroupID                   FriendsGroupID;                                    // 0x0000(0x0002)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFriendsGroupName) == 0x000008, "Wrong alignment on Friends_GetFriendsGroupName");
static_assert(sizeof(Friends_GetFriendsGroupName) == 0x000018, "Wrong size on Friends_GetFriendsGroupName");
static_assert(offsetof(Friends_GetFriendsGroupName, FriendsGroupID) == 0x000000, "Member 'Friends_GetFriendsGroupName::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendsGroupName, ReturnValue) == 0x000008, "Member 'Friends_GetFriendsGroupName::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetFriendSteamLevel
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetFriendSteamLevel final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_GetFriendSteamLevel) == 0x000008, "Wrong alignment on Friends_GetFriendSteamLevel");
static_assert(sizeof(Friends_GetFriendSteamLevel) == 0x000010, "Wrong size on Friends_GetFriendSteamLevel");
static_assert(offsetof(Friends_GetFriendSteamLevel, SteamIDFriend) == 0x000000, "Member 'Friends_GetFriendSteamLevel::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetFriendSteamLevel, ReturnValue) == 0x000008, "Member 'Friends_GetFriendSteamLevel::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetLargeFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetLargeFriendAvatar final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetLargeFriendAvatar) == 0x000008, "Wrong alignment on Friends_GetLargeFriendAvatar");
static_assert(sizeof(Friends_GetLargeFriendAvatar) == 0x000010, "Wrong size on Friends_GetLargeFriendAvatar");
static_assert(offsetof(Friends_GetLargeFriendAvatar, SteamIDFriend) == 0x000000, "Member 'Friends_GetLargeFriendAvatar::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetLargeFriendAvatar, ReturnValue) == 0x000008, "Member 'Friends_GetLargeFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetMediumFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetMediumFriendAvatar final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetMediumFriendAvatar) == 0x000008, "Wrong alignment on Friends_GetMediumFriendAvatar");
static_assert(sizeof(Friends_GetMediumFriendAvatar) == 0x000010, "Wrong size on Friends_GetMediumFriendAvatar");
static_assert(offsetof(Friends_GetMediumFriendAvatar, SteamIDFriend) == 0x000000, "Member 'Friends_GetMediumFriendAvatar::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetMediumFriendAvatar, ReturnValue) == 0x000008, "Member 'Friends_GetMediumFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetPersonaName
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetPersonaName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetPersonaName) == 0x000008, "Wrong alignment on Friends_GetPersonaName");
static_assert(sizeof(Friends_GetPersonaName) == 0x000010, "Wrong size on Friends_GetPersonaName");
static_assert(offsetof(Friends_GetPersonaName, ReturnValue) == 0x000000, "Member 'Friends_GetPersonaName::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetPersonaName_Pure
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetPersonaName_Pure final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetPersonaName_Pure) == 0x000008, "Wrong alignment on Friends_GetPersonaName_Pure");
static_assert(sizeof(Friends_GetPersonaName_Pure) == 0x000010, "Wrong size on Friends_GetPersonaName_Pure");
static_assert(offsetof(Friends_GetPersonaName_Pure, ReturnValue) == 0x000000, "Member 'Friends_GetPersonaName_Pure::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetPersonaState
// 0x0001 (0x0001 - 0x0000)
struct Friends_GetPersonaState final
{
public:
	ESteamPersonaState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetPersonaState) == 0x000001, "Wrong alignment on Friends_GetPersonaState");
static_assert(sizeof(Friends_GetPersonaState) == 0x000001, "Wrong size on Friends_GetPersonaState");
static_assert(offsetof(Friends_GetPersonaState, ReturnValue) == 0x000000, "Member 'Friends_GetPersonaState::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetPersonaState_Pure
// 0x0001 (0x0001 - 0x0000)
struct Friends_GetPersonaState_Pure final
{
public:
	ESteamPersonaState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetPersonaState_Pure) == 0x000001, "Wrong alignment on Friends_GetPersonaState_Pure");
static_assert(sizeof(Friends_GetPersonaState_Pure) == 0x000001, "Wrong size on Friends_GetPersonaState_Pure");
static_assert(offsetof(Friends_GetPersonaState_Pure, ReturnValue) == 0x000000, "Member 'Friends_GetPersonaState_Pure::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetPlayerNickname
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetPlayerNickname final
{
public:
	struct FSteamID                               SteamIDPlayer;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetPlayerNickname) == 0x000008, "Wrong alignment on Friends_GetPlayerNickname");
static_assert(sizeof(Friends_GetPlayerNickname) == 0x000018, "Wrong size on Friends_GetPlayerNickname");
static_assert(offsetof(Friends_GetPlayerNickname, SteamIDPlayer) == 0x000000, "Member 'Friends_GetPlayerNickname::SteamIDPlayer' has a wrong offset!");
static_assert(offsetof(Friends_GetPlayerNickname, ReturnValue) == 0x000008, "Member 'Friends_GetPlayerNickname::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetPlayerNickname_Pure
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetPlayerNickname_Pure final
{
public:
	struct FSteamID                               SteamIDPlayer;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetPlayerNickname_Pure) == 0x000008, "Wrong alignment on Friends_GetPlayerNickname_Pure");
static_assert(sizeof(Friends_GetPlayerNickname_Pure) == 0x000018, "Wrong size on Friends_GetPlayerNickname_Pure");
static_assert(offsetof(Friends_GetPlayerNickname_Pure, SteamIDPlayer) == 0x000000, "Member 'Friends_GetPlayerNickname_Pure::SteamIDPlayer' has a wrong offset!");
static_assert(offsetof(Friends_GetPlayerNickname_Pure, ReturnValue) == 0x000008, "Member 'Friends_GetPlayerNickname_Pure::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetSmallFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetSmallFriendAvatar final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetSmallFriendAvatar) == 0x000008, "Wrong alignment on Friends_GetSmallFriendAvatar");
static_assert(sizeof(Friends_GetSmallFriendAvatar) == 0x000010, "Wrong size on Friends_GetSmallFriendAvatar");
static_assert(offsetof(Friends_GetSmallFriendAvatar, SteamIDFriend) == 0x000000, "Member 'Friends_GetSmallFriendAvatar::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_GetSmallFriendAvatar, ReturnValue) == 0x000008, "Member 'Friends_GetSmallFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.GetUserRestrictions
// 0x0010 (0x0010 - 0x0000)
struct Friends_GetUserRestrictions final
{
public:
	TArray<ESteamUserRestriction>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetUserRestrictions) == 0x000008, "Wrong alignment on Friends_GetUserRestrictions");
static_assert(sizeof(Friends_GetUserRestrictions) == 0x000010, "Wrong size on Friends_GetUserRestrictions");
static_assert(offsetof(Friends_GetUserRestrictions, ReturnValue) == 0x000000, "Member 'Friends_GetUserRestrictions::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.HasFriend
// 0x0020 (0x0020 - 0x0000)
struct Friends_HasFriend final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamFriendFlags>                     Flags_0;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_HasFriend) == 0x000008, "Wrong alignment on Friends_HasFriend");
static_assert(sizeof(Friends_HasFriend) == 0x000020, "Wrong size on Friends_HasFriend");
static_assert(offsetof(Friends_HasFriend, SteamIDFriend) == 0x000000, "Member 'Friends_HasFriend::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_HasFriend, Flags_0) == 0x000008, "Member 'Friends_HasFriend::Flags_0' has a wrong offset!");
static_assert(offsetof(Friends_HasFriend, ReturnValue) == 0x000018, "Member 'Friends_HasFriend::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.InviteUserToGame
// 0x0020 (0x0020 - 0x0000)
struct Friends_InviteUserToGame final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_InviteUserToGame) == 0x000008, "Wrong alignment on Friends_InviteUserToGame");
static_assert(sizeof(Friends_InviteUserToGame) == 0x000020, "Wrong size on Friends_InviteUserToGame");
static_assert(offsetof(Friends_InviteUserToGame, SteamIDFriend) == 0x000000, "Member 'Friends_InviteUserToGame::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_InviteUserToGame, ConnectString) == 0x000008, "Member 'Friends_InviteUserToGame::ConnectString' has a wrong offset!");
static_assert(offsetof(Friends_InviteUserToGame, ReturnValue) == 0x000018, "Member 'Friends_InviteUserToGame::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.IsClanChatAdmin
// 0x0018 (0x0018 - 0x0000)
struct Friends_IsClanChatAdmin final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_IsClanChatAdmin) == 0x000008, "Wrong alignment on Friends_IsClanChatAdmin");
static_assert(sizeof(Friends_IsClanChatAdmin) == 0x000018, "Wrong size on Friends_IsClanChatAdmin");
static_assert(offsetof(Friends_IsClanChatAdmin, SteamIDClanChat) == 0x000000, "Member 'Friends_IsClanChatAdmin::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(Friends_IsClanChatAdmin, SteamIDUser) == 0x000008, "Member 'Friends_IsClanChatAdmin::SteamIDUser' has a wrong offset!");
static_assert(offsetof(Friends_IsClanChatAdmin, ReturnValue) == 0x000010, "Member 'Friends_IsClanChatAdmin::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.IsClanChatWindowOpenInSteam
// 0x0010 (0x0010 - 0x0000)
struct Friends_IsClanChatWindowOpenInSteam final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_IsClanChatWindowOpenInSteam) == 0x000008, "Wrong alignment on Friends_IsClanChatWindowOpenInSteam");
static_assert(sizeof(Friends_IsClanChatWindowOpenInSteam) == 0x000010, "Wrong size on Friends_IsClanChatWindowOpenInSteam");
static_assert(offsetof(Friends_IsClanChatWindowOpenInSteam, SteamIDClanChat) == 0x000000, "Member 'Friends_IsClanChatWindowOpenInSteam::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(Friends_IsClanChatWindowOpenInSteam, ReturnValue) == 0x000008, "Member 'Friends_IsClanChatWindowOpenInSteam::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.IsClanOfficialGameGroup
// 0x0010 (0x0010 - 0x0000)
struct Friends_IsClanOfficialGameGroup final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_IsClanOfficialGameGroup) == 0x000008, "Wrong alignment on Friends_IsClanOfficialGameGroup");
static_assert(sizeof(Friends_IsClanOfficialGameGroup) == 0x000010, "Wrong size on Friends_IsClanOfficialGameGroup");
static_assert(offsetof(Friends_IsClanOfficialGameGroup, SteamIDClan) == 0x000000, "Member 'Friends_IsClanOfficialGameGroup::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_IsClanOfficialGameGroup, ReturnValue) == 0x000008, "Member 'Friends_IsClanOfficialGameGroup::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.IsClanPublic
// 0x0010 (0x0010 - 0x0000)
struct Friends_IsClanPublic final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_IsClanPublic) == 0x000008, "Wrong alignment on Friends_IsClanPublic");
static_assert(sizeof(Friends_IsClanPublic) == 0x000010, "Wrong size on Friends_IsClanPublic");
static_assert(offsetof(Friends_IsClanPublic, SteamIDClan) == 0x000000, "Member 'Friends_IsClanPublic::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_IsClanPublic, ReturnValue) == 0x000008, "Member 'Friends_IsClanPublic::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.IsUserInSource
// 0x0018 (0x0018 - 0x0000)
struct Friends_IsUserInSource final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDSource;                                     // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_IsUserInSource) == 0x000008, "Wrong alignment on Friends_IsUserInSource");
static_assert(sizeof(Friends_IsUserInSource) == 0x000018, "Wrong size on Friends_IsUserInSource");
static_assert(offsetof(Friends_IsUserInSource, SteamIDUser) == 0x000000, "Member 'Friends_IsUserInSource::SteamIDUser' has a wrong offset!");
static_assert(offsetof(Friends_IsUserInSource, SteamIDSource) == 0x000008, "Member 'Friends_IsUserInSource::SteamIDSource' has a wrong offset!");
static_assert(offsetof(Friends_IsUserInSource, ReturnValue) == 0x000010, "Member 'Friends_IsUserInSource::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.LeaveClanChatRoom
// 0x0010 (0x0010 - 0x0000)
struct Friends_LeaveClanChatRoom final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_LeaveClanChatRoom) == 0x000008, "Wrong alignment on Friends_LeaveClanChatRoom");
static_assert(sizeof(Friends_LeaveClanChatRoom) == 0x000010, "Wrong size on Friends_LeaveClanChatRoom");
static_assert(offsetof(Friends_LeaveClanChatRoom, SteamIDClan) == 0x000000, "Member 'Friends_LeaveClanChatRoom::SteamIDClan' has a wrong offset!");
static_assert(offsetof(Friends_LeaveClanChatRoom, ReturnValue) == 0x000008, "Member 'Friends_LeaveClanChatRoom::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.OpenClanChatWindowInSteam
// 0x0010 (0x0010 - 0x0000)
struct Friends_OpenClanChatWindowInSteam final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_OpenClanChatWindowInSteam) == 0x000008, "Wrong alignment on Friends_OpenClanChatWindowInSteam");
static_assert(sizeof(Friends_OpenClanChatWindowInSteam) == 0x000010, "Wrong size on Friends_OpenClanChatWindowInSteam");
static_assert(offsetof(Friends_OpenClanChatWindowInSteam, SteamIDClanChat) == 0x000000, "Member 'Friends_OpenClanChatWindowInSteam::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(Friends_OpenClanChatWindowInSteam, ReturnValue) == 0x000008, "Member 'Friends_OpenClanChatWindowInSteam::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.RegisterProtocolInOverlayBrowser
// 0x0018 (0x0018 - 0x0000)
struct Friends_RegisterProtocolInOverlayBrowser final
{
public:
	class FString                                 Protocol;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_RegisterProtocolInOverlayBrowser) == 0x000008, "Wrong alignment on Friends_RegisterProtocolInOverlayBrowser");
static_assert(sizeof(Friends_RegisterProtocolInOverlayBrowser) == 0x000018, "Wrong size on Friends_RegisterProtocolInOverlayBrowser");
static_assert(offsetof(Friends_RegisterProtocolInOverlayBrowser, Protocol) == 0x000000, "Member 'Friends_RegisterProtocolInOverlayBrowser::Protocol' has a wrong offset!");
static_assert(offsetof(Friends_RegisterProtocolInOverlayBrowser, ReturnValue) == 0x000010, "Member 'Friends_RegisterProtocolInOverlayBrowser::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.ReplyToFriendMessage
// 0x0020 (0x0020 - 0x0000)
struct Friends_ReplyToFriendMessage final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MsgToSend;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_ReplyToFriendMessage) == 0x000008, "Wrong alignment on Friends_ReplyToFriendMessage");
static_assert(sizeof(Friends_ReplyToFriendMessage) == 0x000020, "Wrong size on Friends_ReplyToFriendMessage");
static_assert(offsetof(Friends_ReplyToFriendMessage, SteamIDFriend) == 0x000000, "Member 'Friends_ReplyToFriendMessage::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(Friends_ReplyToFriendMessage, MsgToSend) == 0x000008, "Member 'Friends_ReplyToFriendMessage::MsgToSend' has a wrong offset!");
static_assert(offsetof(Friends_ReplyToFriendMessage, ReturnValue) == 0x000018, "Member 'Friends_ReplyToFriendMessage::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.RequestFriendRichPresence
// 0x0008 (0x0008 - 0x0000)
struct Friends_RequestFriendRichPresence final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_RequestFriendRichPresence) == 0x000008, "Wrong alignment on Friends_RequestFriendRichPresence");
static_assert(sizeof(Friends_RequestFriendRichPresence) == 0x000008, "Wrong size on Friends_RequestFriendRichPresence");
static_assert(offsetof(Friends_RequestFriendRichPresence, SteamIDFriend) == 0x000000, "Member 'Friends_RequestFriendRichPresence::SteamIDFriend' has a wrong offset!");

// Function SteamCore.Friends.RequestUserInformation
// 0x0010 (0x0010 - 0x0000)
struct Friends_RequestUserInformation final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireNameOnly;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_RequestUserInformation) == 0x000008, "Wrong alignment on Friends_RequestUserInformation");
static_assert(sizeof(Friends_RequestUserInformation) == 0x000010, "Wrong size on Friends_RequestUserInformation");
static_assert(offsetof(Friends_RequestUserInformation, SteamIDUser) == 0x000000, "Member 'Friends_RequestUserInformation::SteamIDUser' has a wrong offset!");
static_assert(offsetof(Friends_RequestUserInformation, bRequireNameOnly) == 0x000008, "Member 'Friends_RequestUserInformation::bRequireNameOnly' has a wrong offset!");
static_assert(offsetof(Friends_RequestUserInformation, ReturnValue) == 0x000009, "Member 'Friends_RequestUserInformation::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.SendClanChatMessage
// 0x0020 (0x0020 - 0x0000)
struct Friends_SendClanChatMessage final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_SendClanChatMessage) == 0x000008, "Wrong alignment on Friends_SendClanChatMessage");
static_assert(sizeof(Friends_SendClanChatMessage) == 0x000020, "Wrong size on Friends_SendClanChatMessage");
static_assert(offsetof(Friends_SendClanChatMessage, SteamIDClanChat) == 0x000000, "Member 'Friends_SendClanChatMessage::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(Friends_SendClanChatMessage, Text) == 0x000008, "Member 'Friends_SendClanChatMessage::Text' has a wrong offset!");
static_assert(offsetof(Friends_SendClanChatMessage, ReturnValue) == 0x000018, "Member 'Friends_SendClanChatMessage::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.SetInGameVoiceSpeaking
// 0x0010 (0x0010 - 0x0000)
struct Friends_SetInGameVoiceSpeaking final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpeaking;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_SetInGameVoiceSpeaking) == 0x000008, "Wrong alignment on Friends_SetInGameVoiceSpeaking");
static_assert(sizeof(Friends_SetInGameVoiceSpeaking) == 0x000010, "Wrong size on Friends_SetInGameVoiceSpeaking");
static_assert(offsetof(Friends_SetInGameVoiceSpeaking, SteamIDUser) == 0x000000, "Member 'Friends_SetInGameVoiceSpeaking::SteamIDUser' has a wrong offset!");
static_assert(offsetof(Friends_SetInGameVoiceSpeaking, bSpeaking) == 0x000008, "Member 'Friends_SetInGameVoiceSpeaking::bSpeaking' has a wrong offset!");

// Function SteamCore.Friends.SetListenForFriendsMessages
// 0x0002 (0x0002 - 0x0000)
struct Friends_SetListenForFriendsMessages final
{
public:
	bool                                          bInterceptEnabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_SetListenForFriendsMessages) == 0x000001, "Wrong alignment on Friends_SetListenForFriendsMessages");
static_assert(sizeof(Friends_SetListenForFriendsMessages) == 0x000002, "Wrong size on Friends_SetListenForFriendsMessages");
static_assert(offsetof(Friends_SetListenForFriendsMessages, bInterceptEnabled) == 0x000000, "Member 'Friends_SetListenForFriendsMessages::bInterceptEnabled' has a wrong offset!");
static_assert(offsetof(Friends_SetListenForFriendsMessages, ReturnValue) == 0x000001, "Member 'Friends_SetListenForFriendsMessages::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.SetPlayedWith
// 0x0008 (0x0008 - 0x0000)
struct Friends_SetPlayedWith final
{
public:
	struct FSteamID                               SteamIDUserPlayedWith;                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_SetPlayedWith) == 0x000008, "Wrong alignment on Friends_SetPlayedWith");
static_assert(sizeof(Friends_SetPlayedWith) == 0x000008, "Wrong size on Friends_SetPlayedWith");
static_assert(offsetof(Friends_SetPlayedWith, SteamIDUserPlayedWith) == 0x000000, "Member 'Friends_SetPlayedWith::SteamIDUserPlayedWith' has a wrong offset!");

// Function SteamCore.Friends.SetRichPresence
// 0x0028 (0x0028 - 0x0000)
struct Friends_SetRichPresence final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Friends_SetRichPresence) == 0x000008, "Wrong alignment on Friends_SetRichPresence");
static_assert(sizeof(Friends_SetRichPresence) == 0x000028, "Wrong size on Friends_SetRichPresence");
static_assert(offsetof(Friends_SetRichPresence, Key) == 0x000000, "Member 'Friends_SetRichPresence::Key' has a wrong offset!");
static_assert(offsetof(Friends_SetRichPresence, Value) == 0x000010, "Member 'Friends_SetRichPresence::Value' has a wrong offset!");
static_assert(offsetof(Friends_SetRichPresence, ReturnValue) == 0x000020, "Member 'Friends_SetRichPresence::ReturnValue' has a wrong offset!");

// Function SteamCore.Friends.DownloadClanActivityCounts
// 0x0020 (0x0020 - 0x0000)
struct Friends_DownloadClanActivityCounts final
{
public:
	TDelegate<void(struct FDownloadClanActivityCountsResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       SteamIDClans;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_DownloadClanActivityCounts) == 0x000008, "Wrong alignment on Friends_DownloadClanActivityCounts");
static_assert(sizeof(Friends_DownloadClanActivityCounts) == 0x000020, "Wrong size on Friends_DownloadClanActivityCounts");
static_assert(offsetof(Friends_DownloadClanActivityCounts, Callback) == 0x000000, "Member 'Friends_DownloadClanActivityCounts::Callback' has a wrong offset!");
static_assert(offsetof(Friends_DownloadClanActivityCounts, SteamIDClans) == 0x000010, "Member 'Friends_DownloadClanActivityCounts::SteamIDClans' has a wrong offset!");

// Function SteamCore.Friends.EnumerateFollowingList
// 0x0014 (0x0014 - 0x0000)
struct Friends_EnumerateFollowingList final
{
public:
	TDelegate<void(struct FFriendsEnumerateFollowingList& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_EnumerateFollowingList) == 0x000004, "Wrong alignment on Friends_EnumerateFollowingList");
static_assert(sizeof(Friends_EnumerateFollowingList) == 0x000014, "Wrong size on Friends_EnumerateFollowingList");
static_assert(offsetof(Friends_EnumerateFollowingList, Callback) == 0x000000, "Member 'Friends_EnumerateFollowingList::Callback' has a wrong offset!");
static_assert(offsetof(Friends_EnumerateFollowingList, StartIndex) == 0x000010, "Member 'Friends_EnumerateFollowingList::StartIndex' has a wrong offset!");

// Function SteamCore.Friends.GetFollowerCount
// 0x0018 (0x0018 - 0x0000)
struct Friends_GetFollowerCount final
{
public:
	TDelegate<void(struct FFriendsGetFollowerCount& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_GetFollowerCount) == 0x000008, "Wrong alignment on Friends_GetFollowerCount");
static_assert(sizeof(Friends_GetFollowerCount) == 0x000018, "Wrong size on Friends_GetFollowerCount");
static_assert(offsetof(Friends_GetFollowerCount, Callback) == 0x000000, "Member 'Friends_GetFollowerCount::Callback' has a wrong offset!");
static_assert(offsetof(Friends_GetFollowerCount, SteamID) == 0x000010, "Member 'Friends_GetFollowerCount::SteamID' has a wrong offset!");

// Function SteamCore.Friends.IsFollowing
// 0x0018 (0x0018 - 0x0000)
struct Friends_IsFollowing final
{
public:
	TDelegate<void(struct FFriendsIsFollowing& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_IsFollowing) == 0x000008, "Wrong alignment on Friends_IsFollowing");
static_assert(sizeof(Friends_IsFollowing) == 0x000018, "Wrong size on Friends_IsFollowing");
static_assert(offsetof(Friends_IsFollowing, Callback) == 0x000000, "Member 'Friends_IsFollowing::Callback' has a wrong offset!");
static_assert(offsetof(Friends_IsFollowing, SteamID) == 0x000010, "Member 'Friends_IsFollowing::SteamID' has a wrong offset!");

// Function SteamCore.Friends.JoinClanChatRoom
// 0x0018 (0x0018 - 0x0000)
struct Friends_JoinClanChatRoom final
{
public:
	TDelegate<void(struct FJoinClanChatRoomCompletionResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_JoinClanChatRoom) == 0x000008, "Wrong alignment on Friends_JoinClanChatRoom");
static_assert(sizeof(Friends_JoinClanChatRoom) == 0x000018, "Wrong size on Friends_JoinClanChatRoom");
static_assert(offsetof(Friends_JoinClanChatRoom, Callback) == 0x000000, "Member 'Friends_JoinClanChatRoom::Callback' has a wrong offset!");
static_assert(offsetof(Friends_JoinClanChatRoom, SteamIDClan) == 0x000010, "Member 'Friends_JoinClanChatRoom::SteamIDClan' has a wrong offset!");

// Function SteamCore.Friends.RequestClanOfficerList
// 0x0018 (0x0018 - 0x0000)
struct Friends_RequestClanOfficerList final
{
public:
	TDelegate<void(struct FClanOfficerListResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_RequestClanOfficerList) == 0x000008, "Wrong alignment on Friends_RequestClanOfficerList");
static_assert(sizeof(Friends_RequestClanOfficerList) == 0x000018, "Wrong size on Friends_RequestClanOfficerList");
static_assert(offsetof(Friends_RequestClanOfficerList, Callback) == 0x000000, "Member 'Friends_RequestClanOfficerList::Callback' has a wrong offset!");
static_assert(offsetof(Friends_RequestClanOfficerList, SteamIDClan) == 0x000010, "Member 'Friends_RequestClanOfficerList::SteamIDClan' has a wrong offset!");

// Function SteamCore.Friends.SetPersonaName
// 0x0020 (0x0020 - 0x0000)
struct Friends_SetPersonaName final
{
public:
	TDelegate<void(struct FSetPersonaNameResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Friends_SetPersonaName) == 0x000008, "Wrong alignment on Friends_SetPersonaName");
static_assert(sizeof(Friends_SetPersonaName) == 0x000020, "Wrong size on Friends_SetPersonaName");
static_assert(offsetof(Friends_SetPersonaName, Callback) == 0x000000, "Member 'Friends_SetPersonaName::Callback' has a wrong offset!");
static_assert(offsetof(Friends_SetPersonaName, Name_0) == 0x000010, "Member 'Friends_SetPersonaName::Name_0' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionSetPersonaName.SetPersonaNameAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreFriendsAsyncActionSetPersonaName* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync) == 0x000028, "Wrong size on SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, Name_0) == 0x000008, "Member 'SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::Name_0' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, Timeout) == 0x000018, "Member 'SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, ReturnValue) == 0x000020, "Member 'SteamCoreFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionSetPersonaName.HandleCallback
// 0x0004 (0x0004 - 0x0000)
struct SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback final
{
public:
	struct FSetPersonaNameResponse                Data;                                              // 0x0000(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback");
static_assert(sizeof(SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback) == 0x000004, "Wrong size on SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback");
static_assert(offsetof(SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback, Data) == 0x000000, "Member 'SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback, bWasSuccessful) == 0x000003, "Member 'SteamCoreFriendsAsyncActionSetPersonaName_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionDownloadClanActivityCounts.DownloadClanActivityCountsAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       SteamIDClans;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreFriendsAsyncActionDownloadClanActivityCounts* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync) == 0x000028, "Wrong size on SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, SteamIDClans) == 0x000008, "Member 'SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::SteamIDClans' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, Timeout) == 0x000018, "Member 'SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, ReturnValue) == 0x000020, "Member 'SteamCoreFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionDownloadClanActivityCounts.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback final
{
public:
	struct FDownloadClanActivityCountsResult      Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback");
static_assert(sizeof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback) == 0x000002, "Wrong size on SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback");
static_assert(offsetof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback, Data) == 0x000000, "Member 'SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreFriendsAsyncActionDownloadClanActivityCounts_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionRequestClanOfficerList.RequestClanOfficerListAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreFriendsAsyncActionRequestClanOfficerList* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync) == 0x000020, "Wrong size on SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, SteamIDClan) == 0x000008, "Member 'SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, Timeout) == 0x000010, "Member 'SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, ReturnValue) == 0x000018, "Member 'SteamCoreFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionRequestClanOfficerList.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback final
{
public:
	struct FClanOfficerListResponse               Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback");
static_assert(sizeof(SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback) == 0x000018, "Wrong size on SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreFriendsAsyncActionRequestClanOfficerList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionJoinClanChatRoom.JoinClanChatRoomAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreFriendsAsyncActionJoinClanChatRoom* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync) == 0x000020, "Wrong size on SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, SteamIDClan) == 0x000008, "Member 'SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, Timeout) == 0x000010, "Member 'SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, ReturnValue) == 0x000018, "Member 'SteamCoreFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionJoinClanChatRoom.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback final
{
public:
	struct FJoinClanChatRoomCompletionResult      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback");
static_assert(sizeof(SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback) == 0x000018, "Wrong size on SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback");
static_assert(offsetof(SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback, Data) == 0x000000, "Member 'SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreFriendsAsyncActionJoinClanChatRoom_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionEnumerateFollowingList.EnumerateFollowingListAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreFriendsAsyncActionEnumerateFollowingList* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync) == 0x000018, "Wrong size on SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, StartIndex) == 0x000008, "Member 'SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::StartIndex' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, Timeout) == 0x00000C, "Member 'SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, ReturnValue) == 0x000010, "Member 'SteamCoreFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionEnumerateFollowingList.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback final
{
public:
	struct FFriendsEnumerateFollowingList         Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback");
static_assert(sizeof(SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback) == 0x000028, "Wrong size on SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback");
static_assert(offsetof(SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback, bWasSuccessful) == 0x000020, "Member 'SteamCoreFriendsAsyncActionEnumerateFollowingList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionIsFollowing.IsFollowingAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreFriendsAsyncActionIsFollowing* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync) == 0x000020, "Wrong size on SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync, SteamID) == 0x000008, "Member 'SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync, Timeout) == 0x000010, "Member 'SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync, ReturnValue) == 0x000018, "Member 'SteamCoreFriendsAsyncActionIsFollowing_IsFollowingAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionIsFollowing.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreFriendsAsyncActionIsFollowing_HandleCallback final
{
public:
	struct FFriendsIsFollowing                    Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreFriendsAsyncActionIsFollowing_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionIsFollowing_HandleCallback");
static_assert(sizeof(SteamCoreFriendsAsyncActionIsFollowing_HandleCallback) == 0x000020, "Wrong size on SteamCoreFriendsAsyncActionIsFollowing_HandleCallback");
static_assert(offsetof(SteamCoreFriendsAsyncActionIsFollowing_HandleCallback, Data) == 0x000000, "Member 'SteamCoreFriendsAsyncActionIsFollowing_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionIsFollowing_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreFriendsAsyncActionIsFollowing_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionGetFollowerCount.GetFollowerCountAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreFriendsAsyncActionGetFollowerCount* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync) == 0x000020, "Wrong size on SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, SteamID) == 0x000008, "Member 'SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, Timeout) == 0x000010, "Member 'SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, ReturnValue) == 0x000018, "Member 'SteamCoreFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionGetFollowerCount.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback final
{
public:
	struct FFriendsGetFollowerCount               Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback");
static_assert(sizeof(SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback) == 0x000020, "Wrong size on SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback");
static_assert(offsetof(SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback, Data) == 0x000000, "Member 'SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreFriendsAsyncActionGetFollowerCount_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreFriendsAsyncActionRequestUserInformation.RequestUserInformationAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireNameOnly;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreFriendsAsyncActionRequestUserInformation* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync) == 0x000008, "Wrong alignment on SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync");
static_assert(sizeof(SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync) == 0x000020, "Wrong size on SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, SteamIDUser) == 0x000008, "Member 'SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, bRequireNameOnly) == 0x000010, "Member 'SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::bRequireNameOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, Timeout) == 0x000014, "Member 'SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, ReturnValue) == 0x000018, "Member 'SteamCoreFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.AcceptGame
// 0x0001 (0x0001 - 0x0000)
struct SteamGameSearch_AcceptGame final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameSearch_AcceptGame) == 0x000001, "Wrong alignment on SteamGameSearch_AcceptGame");
static_assert(sizeof(SteamGameSearch_AcceptGame) == 0x000001, "Wrong size on SteamGameSearch_AcceptGame");
static_assert(offsetof(SteamGameSearch_AcceptGame, ReturnValue) == 0x000000, "Member 'SteamGameSearch_AcceptGame::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.AddGameSearchParams
// 0x0028 (0x0028 - 0x0000)
struct SteamGameSearch_AddGameSearchParams final
{
public:
	class FString                                 KeyToFind;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValuesToFind;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_AddGameSearchParams) == 0x000008, "Wrong alignment on SteamGameSearch_AddGameSearchParams");
static_assert(sizeof(SteamGameSearch_AddGameSearchParams) == 0x000028, "Wrong size on SteamGameSearch_AddGameSearchParams");
static_assert(offsetof(SteamGameSearch_AddGameSearchParams, KeyToFind) == 0x000000, "Member 'SteamGameSearch_AddGameSearchParams::KeyToFind' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_AddGameSearchParams, ValuesToFind) == 0x000010, "Member 'SteamGameSearch_AddGameSearchParams::ValuesToFind' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_AddGameSearchParams, ReturnValue) == 0x000020, "Member 'SteamGameSearch_AddGameSearchParams::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.CancelRequestPlayersForGame
// 0x0001 (0x0001 - 0x0000)
struct SteamGameSearch_CancelRequestPlayersForGame final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameSearch_CancelRequestPlayersForGame) == 0x000001, "Wrong alignment on SteamGameSearch_CancelRequestPlayersForGame");
static_assert(sizeof(SteamGameSearch_CancelRequestPlayersForGame) == 0x000001, "Wrong size on SteamGameSearch_CancelRequestPlayersForGame");
static_assert(offsetof(SteamGameSearch_CancelRequestPlayersForGame, ReturnValue) == 0x000000, "Member 'SteamGameSearch_CancelRequestPlayersForGame::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.DeclineGame
// 0x0001 (0x0001 - 0x0000)
struct SteamGameSearch_DeclineGame final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameSearch_DeclineGame) == 0x000001, "Wrong alignment on SteamGameSearch_DeclineGame");
static_assert(sizeof(SteamGameSearch_DeclineGame) == 0x000001, "Wrong size on SteamGameSearch_DeclineGame");
static_assert(offsetof(SteamGameSearch_DeclineGame, ReturnValue) == 0x000000, "Member 'SteamGameSearch_DeclineGame::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.EndGame
// 0x0018 (0x0018 - 0x0000)
struct SteamGameSearch_EndGame final
{
public:
	class FString                                 UniqueGameID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_EndGame) == 0x000008, "Wrong alignment on SteamGameSearch_EndGame");
static_assert(sizeof(SteamGameSearch_EndGame) == 0x000018, "Wrong size on SteamGameSearch_EndGame");
static_assert(offsetof(SteamGameSearch_EndGame, UniqueGameID) == 0x000000, "Member 'SteamGameSearch_EndGame::UniqueGameID' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_EndGame, ReturnValue) == 0x000010, "Member 'SteamGameSearch_EndGame::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.EndGameSearch
// 0x0001 (0x0001 - 0x0000)
struct SteamGameSearch_EndGameSearch final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameSearch_EndGameSearch) == 0x000001, "Wrong alignment on SteamGameSearch_EndGameSearch");
static_assert(sizeof(SteamGameSearch_EndGameSearch) == 0x000001, "Wrong size on SteamGameSearch_EndGameSearch");
static_assert(offsetof(SteamGameSearch_EndGameSearch, ReturnValue) == 0x000000, "Member 'SteamGameSearch_EndGameSearch::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.HostConfirmGameStart
// 0x0018 (0x0018 - 0x0000)
struct SteamGameSearch_HostConfirmGameStart final
{
public:
	class FString                                 UniqueGameID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_HostConfirmGameStart) == 0x000008, "Wrong alignment on SteamGameSearch_HostConfirmGameStart");
static_assert(sizeof(SteamGameSearch_HostConfirmGameStart) == 0x000018, "Wrong size on SteamGameSearch_HostConfirmGameStart");
static_assert(offsetof(SteamGameSearch_HostConfirmGameStart, UniqueGameID) == 0x000000, "Member 'SteamGameSearch_HostConfirmGameStart::UniqueGameID' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_HostConfirmGameStart, ReturnValue) == 0x000010, "Member 'SteamGameSearch_HostConfirmGameStart::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.RequestPlayersForGame
// 0x0010 (0x0010 - 0x0000)
struct SteamGameSearch_RequestPlayersForGame final
{
public:
	int32                                         PlayerMin;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMax;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTeamSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_RequestPlayersForGame) == 0x000004, "Wrong alignment on SteamGameSearch_RequestPlayersForGame");
static_assert(sizeof(SteamGameSearch_RequestPlayersForGame) == 0x000010, "Wrong size on SteamGameSearch_RequestPlayersForGame");
static_assert(offsetof(SteamGameSearch_RequestPlayersForGame, PlayerMin) == 0x000000, "Member 'SteamGameSearch_RequestPlayersForGame::PlayerMin' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_RequestPlayersForGame, PlayerMax) == 0x000004, "Member 'SteamGameSearch_RequestPlayersForGame::PlayerMax' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_RequestPlayersForGame, MaxTeamSize) == 0x000008, "Member 'SteamGameSearch_RequestPlayersForGame::MaxTeamSize' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_RequestPlayersForGame, ReturnValue) == 0x00000C, "Member 'SteamGameSearch_RequestPlayersForGame::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.RetrieveConnectionDetails
// 0x0020 (0x0020 - 0x0000)
struct SteamGameSearch_RetrieveConnectionDetails final
{
public:
	struct FSteamID                               SteamIDHost;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionDetails;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumConnectionDetails;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_RetrieveConnectionDetails) == 0x000008, "Wrong alignment on SteamGameSearch_RetrieveConnectionDetails");
static_assert(sizeof(SteamGameSearch_RetrieveConnectionDetails) == 0x000020, "Wrong size on SteamGameSearch_RetrieveConnectionDetails");
static_assert(offsetof(SteamGameSearch_RetrieveConnectionDetails, SteamIDHost) == 0x000000, "Member 'SteamGameSearch_RetrieveConnectionDetails::SteamIDHost' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_RetrieveConnectionDetails, ConnectionDetails) == 0x000008, "Member 'SteamGameSearch_RetrieveConnectionDetails::ConnectionDetails' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_RetrieveConnectionDetails, NumConnectionDetails) == 0x000018, "Member 'SteamGameSearch_RetrieveConnectionDetails::NumConnectionDetails' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_RetrieveConnectionDetails, ReturnValue) == 0x00001C, "Member 'SteamGameSearch_RetrieveConnectionDetails::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.SearchForGameSolo
// 0x000C (0x000C - 0x0000)
struct SteamGameSearch_SearchForGameSolo final
{
public:
	int32                                         PlayerMin;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMax;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_SearchForGameSolo) == 0x000004, "Wrong alignment on SteamGameSearch_SearchForGameSolo");
static_assert(sizeof(SteamGameSearch_SearchForGameSolo) == 0x00000C, "Wrong size on SteamGameSearch_SearchForGameSolo");
static_assert(offsetof(SteamGameSearch_SearchForGameSolo, PlayerMin) == 0x000000, "Member 'SteamGameSearch_SearchForGameSolo::PlayerMin' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SearchForGameSolo, PlayerMax) == 0x000004, "Member 'SteamGameSearch_SearchForGameSolo::PlayerMax' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SearchForGameSolo, ReturnValue) == 0x000008, "Member 'SteamGameSearch_SearchForGameSolo::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.SearchForGameWithLobby
// 0x0018 (0x0018 - 0x0000)
struct SteamGameSearch_SearchForGameWithLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMin;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMax;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_SearchForGameWithLobby) == 0x000008, "Wrong alignment on SteamGameSearch_SearchForGameWithLobby");
static_assert(sizeof(SteamGameSearch_SearchForGameWithLobby) == 0x000018, "Wrong size on SteamGameSearch_SearchForGameWithLobby");
static_assert(offsetof(SteamGameSearch_SearchForGameWithLobby, SteamIDLobby) == 0x000000, "Member 'SteamGameSearch_SearchForGameWithLobby::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SearchForGameWithLobby, PlayerMin) == 0x000008, "Member 'SteamGameSearch_SearchForGameWithLobby::PlayerMin' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SearchForGameWithLobby, PlayerMax) == 0x00000C, "Member 'SteamGameSearch_SearchForGameWithLobby::PlayerMax' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SearchForGameWithLobby, ReturnValue) == 0x000010, "Member 'SteamGameSearch_SearchForGameWithLobby::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.SetConnectionDetails
// 0x0018 (0x0018 - 0x0000)
struct SteamGameSearch_SetConnectionDetails final
{
public:
	class FString                                 ConnectionDetails;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_SetConnectionDetails) == 0x000008, "Wrong alignment on SteamGameSearch_SetConnectionDetails");
static_assert(sizeof(SteamGameSearch_SetConnectionDetails) == 0x000018, "Wrong size on SteamGameSearch_SetConnectionDetails");
static_assert(offsetof(SteamGameSearch_SetConnectionDetails, ConnectionDetails) == 0x000000, "Member 'SteamGameSearch_SetConnectionDetails::ConnectionDetails' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SetConnectionDetails, ReturnValue) == 0x000010, "Member 'SteamGameSearch_SetConnectionDetails::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.SetGameHostParams
// 0x0028 (0x0028 - 0x0000)
struct SteamGameSearch_SetGameHostParams final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_SetGameHostParams) == 0x000008, "Wrong alignment on SteamGameSearch_SetGameHostParams");
static_assert(sizeof(SteamGameSearch_SetGameHostParams) == 0x000028, "Wrong size on SteamGameSearch_SetGameHostParams");
static_assert(offsetof(SteamGameSearch_SetGameHostParams, Key) == 0x000000, "Member 'SteamGameSearch_SetGameHostParams::Key' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SetGameHostParams, Values) == 0x000010, "Member 'SteamGameSearch_SetGameHostParams::Values' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SetGameHostParams, ReturnValue) == 0x000020, "Member 'SteamGameSearch_SetGameHostParams::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameSearch.SubmitPlayerResult
// 0x0020 (0x0020 - 0x0000)
struct SteamGameSearch_SubmitPlayerResult final
{
public:
	class FString                                 UniqueGameID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDPlayer;                                     // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamPlayerResult                            PlayerResult;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameSearch_SubmitPlayerResult) == 0x000008, "Wrong alignment on SteamGameSearch_SubmitPlayerResult");
static_assert(sizeof(SteamGameSearch_SubmitPlayerResult) == 0x000020, "Wrong size on SteamGameSearch_SubmitPlayerResult");
static_assert(offsetof(SteamGameSearch_SubmitPlayerResult, UniqueGameID) == 0x000000, "Member 'SteamGameSearch_SubmitPlayerResult::UniqueGameID' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SubmitPlayerResult, SteamIDPlayer) == 0x000010, "Member 'SteamGameSearch_SubmitPlayerResult::SteamIDPlayer' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SubmitPlayerResult, PlayerResult) == 0x000018, "Member 'SteamGameSearch_SubmitPlayerResult::PlayerResult' has a wrong offset!");
static_assert(offsetof(SteamGameSearch_SubmitPlayerResult, ReturnValue) == 0x000019, "Member 'SteamGameSearch_SubmitPlayerResult::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.AssociateWithClan
// 0x0018 (0x0018 - 0x0000)
struct SteamGameServer_AssociateWithClan final
{
public:
	TDelegate<void(struct FAssociateWithClanResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_AssociateWithClan) == 0x000008, "Wrong alignment on SteamGameServer_AssociateWithClan");
static_assert(sizeof(SteamGameServer_AssociateWithClan) == 0x000018, "Wrong size on SteamGameServer_AssociateWithClan");
static_assert(offsetof(SteamGameServer_AssociateWithClan, Callback) == 0x000000, "Member 'SteamGameServer_AssociateWithClan::Callback' has a wrong offset!");
static_assert(offsetof(SteamGameServer_AssociateWithClan, SteamIDClan) == 0x000010, "Member 'SteamGameServer_AssociateWithClan::SteamIDClan' has a wrong offset!");

// Function SteamCore.SteamGameServer.BeginAuthSession
// 0x0020 (0x0020 - 0x0000)
struct SteamGameServer_BeginAuthSession final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamBeginAuthSessionResult                  ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameServer_BeginAuthSession) == 0x000008, "Wrong alignment on SteamGameServer_BeginAuthSession");
static_assert(sizeof(SteamGameServer_BeginAuthSession) == 0x000020, "Wrong size on SteamGameServer_BeginAuthSession");
static_assert(offsetof(SteamGameServer_BeginAuthSession, Ticket) == 0x000000, "Member 'SteamGameServer_BeginAuthSession::Ticket' has a wrong offset!");
static_assert(offsetof(SteamGameServer_BeginAuthSession, SteamID) == 0x000010, "Member 'SteamGameServer_BeginAuthSession::SteamID' has a wrong offset!");
static_assert(offsetof(SteamGameServer_BeginAuthSession, ReturnValue) == 0x000018, "Member 'SteamGameServer_BeginAuthSession::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.BLoggedOn
// 0x0001 (0x0001 - 0x0000)
struct SteamGameServer_BLoggedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_BLoggedOn) == 0x000001, "Wrong alignment on SteamGameServer_BLoggedOn");
static_assert(sizeof(SteamGameServer_BLoggedOn) == 0x000001, "Wrong size on SteamGameServer_BLoggedOn");
static_assert(offsetof(SteamGameServer_BLoggedOn, ReturnValue) == 0x000000, "Member 'SteamGameServer_BLoggedOn::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.BSecure
// 0x0001 (0x0001 - 0x0000)
struct SteamGameServer_BSecure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_BSecure) == 0x000001, "Wrong alignment on SteamGameServer_BSecure");
static_assert(sizeof(SteamGameServer_BSecure) == 0x000001, "Wrong size on SteamGameServer_BSecure");
static_assert(offsetof(SteamGameServer_BSecure, ReturnValue) == 0x000000, "Member 'SteamGameServer_BSecure::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.BUpdateUserData
// 0x0020 (0x0020 - 0x0000)
struct SteamGameServer_BUpdateUserData final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameServer_BUpdateUserData) == 0x000008, "Wrong alignment on SteamGameServer_BUpdateUserData");
static_assert(sizeof(SteamGameServer_BUpdateUserData) == 0x000020, "Wrong size on SteamGameServer_BUpdateUserData");
static_assert(offsetof(SteamGameServer_BUpdateUserData, SteamIDUser) == 0x000000, "Member 'SteamGameServer_BUpdateUserData::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamGameServer_BUpdateUserData, PlayerName) == 0x000008, "Member 'SteamGameServer_BUpdateUserData::PlayerName' has a wrong offset!");
static_assert(offsetof(SteamGameServer_BUpdateUserData, Score) == 0x000018, "Member 'SteamGameServer_BUpdateUserData::Score' has a wrong offset!");
static_assert(offsetof(SteamGameServer_BUpdateUserData, ReturnValue) == 0x00001C, "Member 'SteamGameServer_BUpdateUserData::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.CancelAuthTicket
// 0x0004 (0x0004 - 0x0000)
struct SteamGameServer_CancelAuthTicket final
{
public:
	struct FSteamTicketHandle                     TicketHandle;                                      // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_CancelAuthTicket) == 0x000004, "Wrong alignment on SteamGameServer_CancelAuthTicket");
static_assert(sizeof(SteamGameServer_CancelAuthTicket) == 0x000004, "Wrong size on SteamGameServer_CancelAuthTicket");
static_assert(offsetof(SteamGameServer_CancelAuthTicket, TicketHandle) == 0x000000, "Member 'SteamGameServer_CancelAuthTicket::TicketHandle' has a wrong offset!");

// Function SteamCore.SteamGameServer.ComputeNewPlayerCompatibility
// 0x0018 (0x0018 - 0x0000)
struct SteamGameServer_ComputeNewPlayerCompatibility final
{
public:
	TDelegate<void(struct FComputeNewPlayerCompatibilityResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDNewPlayer;                                  // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_ComputeNewPlayerCompatibility) == 0x000008, "Wrong alignment on SteamGameServer_ComputeNewPlayerCompatibility");
static_assert(sizeof(SteamGameServer_ComputeNewPlayerCompatibility) == 0x000018, "Wrong size on SteamGameServer_ComputeNewPlayerCompatibility");
static_assert(offsetof(SteamGameServer_ComputeNewPlayerCompatibility, Callback) == 0x000000, "Member 'SteamGameServer_ComputeNewPlayerCompatibility::Callback' has a wrong offset!");
static_assert(offsetof(SteamGameServer_ComputeNewPlayerCompatibility, SteamIDNewPlayer) == 0x000010, "Member 'SteamGameServer_ComputeNewPlayerCompatibility::SteamIDNewPlayer' has a wrong offset!");

// Function SteamCore.SteamGameServer.CreateUnauthenticatedUserConnection
// 0x0008 (0x0008 - 0x0000)
struct SteamGameServer_CreateUnauthenticatedUserConnection final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_CreateUnauthenticatedUserConnection) == 0x000008, "Wrong alignment on SteamGameServer_CreateUnauthenticatedUserConnection");
static_assert(sizeof(SteamGameServer_CreateUnauthenticatedUserConnection) == 0x000008, "Wrong size on SteamGameServer_CreateUnauthenticatedUserConnection");
static_assert(offsetof(SteamGameServer_CreateUnauthenticatedUserConnection, ReturnValue) == 0x000000, "Member 'SteamGameServer_CreateUnauthenticatedUserConnection::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.EnableHeartbeats
// 0x0001 (0x0001 - 0x0000)
struct SteamGameServer_EnableHeartbeats final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_EnableHeartbeats) == 0x000001, "Wrong alignment on SteamGameServer_EnableHeartbeats");
static_assert(sizeof(SteamGameServer_EnableHeartbeats) == 0x000001, "Wrong size on SteamGameServer_EnableHeartbeats");
static_assert(offsetof(SteamGameServer_EnableHeartbeats, bActive) == 0x000000, "Member 'SteamGameServer_EnableHeartbeats::bActive' has a wrong offset!");

// Function SteamCore.SteamGameServer.EndAuthSession
// 0x0008 (0x0008 - 0x0000)
struct SteamGameServer_EndAuthSession final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_EndAuthSession) == 0x000008, "Wrong alignment on SteamGameServer_EndAuthSession");
static_assert(sizeof(SteamGameServer_EndAuthSession) == 0x000008, "Wrong size on SteamGameServer_EndAuthSession");
static_assert(offsetof(SteamGameServer_EndAuthSession, SteamID) == 0x000000, "Member 'SteamGameServer_EndAuthSession::SteamID' has a wrong offset!");

// Function SteamCore.SteamGameServer.GetAuthSessionTicket
// 0x0018 (0x0018 - 0x0000)
struct SteamGameServer_GetAuthSessionTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamTicketHandle                     ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameServer_GetAuthSessionTicket) == 0x000008, "Wrong alignment on SteamGameServer_GetAuthSessionTicket");
static_assert(sizeof(SteamGameServer_GetAuthSessionTicket) == 0x000018, "Wrong size on SteamGameServer_GetAuthSessionTicket");
static_assert(offsetof(SteamGameServer_GetAuthSessionTicket, Ticket) == 0x000000, "Member 'SteamGameServer_GetAuthSessionTicket::Ticket' has a wrong offset!");
static_assert(offsetof(SteamGameServer_GetAuthSessionTicket, ReturnValue) == 0x000010, "Member 'SteamGameServer_GetAuthSessionTicket::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.GetServerPublicIP
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_GetServerPublicIP final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_GetServerPublicIP) == 0x000008, "Wrong alignment on SteamGameServer_GetServerPublicIP");
static_assert(sizeof(SteamGameServer_GetServerPublicIP) == 0x000010, "Wrong size on SteamGameServer_GetServerPublicIP");
static_assert(offsetof(SteamGameServer_GetServerPublicIP, ReturnValue) == 0x000000, "Member 'SteamGameServer_GetServerPublicIP::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.GetServerPublicIP_Pure
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_GetServerPublicIP_Pure final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_GetServerPublicIP_Pure) == 0x000008, "Wrong alignment on SteamGameServer_GetServerPublicIP_Pure");
static_assert(sizeof(SteamGameServer_GetServerPublicIP_Pure) == 0x000010, "Wrong size on SteamGameServer_GetServerPublicIP_Pure");
static_assert(offsetof(SteamGameServer_GetServerPublicIP_Pure, ReturnValue) == 0x000000, "Member 'SteamGameServer_GetServerPublicIP_Pure::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.GetServerPublicIP_PureCompact
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_GetServerPublicIP_PureCompact final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_GetServerPublicIP_PureCompact) == 0x000008, "Wrong alignment on SteamGameServer_GetServerPublicIP_PureCompact");
static_assert(sizeof(SteamGameServer_GetServerPublicIP_PureCompact) == 0x000010, "Wrong size on SteamGameServer_GetServerPublicIP_PureCompact");
static_assert(offsetof(SteamGameServer_GetServerPublicIP_PureCompact, ReturnValue) == 0x000000, "Member 'SteamGameServer_GetServerPublicIP_PureCompact::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.GetServerSteamID
// 0x0008 (0x0008 - 0x0000)
struct SteamGameServer_GetServerSteamID final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_GetServerSteamID) == 0x000008, "Wrong alignment on SteamGameServer_GetServerSteamID");
static_assert(sizeof(SteamGameServer_GetServerSteamID) == 0x000008, "Wrong size on SteamGameServer_GetServerSteamID");
static_assert(offsetof(SteamGameServer_GetServerSteamID, ReturnValue) == 0x000000, "Member 'SteamGameServer_GetServerSteamID::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.GetServerSteamID_Pure
// 0x0008 (0x0008 - 0x0000)
struct SteamGameServer_GetServerSteamID_Pure final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_GetServerSteamID_Pure) == 0x000008, "Wrong alignment on SteamGameServer_GetServerSteamID_Pure");
static_assert(sizeof(SteamGameServer_GetServerSteamID_Pure) == 0x000008, "Wrong size on SteamGameServer_GetServerSteamID_Pure");
static_assert(offsetof(SteamGameServer_GetServerSteamID_Pure, ReturnValue) == 0x000000, "Member 'SteamGameServer_GetServerSteamID_Pure::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.GetServerSteamID_PureCompact
// 0x0008 (0x0008 - 0x0000)
struct SteamGameServer_GetServerSteamID_PureCompact final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_GetServerSteamID_PureCompact) == 0x000008, "Wrong alignment on SteamGameServer_GetServerSteamID_PureCompact");
static_assert(sizeof(SteamGameServer_GetServerSteamID_PureCompact) == 0x000008, "Wrong size on SteamGameServer_GetServerSteamID_PureCompact");
static_assert(offsetof(SteamGameServer_GetServerSteamID_PureCompact, ReturnValue) == 0x000000, "Member 'SteamGameServer_GetServerSteamID_PureCompact::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.LogOn
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_LogOn final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_LogOn) == 0x000008, "Wrong alignment on SteamGameServer_LogOn");
static_assert(sizeof(SteamGameServer_LogOn) == 0x000010, "Wrong size on SteamGameServer_LogOn");
static_assert(offsetof(SteamGameServer_LogOn, Token) == 0x000000, "Member 'SteamGameServer_LogOn::Token' has a wrong offset!");

// Function SteamCore.SteamGameServer.RequestUserGroupStatus
// 0x0018 (0x0018 - 0x0000)
struct SteamGameServer_RequestUserGroupStatus final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDGroup;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameServer_RequestUserGroupStatus) == 0x000008, "Wrong alignment on SteamGameServer_RequestUserGroupStatus");
static_assert(sizeof(SteamGameServer_RequestUserGroupStatus) == 0x000018, "Wrong size on SteamGameServer_RequestUserGroupStatus");
static_assert(offsetof(SteamGameServer_RequestUserGroupStatus, SteamIDUser) == 0x000000, "Member 'SteamGameServer_RequestUserGroupStatus::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamGameServer_RequestUserGroupStatus, SteamIDGroup) == 0x000008, "Member 'SteamGameServer_RequestUserGroupStatus::SteamIDGroup' has a wrong offset!");
static_assert(offsetof(SteamGameServer_RequestUserGroupStatus, ReturnValue) == 0x000010, "Member 'SteamGameServer_RequestUserGroupStatus::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetAdvertiseServerActive
// 0x0001 (0x0001 - 0x0000)
struct SteamGameServer_SetAdvertiseServerActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetAdvertiseServerActive) == 0x000001, "Wrong alignment on SteamGameServer_SetAdvertiseServerActive");
static_assert(sizeof(SteamGameServer_SetAdvertiseServerActive) == 0x000001, "Wrong size on SteamGameServer_SetAdvertiseServerActive");
static_assert(offsetof(SteamGameServer_SetAdvertiseServerActive, bActive) == 0x000000, "Member 'SteamGameServer_SetAdvertiseServerActive::bActive' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetBotPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SteamGameServer_SetBotPlayerCount final
{
public:
	int32                                         BotPlayers;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetBotPlayerCount) == 0x000004, "Wrong alignment on SteamGameServer_SetBotPlayerCount");
static_assert(sizeof(SteamGameServer_SetBotPlayerCount) == 0x000004, "Wrong size on SteamGameServer_SetBotPlayerCount");
static_assert(offsetof(SteamGameServer_SetBotPlayerCount, BotPlayers) == 0x000000, "Member 'SteamGameServer_SetBotPlayerCount::BotPlayers' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct SteamGameServer_SetDedicatedServer final
{
public:
	bool                                          bDedicated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetDedicatedServer) == 0x000001, "Wrong alignment on SteamGameServer_SetDedicatedServer");
static_assert(sizeof(SteamGameServer_SetDedicatedServer) == 0x000001, "Wrong size on SteamGameServer_SetDedicatedServer");
static_assert(offsetof(SteamGameServer_SetDedicatedServer, bDedicated) == 0x000000, "Member 'SteamGameServer_SetDedicatedServer::bDedicated' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetGameData
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetGameData final
{
public:
	class FString                                 GameData;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetGameData) == 0x000008, "Wrong alignment on SteamGameServer_SetGameData");
static_assert(sizeof(SteamGameServer_SetGameData) == 0x000010, "Wrong size on SteamGameServer_SetGameData");
static_assert(offsetof(SteamGameServer_SetGameData, GameData) == 0x000000, "Member 'SteamGameServer_SetGameData::GameData' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetGameDescription
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetGameDescription final
{
public:
	class FString                                 GameDescription;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetGameDescription) == 0x000008, "Wrong alignment on SteamGameServer_SetGameDescription");
static_assert(sizeof(SteamGameServer_SetGameDescription) == 0x000010, "Wrong size on SteamGameServer_SetGameDescription");
static_assert(offsetof(SteamGameServer_SetGameDescription, GameDescription) == 0x000000, "Member 'SteamGameServer_SetGameDescription::GameDescription' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetGameTags
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetGameTags final
{
public:
	class FString                                 GameTags;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetGameTags) == 0x000008, "Wrong alignment on SteamGameServer_SetGameTags");
static_assert(sizeof(SteamGameServer_SetGameTags) == 0x000010, "Wrong size on SteamGameServer_SetGameTags");
static_assert(offsetof(SteamGameServer_SetGameTags, GameTags) == 0x000000, "Member 'SteamGameServer_SetGameTags::GameTags' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetHeartbeatInterval
// 0x0004 (0x0004 - 0x0000)
struct SteamGameServer_SetHeartbeatInterval final
{
public:
	int32                                         HeartbeatInterval;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetHeartbeatInterval) == 0x000004, "Wrong alignment on SteamGameServer_SetHeartbeatInterval");
static_assert(sizeof(SteamGameServer_SetHeartbeatInterval) == 0x000004, "Wrong size on SteamGameServer_SetHeartbeatInterval");
static_assert(offsetof(SteamGameServer_SetHeartbeatInterval, HeartbeatInterval) == 0x000000, "Member 'SteamGameServer_SetHeartbeatInterval::HeartbeatInterval' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetKeyValue
// 0x0020 (0x0020 - 0x0000)
struct SteamGameServer_SetKeyValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetKeyValue) == 0x000008, "Wrong alignment on SteamGameServer_SetKeyValue");
static_assert(sizeof(SteamGameServer_SetKeyValue) == 0x000020, "Wrong size on SteamGameServer_SetKeyValue");
static_assert(offsetof(SteamGameServer_SetKeyValue, Key) == 0x000000, "Member 'SteamGameServer_SetKeyValue::Key' has a wrong offset!");
static_assert(offsetof(SteamGameServer_SetKeyValue, Value) == 0x000010, "Member 'SteamGameServer_SetKeyValue::Value' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetMapName
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetMapName final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetMapName) == 0x000008, "Wrong alignment on SteamGameServer_SetMapName");
static_assert(sizeof(SteamGameServer_SetMapName) == 0x000010, "Wrong size on SteamGameServer_SetMapName");
static_assert(offsetof(SteamGameServer_SetMapName, MapName) == 0x000000, "Member 'SteamGameServer_SetMapName::MapName' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetMaxPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SteamGameServer_SetMaxPlayerCount final
{
public:
	int32                                         PlayersMax;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetMaxPlayerCount) == 0x000004, "Wrong alignment on SteamGameServer_SetMaxPlayerCount");
static_assert(sizeof(SteamGameServer_SetMaxPlayerCount) == 0x000004, "Wrong size on SteamGameServer_SetMaxPlayerCount");
static_assert(offsetof(SteamGameServer_SetMaxPlayerCount, PlayersMax) == 0x000000, "Member 'SteamGameServer_SetMaxPlayerCount::PlayersMax' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetModDir
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetModDir final
{
public:
	class FString                                 ModDir;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetModDir) == 0x000008, "Wrong alignment on SteamGameServer_SetModDir");
static_assert(sizeof(SteamGameServer_SetModDir) == 0x000010, "Wrong size on SteamGameServer_SetModDir");
static_assert(offsetof(SteamGameServer_SetModDir, ModDir) == 0x000000, "Member 'SteamGameServer_SetModDir::ModDir' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetPasswordProtected
// 0x0001 (0x0001 - 0x0000)
struct SteamGameServer_SetPasswordProtected final
{
public:
	bool                                          bPasswordProtected;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetPasswordProtected) == 0x000001, "Wrong alignment on SteamGameServer_SetPasswordProtected");
static_assert(sizeof(SteamGameServer_SetPasswordProtected) == 0x000001, "Wrong size on SteamGameServer_SetPasswordProtected");
static_assert(offsetof(SteamGameServer_SetPasswordProtected, bPasswordProtected) == 0x000000, "Member 'SteamGameServer_SetPasswordProtected::bPasswordProtected' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetProduct
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetProduct final
{
public:
	class FString                                 Product;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetProduct) == 0x000008, "Wrong alignment on SteamGameServer_SetProduct");
static_assert(sizeof(SteamGameServer_SetProduct) == 0x000010, "Wrong size on SteamGameServer_SetProduct");
static_assert(offsetof(SteamGameServer_SetProduct, Product) == 0x000000, "Member 'SteamGameServer_SetProduct::Product' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetRegion
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetRegion final
{
public:
	class FString                                 Region;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetRegion) == 0x000008, "Wrong alignment on SteamGameServer_SetRegion");
static_assert(sizeof(SteamGameServer_SetRegion) == 0x000010, "Wrong size on SteamGameServer_SetRegion");
static_assert(offsetof(SteamGameServer_SetRegion, Region) == 0x000000, "Member 'SteamGameServer_SetRegion::Region' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetServerName
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetServerName final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetServerName) == 0x000008, "Wrong alignment on SteamGameServer_SetServerName");
static_assert(sizeof(SteamGameServer_SetServerName) == 0x000010, "Wrong size on SteamGameServer_SetServerName");
static_assert(offsetof(SteamGameServer_SetServerName, ServerName) == 0x000000, "Member 'SteamGameServer_SetServerName::ServerName' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetSpectatorPort
// 0x0004 (0x0004 - 0x0000)
struct SteamGameServer_SetSpectatorPort final
{
public:
	int32                                         SpectatorPort;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetSpectatorPort) == 0x000004, "Wrong alignment on SteamGameServer_SetSpectatorPort");
static_assert(sizeof(SteamGameServer_SetSpectatorPort) == 0x000004, "Wrong size on SteamGameServer_SetSpectatorPort");
static_assert(offsetof(SteamGameServer_SetSpectatorPort, SpectatorPort) == 0x000000, "Member 'SteamGameServer_SetSpectatorPort::SpectatorPort' has a wrong offset!");

// Function SteamCore.SteamGameServer.SetSpectatorServerName
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_SetSpectatorServerName final
{
public:
	class FString                                 SpectatorServerName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_SetSpectatorServerName) == 0x000008, "Wrong alignment on SteamGameServer_SetSpectatorServerName");
static_assert(sizeof(SteamGameServer_SetSpectatorServerName) == 0x000010, "Wrong size on SteamGameServer_SetSpectatorServerName");
static_assert(offsetof(SteamGameServer_SetSpectatorServerName, SpectatorServerName) == 0x000000, "Member 'SteamGameServer_SetSpectatorServerName::SpectatorServerName' has a wrong offset!");

// Function SteamCore.SteamGameServer.UserHasLicenseForApp
// 0x0010 (0x0010 - 0x0000)
struct SteamGameServer_UserHasLicenseForApp final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUserHasLicenseForAppResult              ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamGameServer_UserHasLicenseForApp) == 0x000008, "Wrong alignment on SteamGameServer_UserHasLicenseForApp");
static_assert(sizeof(SteamGameServer_UserHasLicenseForApp) == 0x000010, "Wrong size on SteamGameServer_UserHasLicenseForApp");
static_assert(offsetof(SteamGameServer_UserHasLicenseForApp, SteamID) == 0x000000, "Member 'SteamGameServer_UserHasLicenseForApp::SteamID' has a wrong offset!");
static_assert(offsetof(SteamGameServer_UserHasLicenseForApp, AppID) == 0x000008, "Member 'SteamGameServer_UserHasLicenseForApp::AppID' has a wrong offset!");
static_assert(offsetof(SteamGameServer_UserHasLicenseForApp, ReturnValue) == 0x00000C, "Member 'SteamGameServer_UserHasLicenseForApp::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamGameServer.WasRestartRequested
// 0x0001 (0x0001 - 0x0000)
struct SteamGameServer_WasRestartRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameServer_WasRestartRequested) == 0x000001, "Wrong alignment on SteamGameServer_WasRestartRequested");
static_assert(sizeof(SteamGameServer_WasRestartRequested) == 0x000001, "Wrong size on SteamGameServer_WasRestartRequested");
static_assert(offsetof(SteamGameServer_WasRestartRequested, ReturnValue) == 0x000000, "Member 'SteamGameServer_WasRestartRequested::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.ClearUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct GameServerStats_ClearUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_ClearUserAchievement) == 0x000008, "Wrong alignment on GameServerStats_ClearUserAchievement");
static_assert(sizeof(GameServerStats_ClearUserAchievement) == 0x000020, "Wrong size on GameServerStats_ClearUserAchievement");
static_assert(offsetof(GameServerStats_ClearUserAchievement, SteamIDUser) == 0x000000, "Member 'GameServerStats_ClearUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_ClearUserAchievement, Name_0) == 0x000008, "Member 'GameServerStats_ClearUserAchievement::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_ClearUserAchievement, ReturnValue) == 0x000018, "Member 'GameServerStats_ClearUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.GetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct GameServerStats_GetUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_GetUserAchievement) == 0x000008, "Wrong alignment on GameServerStats_GetUserAchievement");
static_assert(sizeof(GameServerStats_GetUserAchievement) == 0x000020, "Wrong size on GameServerStats_GetUserAchievement");
static_assert(offsetof(GameServerStats_GetUserAchievement, SteamIDUser) == 0x000000, "Member 'GameServerStats_GetUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserAchievement, Name_0) == 0x000008, "Member 'GameServerStats_GetUserAchievement::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserAchievement, bAchieved) == 0x000018, "Member 'GameServerStats_GetUserAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserAchievement, ReturnValue) == 0x000019, "Member 'GameServerStats_GetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.GetUserStatFloat
// 0x0020 (0x0020 - 0x0000)
struct GameServerStats_GetUserStatFloat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_GetUserStatFloat) == 0x000008, "Wrong alignment on GameServerStats_GetUserStatFloat");
static_assert(sizeof(GameServerStats_GetUserStatFloat) == 0x000020, "Wrong size on GameServerStats_GetUserStatFloat");
static_assert(offsetof(GameServerStats_GetUserStatFloat, SteamIDUser) == 0x000000, "Member 'GameServerStats_GetUserStatFloat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserStatFloat, Name_0) == 0x000008, "Member 'GameServerStats_GetUserStatFloat::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserStatFloat, Data) == 0x000018, "Member 'GameServerStats_GetUserStatFloat::Data' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserStatFloat, ReturnValue) == 0x00001C, "Member 'GameServerStats_GetUserStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.GetUserStatInt
// 0x0020 (0x0020 - 0x0000)
struct GameServerStats_GetUserStatInt final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_GetUserStatInt) == 0x000008, "Wrong alignment on GameServerStats_GetUserStatInt");
static_assert(sizeof(GameServerStats_GetUserStatInt) == 0x000020, "Wrong size on GameServerStats_GetUserStatInt");
static_assert(offsetof(GameServerStats_GetUserStatInt, SteamIDUser) == 0x000000, "Member 'GameServerStats_GetUserStatInt::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserStatInt, Name_0) == 0x000008, "Member 'GameServerStats_GetUserStatInt::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserStatInt, Data) == 0x000018, "Member 'GameServerStats_GetUserStatInt::Data' has a wrong offset!");
static_assert(offsetof(GameServerStats_GetUserStatInt, ReturnValue) == 0x00001C, "Member 'GameServerStats_GetUserStatInt::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.ServerRequestUserStats
// 0x0018 (0x0018 - 0x0000)
struct GameServerStats_ServerRequestUserStats final
{
public:
	TDelegate<void(struct FGSStatsReceived& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameServerStats_ServerRequestUserStats) == 0x000008, "Wrong alignment on GameServerStats_ServerRequestUserStats");
static_assert(sizeof(GameServerStats_ServerRequestUserStats) == 0x000018, "Wrong size on GameServerStats_ServerRequestUserStats");
static_assert(offsetof(GameServerStats_ServerRequestUserStats, Callback) == 0x000000, "Member 'GameServerStats_ServerRequestUserStats::Callback' has a wrong offset!");
static_assert(offsetof(GameServerStats_ServerRequestUserStats, SteamIDUser) == 0x000010, "Member 'GameServerStats_ServerRequestUserStats::SteamIDUser' has a wrong offset!");

// Function SteamCore.GameServerStats.ServerStoreUserStats
// 0x0018 (0x0018 - 0x0000)
struct GameServerStats_ServerStoreUserStats final
{
public:
	TDelegate<void(struct FGSStatsStored& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameServerStats_ServerStoreUserStats) == 0x000008, "Wrong alignment on GameServerStats_ServerStoreUserStats");
static_assert(sizeof(GameServerStats_ServerStoreUserStats) == 0x000018, "Wrong size on GameServerStats_ServerStoreUserStats");
static_assert(offsetof(GameServerStats_ServerStoreUserStats, Callback) == 0x000000, "Member 'GameServerStats_ServerStoreUserStats::Callback' has a wrong offset!");
static_assert(offsetof(GameServerStats_ServerStoreUserStats, SteamIDUser) == 0x000010, "Member 'GameServerStats_ServerStoreUserStats::SteamIDUser' has a wrong offset!");

// Function SteamCore.GameServerStats.SetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct GameServerStats_SetUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_SetUserAchievement) == 0x000008, "Wrong alignment on GameServerStats_SetUserAchievement");
static_assert(sizeof(GameServerStats_SetUserAchievement) == 0x000020, "Wrong size on GameServerStats_SetUserAchievement");
static_assert(offsetof(GameServerStats_SetUserAchievement, SteamIDUser) == 0x000000, "Member 'GameServerStats_SetUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserAchievement, Name_0) == 0x000008, "Member 'GameServerStats_SetUserAchievement::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserAchievement, ReturnValue) == 0x000018, "Member 'GameServerStats_SetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.SetUserStatFloat
// 0x0020 (0x0020 - 0x0000)
struct GameServerStats_SetUserStatFloat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_SetUserStatFloat) == 0x000008, "Wrong alignment on GameServerStats_SetUserStatFloat");
static_assert(sizeof(GameServerStats_SetUserStatFloat) == 0x000020, "Wrong size on GameServerStats_SetUserStatFloat");
static_assert(offsetof(GameServerStats_SetUserStatFloat, SteamIDUser) == 0x000000, "Member 'GameServerStats_SetUserStatFloat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserStatFloat, Name_0) == 0x000008, "Member 'GameServerStats_SetUserStatFloat::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserStatFloat, Data) == 0x000018, "Member 'GameServerStats_SetUserStatFloat::Data' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserStatFloat, ReturnValue) == 0x00001C, "Member 'GameServerStats_SetUserStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.SetUserStatInt
// 0x0020 (0x0020 - 0x0000)
struct GameServerStats_SetUserStatInt final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_SetUserStatInt) == 0x000008, "Wrong alignment on GameServerStats_SetUserStatInt");
static_assert(sizeof(GameServerStats_SetUserStatInt) == 0x000020, "Wrong size on GameServerStats_SetUserStatInt");
static_assert(offsetof(GameServerStats_SetUserStatInt, SteamIDUser) == 0x000000, "Member 'GameServerStats_SetUserStatInt::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserStatInt, Name_0) == 0x000008, "Member 'GameServerStats_SetUserStatInt::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserStatInt, Data) == 0x000018, "Member 'GameServerStats_SetUserStatInt::Data' has a wrong offset!");
static_assert(offsetof(GameServerStats_SetUserStatInt, ReturnValue) == 0x00001C, "Member 'GameServerStats_SetUserStatInt::ReturnValue' has a wrong offset!");

// Function SteamCore.GameServerStats.UpdateUserAvgRateStat
// 0x0028 (0x0028 - 0x0000)
struct GameServerStats_UpdateUserAvgRateStat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CountThisSession;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SessionLength;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameServerStats_UpdateUserAvgRateStat) == 0x000008, "Wrong alignment on GameServerStats_UpdateUserAvgRateStat");
static_assert(sizeof(GameServerStats_UpdateUserAvgRateStat) == 0x000028, "Wrong size on GameServerStats_UpdateUserAvgRateStat");
static_assert(offsetof(GameServerStats_UpdateUserAvgRateStat, SteamIDUser) == 0x000000, "Member 'GameServerStats_UpdateUserAvgRateStat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(GameServerStats_UpdateUserAvgRateStat, Name_0) == 0x000008, "Member 'GameServerStats_UpdateUserAvgRateStat::Name_0' has a wrong offset!");
static_assert(offsetof(GameServerStats_UpdateUserAvgRateStat, CountThisSession) == 0x000018, "Member 'GameServerStats_UpdateUserAvgRateStat::CountThisSession' has a wrong offset!");
static_assert(offsetof(GameServerStats_UpdateUserAvgRateStat, SessionLength) == 0x00001C, "Member 'GameServerStats_UpdateUserAvgRateStat::SessionLength' has a wrong offset!");
static_assert(offsetof(GameServerStats_UpdateUserAvgRateStat, ReturnValue) == 0x000020, "Member 'GameServerStats_UpdateUserAvgRateStat::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.ActivateActionSet
// 0x0010 (0x0010 - 0x0000)
struct Input_ActivateActionSet final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetHandle;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_ActivateActionSet) == 0x000008, "Wrong alignment on Input_ActivateActionSet");
static_assert(sizeof(Input_ActivateActionSet) == 0x000010, "Wrong size on Input_ActivateActionSet");
static_assert(offsetof(Input_ActivateActionSet, Handle) == 0x000000, "Member 'Input_ActivateActionSet::Handle' has a wrong offset!");
static_assert(offsetof(Input_ActivateActionSet, ActionSetHandle) == 0x000008, "Member 'Input_ActivateActionSet::ActionSetHandle' has a wrong offset!");

// Function SteamCore.Input.ActivateActionSetLayer
// 0x0010 (0x0010 - 0x0000)
struct Input_ActivateActionSetLayer final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetLayerHandle;                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_ActivateActionSetLayer) == 0x000008, "Wrong alignment on Input_ActivateActionSetLayer");
static_assert(sizeof(Input_ActivateActionSetLayer) == 0x000010, "Wrong size on Input_ActivateActionSetLayer");
static_assert(offsetof(Input_ActivateActionSetLayer, Handle) == 0x000000, "Member 'Input_ActivateActionSetLayer::Handle' has a wrong offset!");
static_assert(offsetof(Input_ActivateActionSetLayer, ActionSetLayerHandle) == 0x000008, "Member 'Input_ActivateActionSetLayer::ActionSetLayerHandle' has a wrong offset!");

// Function SteamCore.Input.DeactivateActionSetLayer
// 0x0010 (0x0010 - 0x0000)
struct Input_DeactivateActionSetLayer final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetLayerHandle;                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_DeactivateActionSetLayer) == 0x000008, "Wrong alignment on Input_DeactivateActionSetLayer");
static_assert(sizeof(Input_DeactivateActionSetLayer) == 0x000010, "Wrong size on Input_DeactivateActionSetLayer");
static_assert(offsetof(Input_DeactivateActionSetLayer, Handle) == 0x000000, "Member 'Input_DeactivateActionSetLayer::Handle' has a wrong offset!");
static_assert(offsetof(Input_DeactivateActionSetLayer, ActionSetLayerHandle) == 0x000008, "Member 'Input_DeactivateActionSetLayer::ActionSetLayerHandle' has a wrong offset!");

// Function SteamCore.Input.DeactivateAllActionSetLayers
// 0x0008 (0x0008 - 0x0000)
struct Input_DeactivateAllActionSetLayers final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_DeactivateAllActionSetLayers) == 0x000008, "Wrong alignment on Input_DeactivateAllActionSetLayers");
static_assert(sizeof(Input_DeactivateAllActionSetLayers) == 0x000008, "Wrong size on Input_DeactivateAllActionSetLayers");
static_assert(offsetof(Input_DeactivateAllActionSetLayers, Handle) == 0x000000, "Member 'Input_DeactivateAllActionSetLayers::Handle' has a wrong offset!");

// Function SteamCore.Input.GetActionOriginFromXboxOrigin
// 0x0010 (0x0010 - 0x0000)
struct Input_GetActionOriginFromXboxOrigin final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreXboxOrigin                          Origin;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreInputActionOrigin                   ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetActionOriginFromXboxOrigin) == 0x000008, "Wrong alignment on Input_GetActionOriginFromXboxOrigin");
static_assert(sizeof(Input_GetActionOriginFromXboxOrigin) == 0x000010, "Wrong size on Input_GetActionOriginFromXboxOrigin");
static_assert(offsetof(Input_GetActionOriginFromXboxOrigin, Handle) == 0x000000, "Member 'Input_GetActionOriginFromXboxOrigin::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetActionOriginFromXboxOrigin, Origin) == 0x000008, "Member 'Input_GetActionOriginFromXboxOrigin::Origin' has a wrong offset!");
static_assert(offsetof(Input_GetActionOriginFromXboxOrigin, ReturnValue) == 0x000009, "Member 'Input_GetActionOriginFromXboxOrigin::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetActionSetHandle
// 0x0018 (0x0018 - 0x0000)
struct Input_GetActionSetHandle final
{
public:
	class FString                                 ActionSetName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetActionSetHandle) == 0x000008, "Wrong alignment on Input_GetActionSetHandle");
static_assert(sizeof(Input_GetActionSetHandle) == 0x000018, "Wrong size on Input_GetActionSetHandle");
static_assert(offsetof(Input_GetActionSetHandle, ActionSetName) == 0x000000, "Member 'Input_GetActionSetHandle::ActionSetName' has a wrong offset!");
static_assert(offsetof(Input_GetActionSetHandle, ReturnValue) == 0x000010, "Member 'Input_GetActionSetHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetActiveActionSetLayers
// 0x0020 (0x0020 - 0x0000)
struct Input_GetActiveActionSetLayers final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionSetHandle>          Data;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetActiveActionSetLayers) == 0x000008, "Wrong alignment on Input_GetActiveActionSetLayers");
static_assert(sizeof(Input_GetActiveActionSetLayers) == 0x000020, "Wrong size on Input_GetActiveActionSetLayers");
static_assert(offsetof(Input_GetActiveActionSetLayers, Handle) == 0x000000, "Member 'Input_GetActiveActionSetLayers::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetActiveActionSetLayers, Data) == 0x000008, "Member 'Input_GetActiveActionSetLayers::Data' has a wrong offset!");
static_assert(offsetof(Input_GetActiveActionSetLayers, ReturnValue) == 0x000018, "Member 'Input_GetActiveActionSetLayers::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetAnalogActionData
// 0x0020 (0x0020 - 0x0000)
struct Input_GetAnalogActionData final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               AnalogActionHandle;                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAnalogActionData                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetAnalogActionData) == 0x000008, "Wrong alignment on Input_GetAnalogActionData");
static_assert(sizeof(Input_GetAnalogActionData) == 0x000020, "Wrong size on Input_GetAnalogActionData");
static_assert(offsetof(Input_GetAnalogActionData, Handle) == 0x000000, "Member 'Input_GetAnalogActionData::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetAnalogActionData, AnalogActionHandle) == 0x000008, "Member 'Input_GetAnalogActionData::AnalogActionHandle' has a wrong offset!");
static_assert(offsetof(Input_GetAnalogActionData, ReturnValue) == 0x000010, "Member 'Input_GetAnalogActionData::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetAnalogActionHandle
// 0x0018 (0x0018 - 0x0000)
struct Input_GetAnalogActionHandle final
{
public:
	class FString                                 PszActionName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetAnalogActionHandle) == 0x000008, "Wrong alignment on Input_GetAnalogActionHandle");
static_assert(sizeof(Input_GetAnalogActionHandle) == 0x000018, "Wrong size on Input_GetAnalogActionHandle");
static_assert(offsetof(Input_GetAnalogActionHandle, PszActionName) == 0x000000, "Member 'Input_GetAnalogActionHandle::PszActionName' has a wrong offset!");
static_assert(offsetof(Input_GetAnalogActionHandle, ReturnValue) == 0x000010, "Member 'Input_GetAnalogActionHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetAnalogActionOrigins
// 0x0030 (0x0030 - 0x0000)
struct Input_GetAnalogActionOrigins final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetHandle;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               AnalogActionHandle;                                // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamCoreInputActionOrigin>           OriginsOut;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetAnalogActionOrigins) == 0x000008, "Wrong alignment on Input_GetAnalogActionOrigins");
static_assert(sizeof(Input_GetAnalogActionOrigins) == 0x000030, "Wrong size on Input_GetAnalogActionOrigins");
static_assert(offsetof(Input_GetAnalogActionOrigins, Handle) == 0x000000, "Member 'Input_GetAnalogActionOrigins::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetAnalogActionOrigins, ActionSetHandle) == 0x000008, "Member 'Input_GetAnalogActionOrigins::ActionSetHandle' has a wrong offset!");
static_assert(offsetof(Input_GetAnalogActionOrigins, AnalogActionHandle) == 0x000010, "Member 'Input_GetAnalogActionOrigins::AnalogActionHandle' has a wrong offset!");
static_assert(offsetof(Input_GetAnalogActionOrigins, OriginsOut) == 0x000018, "Member 'Input_GetAnalogActionOrigins::OriginsOut' has a wrong offset!");
static_assert(offsetof(Input_GetAnalogActionOrigins, ReturnValue) == 0x000028, "Member 'Input_GetAnalogActionOrigins::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetConnectedControllers
// 0x0018 (0x0018 - 0x0000)
struct Input_GetConnectedControllers final
{
public:
	TArray<struct FInputHandle>                   OutHandles;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetConnectedControllers) == 0x000008, "Wrong alignment on Input_GetConnectedControllers");
static_assert(sizeof(Input_GetConnectedControllers) == 0x000018, "Wrong size on Input_GetConnectedControllers");
static_assert(offsetof(Input_GetConnectedControllers, OutHandles) == 0x000000, "Member 'Input_GetConnectedControllers::OutHandles' has a wrong offset!");
static_assert(offsetof(Input_GetConnectedControllers, ReturnValue) == 0x000010, "Member 'Input_GetConnectedControllers::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetControllerForGamepadIndex
// 0x0010 (0x0010 - 0x0000)
struct Input_GetControllerForGamepadIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputHandle                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetControllerForGamepadIndex) == 0x000008, "Wrong alignment on Input_GetControllerForGamepadIndex");
static_assert(sizeof(Input_GetControllerForGamepadIndex) == 0x000010, "Wrong size on Input_GetControllerForGamepadIndex");
static_assert(offsetof(Input_GetControllerForGamepadIndex, Index_0) == 0x000000, "Member 'Input_GetControllerForGamepadIndex::Index_0' has a wrong offset!");
static_assert(offsetof(Input_GetControllerForGamepadIndex, ReturnValue) == 0x000008, "Member 'Input_GetControllerForGamepadIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetCurrentActionSet
// 0x0010 (0x0010 - 0x0000)
struct Input_GetCurrentActionSet final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetCurrentActionSet) == 0x000008, "Wrong alignment on Input_GetCurrentActionSet");
static_assert(sizeof(Input_GetCurrentActionSet) == 0x000010, "Wrong size on Input_GetCurrentActionSet");
static_assert(offsetof(Input_GetCurrentActionSet, Handle) == 0x000000, "Member 'Input_GetCurrentActionSet::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetCurrentActionSet, ReturnValue) == 0x000008, "Member 'Input_GetCurrentActionSet::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetDeviceBindingRevision
// 0x0018 (0x0018 - 0x0000)
struct Input_GetDeviceBindingRevision final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Major;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetDeviceBindingRevision) == 0x000008, "Wrong alignment on Input_GetDeviceBindingRevision");
static_assert(sizeof(Input_GetDeviceBindingRevision) == 0x000018, "Wrong size on Input_GetDeviceBindingRevision");
static_assert(offsetof(Input_GetDeviceBindingRevision, Handle) == 0x000000, "Member 'Input_GetDeviceBindingRevision::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetDeviceBindingRevision, Major) == 0x000008, "Member 'Input_GetDeviceBindingRevision::Major' has a wrong offset!");
static_assert(offsetof(Input_GetDeviceBindingRevision, Minor) == 0x00000C, "Member 'Input_GetDeviceBindingRevision::Minor' has a wrong offset!");
static_assert(offsetof(Input_GetDeviceBindingRevision, ReturnValue) == 0x000010, "Member 'Input_GetDeviceBindingRevision::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetDigitalActionData
// 0x0018 (0x0018 - 0x0000)
struct Input_GetDigitalActionData final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDigitalActionHandle              DigitalActionHandle;                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDigitalActionData                ReturnValue;                                       // 0x0010(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetDigitalActionData) == 0x000008, "Wrong alignment on Input_GetDigitalActionData");
static_assert(sizeof(Input_GetDigitalActionData) == 0x000018, "Wrong size on Input_GetDigitalActionData");
static_assert(offsetof(Input_GetDigitalActionData, Handle) == 0x000000, "Member 'Input_GetDigitalActionData::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetDigitalActionData, DigitalActionHandle) == 0x000008, "Member 'Input_GetDigitalActionData::DigitalActionHandle' has a wrong offset!");
static_assert(offsetof(Input_GetDigitalActionData, ReturnValue) == 0x000010, "Member 'Input_GetDigitalActionData::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetDigitalActionHandle
// 0x0018 (0x0018 - 0x0000)
struct Input_GetDigitalActionHandle final
{
public:
	class FString                                 PszActionName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDigitalActionHandle              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetDigitalActionHandle) == 0x000008, "Wrong alignment on Input_GetDigitalActionHandle");
static_assert(sizeof(Input_GetDigitalActionHandle) == 0x000018, "Wrong size on Input_GetDigitalActionHandle");
static_assert(offsetof(Input_GetDigitalActionHandle, PszActionName) == 0x000000, "Member 'Input_GetDigitalActionHandle::PszActionName' has a wrong offset!");
static_assert(offsetof(Input_GetDigitalActionHandle, ReturnValue) == 0x000010, "Member 'Input_GetDigitalActionHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetDigitalActionOrigins
// 0x0030 (0x0030 - 0x0000)
struct Input_GetDigitalActionOrigins final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetHandle;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDigitalActionHandle              DigitalActionHandle;                               // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamCoreInputActionOrigin>           OriginsOut;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetDigitalActionOrigins) == 0x000008, "Wrong alignment on Input_GetDigitalActionOrigins");
static_assert(sizeof(Input_GetDigitalActionOrigins) == 0x000030, "Wrong size on Input_GetDigitalActionOrigins");
static_assert(offsetof(Input_GetDigitalActionOrigins, Handle) == 0x000000, "Member 'Input_GetDigitalActionOrigins::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetDigitalActionOrigins, ActionSetHandle) == 0x000008, "Member 'Input_GetDigitalActionOrigins::ActionSetHandle' has a wrong offset!");
static_assert(offsetof(Input_GetDigitalActionOrigins, DigitalActionHandle) == 0x000010, "Member 'Input_GetDigitalActionOrigins::DigitalActionHandle' has a wrong offset!");
static_assert(offsetof(Input_GetDigitalActionOrigins, OriginsOut) == 0x000018, "Member 'Input_GetDigitalActionOrigins::OriginsOut' has a wrong offset!");
static_assert(offsetof(Input_GetDigitalActionOrigins, ReturnValue) == 0x000028, "Member 'Input_GetDigitalActionOrigins::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetGamepadIndexForController
// 0x0010 (0x0010 - 0x0000)
struct Input_GetGamepadIndexForController final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetGamepadIndexForController) == 0x000008, "Wrong alignment on Input_GetGamepadIndexForController");
static_assert(sizeof(Input_GetGamepadIndexForController) == 0x000010, "Wrong size on Input_GetGamepadIndexForController");
static_assert(offsetof(Input_GetGamepadIndexForController, Handle) == 0x000000, "Member 'Input_GetGamepadIndexForController::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetGamepadIndexForController, ReturnValue) == 0x000008, "Member 'Input_GetGamepadIndexForController::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetGlyphForActionOrigin
// 0x0018 (0x0018 - 0x0000)
struct Input_GetGlyphForActionOrigin final
{
public:
	ESteamCoreInputActionOrigin                   Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetGlyphForActionOrigin) == 0x000008, "Wrong alignment on Input_GetGlyphForActionOrigin");
static_assert(sizeof(Input_GetGlyphForActionOrigin) == 0x000018, "Wrong size on Input_GetGlyphForActionOrigin");
static_assert(offsetof(Input_GetGlyphForActionOrigin, Origin) == 0x000000, "Member 'Input_GetGlyphForActionOrigin::Origin' has a wrong offset!");
static_assert(offsetof(Input_GetGlyphForActionOrigin, ReturnValue) == 0x000008, "Member 'Input_GetGlyphForActionOrigin::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetGlyphForXboxOrigin
// 0x0018 (0x0018 - 0x0000)
struct Input_GetGlyphForXboxOrigin final
{
public:
	ESteamCoreXboxOrigin                          Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetGlyphForXboxOrigin) == 0x000008, "Wrong alignment on Input_GetGlyphForXboxOrigin");
static_assert(sizeof(Input_GetGlyphForXboxOrigin) == 0x000018, "Wrong size on Input_GetGlyphForXboxOrigin");
static_assert(offsetof(Input_GetGlyphForXboxOrigin, Origin) == 0x000000, "Member 'Input_GetGlyphForXboxOrigin::Origin' has a wrong offset!");
static_assert(offsetof(Input_GetGlyphForXboxOrigin, ReturnValue) == 0x000008, "Member 'Input_GetGlyphForXboxOrigin::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetInputTypeForHandle
// 0x0010 (0x0010 - 0x0000)
struct Input_GetInputTypeForHandle final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreInputType                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetInputTypeForHandle) == 0x000008, "Wrong alignment on Input_GetInputTypeForHandle");
static_assert(sizeof(Input_GetInputTypeForHandle) == 0x000010, "Wrong size on Input_GetInputTypeForHandle");
static_assert(offsetof(Input_GetInputTypeForHandle, Handle) == 0x000000, "Member 'Input_GetInputTypeForHandle::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetInputTypeForHandle, ReturnValue) == 0x000008, "Member 'Input_GetInputTypeForHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetMotionData
// 0x0030 (0x0030 - 0x0000)
struct Input_GetMotionData final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputMotionData                       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetMotionData) == 0x000008, "Wrong alignment on Input_GetMotionData");
static_assert(sizeof(Input_GetMotionData) == 0x000030, "Wrong size on Input_GetMotionData");
static_assert(offsetof(Input_GetMotionData, Handle) == 0x000000, "Member 'Input_GetMotionData::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetMotionData, ReturnValue) == 0x000008, "Member 'Input_GetMotionData::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetRemotePlaySessionID
// 0x0010 (0x0010 - 0x0000)
struct Input_GetRemotePlaySessionID final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_GetRemotePlaySessionID) == 0x000008, "Wrong alignment on Input_GetRemotePlaySessionID");
static_assert(sizeof(Input_GetRemotePlaySessionID) == 0x000010, "Wrong size on Input_GetRemotePlaySessionID");
static_assert(offsetof(Input_GetRemotePlaySessionID, Handle) == 0x000000, "Member 'Input_GetRemotePlaySessionID::Handle' has a wrong offset!");
static_assert(offsetof(Input_GetRemotePlaySessionID, ReturnValue) == 0x000008, "Member 'Input_GetRemotePlaySessionID::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetStringForActionOrigin
// 0x0018 (0x0018 - 0x0000)
struct Input_GetStringForActionOrigin final
{
public:
	ESteamCoreInputActionOrigin                   Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetStringForActionOrigin) == 0x000008, "Wrong alignment on Input_GetStringForActionOrigin");
static_assert(sizeof(Input_GetStringForActionOrigin) == 0x000018, "Wrong size on Input_GetStringForActionOrigin");
static_assert(offsetof(Input_GetStringForActionOrigin, Origin) == 0x000000, "Member 'Input_GetStringForActionOrigin::Origin' has a wrong offset!");
static_assert(offsetof(Input_GetStringForActionOrigin, ReturnValue) == 0x000008, "Member 'Input_GetStringForActionOrigin::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.GetStringForXboxOrigin
// 0x0018 (0x0018 - 0x0000)
struct Input_GetStringForXboxOrigin final
{
public:
	ESteamCoreXboxOrigin                          Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_GetStringForXboxOrigin) == 0x000008, "Wrong alignment on Input_GetStringForXboxOrigin");
static_assert(sizeof(Input_GetStringForXboxOrigin) == 0x000018, "Wrong size on Input_GetStringForXboxOrigin");
static_assert(offsetof(Input_GetStringForXboxOrigin, Origin) == 0x000000, "Member 'Input_GetStringForXboxOrigin::Origin' has a wrong offset!");
static_assert(offsetof(Input_GetStringForXboxOrigin, ReturnValue) == 0x000008, "Member 'Input_GetStringForXboxOrigin::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.Init
// 0x0001 (0x0001 - 0x0000)
struct Input_Init final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_Init) == 0x000001, "Wrong alignment on Input_Init");
static_assert(sizeof(Input_Init) == 0x000001, "Wrong size on Input_Init");
static_assert(offsetof(Input_Init, ReturnValue) == 0x000000, "Member 'Input_Init::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.SetLEDColor
// 0x0010 (0x0010 - 0x0000)
struct Input_SetLEDColor final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorR;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorG;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorB;                                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreInputLEDFlag                        Flags_0;                                           // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_SetLEDColor) == 0x000008, "Wrong alignment on Input_SetLEDColor");
static_assert(sizeof(Input_SetLEDColor) == 0x000010, "Wrong size on Input_SetLEDColor");
static_assert(offsetof(Input_SetLEDColor, Handle) == 0x000000, "Member 'Input_SetLEDColor::Handle' has a wrong offset!");
static_assert(offsetof(Input_SetLEDColor, ColorR) == 0x000008, "Member 'Input_SetLEDColor::ColorR' has a wrong offset!");
static_assert(offsetof(Input_SetLEDColor, ColorG) == 0x000009, "Member 'Input_SetLEDColor::ColorG' has a wrong offset!");
static_assert(offsetof(Input_SetLEDColor, ColorB) == 0x00000A, "Member 'Input_SetLEDColor::ColorB' has a wrong offset!");
static_assert(offsetof(Input_SetLEDColor, Flags_0) == 0x00000B, "Member 'Input_SetLEDColor::Flags_0' has a wrong offset!");

// Function SteamCore.Input.ShowBindingPanel
// 0x0010 (0x0010 - 0x0000)
struct Input_ShowBindingPanel final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_ShowBindingPanel) == 0x000008, "Wrong alignment on Input_ShowBindingPanel");
static_assert(sizeof(Input_ShowBindingPanel) == 0x000010, "Wrong size on Input_ShowBindingPanel");
static_assert(offsetof(Input_ShowBindingPanel, Handle) == 0x000000, "Member 'Input_ShowBindingPanel::Handle' has a wrong offset!");
static_assert(offsetof(Input_ShowBindingPanel, ReturnValue) == 0x000008, "Member 'Input_ShowBindingPanel::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.Shutdown
// 0x0001 (0x0001 - 0x0000)
struct Input_Shutdown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_Shutdown) == 0x000001, "Wrong alignment on Input_Shutdown");
static_assert(sizeof(Input_Shutdown) == 0x000001, "Wrong size on Input_Shutdown");
static_assert(offsetof(Input_Shutdown, ReturnValue) == 0x000000, "Member 'Input_Shutdown::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.StopAnalogActionMomentum
// 0x0010 (0x0010 - 0x0000)
struct Input_StopAnalogActionMomentum final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               EAction;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_StopAnalogActionMomentum) == 0x000008, "Wrong alignment on Input_StopAnalogActionMomentum");
static_assert(sizeof(Input_StopAnalogActionMomentum) == 0x000010, "Wrong size on Input_StopAnalogActionMomentum");
static_assert(offsetof(Input_StopAnalogActionMomentum, Handle) == 0x000000, "Member 'Input_StopAnalogActionMomentum::Handle' has a wrong offset!");
static_assert(offsetof(Input_StopAnalogActionMomentum, EAction) == 0x000008, "Member 'Input_StopAnalogActionMomentum::EAction' has a wrong offset!");

// Function SteamCore.Input.TranslateActionOrigin
// 0x0003 (0x0003 - 0x0000)
struct Input_TranslateActionOrigin final
{
public:
	ESteamCoreInputType                           DestinationInputType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreInputActionOrigin                   SourceOrigin;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreInputActionOrigin                   ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Input_TranslateActionOrigin) == 0x000001, "Wrong alignment on Input_TranslateActionOrigin");
static_assert(sizeof(Input_TranslateActionOrigin) == 0x000003, "Wrong size on Input_TranslateActionOrigin");
static_assert(offsetof(Input_TranslateActionOrigin, DestinationInputType) == 0x000000, "Member 'Input_TranslateActionOrigin::DestinationInputType' has a wrong offset!");
static_assert(offsetof(Input_TranslateActionOrigin, SourceOrigin) == 0x000001, "Member 'Input_TranslateActionOrigin::SourceOrigin' has a wrong offset!");
static_assert(offsetof(Input_TranslateActionOrigin, ReturnValue) == 0x000002, "Member 'Input_TranslateActionOrigin::ReturnValue' has a wrong offset!");

// Function SteamCore.Input.TriggerHapticPulse
// 0x0010 (0x0010 - 0x0000)
struct Input_TriggerHapticPulse final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreControllerPad                       TargetPad;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DurationMicroSec;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_TriggerHapticPulse) == 0x000008, "Wrong alignment on Input_TriggerHapticPulse");
static_assert(sizeof(Input_TriggerHapticPulse) == 0x000010, "Wrong size on Input_TriggerHapticPulse");
static_assert(offsetof(Input_TriggerHapticPulse, Handle) == 0x000000, "Member 'Input_TriggerHapticPulse::Handle' has a wrong offset!");
static_assert(offsetof(Input_TriggerHapticPulse, TargetPad) == 0x000008, "Member 'Input_TriggerHapticPulse::TargetPad' has a wrong offset!");
static_assert(offsetof(Input_TriggerHapticPulse, DurationMicroSec) == 0x000009, "Member 'Input_TriggerHapticPulse::DurationMicroSec' has a wrong offset!");

// Function SteamCore.Input.TriggerRepeatedHapticPulse
// 0x0010 (0x0010 - 0x0000)
struct Input_TriggerRepeatedHapticPulse final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreControllerPad                       TargetPad;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DurationMicroSec;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OffMicroSec;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Repeat;                                            // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Flags_0;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_TriggerRepeatedHapticPulse) == 0x000008, "Wrong alignment on Input_TriggerRepeatedHapticPulse");
static_assert(sizeof(Input_TriggerRepeatedHapticPulse) == 0x000010, "Wrong size on Input_TriggerRepeatedHapticPulse");
static_assert(offsetof(Input_TriggerRepeatedHapticPulse, Handle) == 0x000000, "Member 'Input_TriggerRepeatedHapticPulse::Handle' has a wrong offset!");
static_assert(offsetof(Input_TriggerRepeatedHapticPulse, TargetPad) == 0x000008, "Member 'Input_TriggerRepeatedHapticPulse::TargetPad' has a wrong offset!");
static_assert(offsetof(Input_TriggerRepeatedHapticPulse, DurationMicroSec) == 0x000009, "Member 'Input_TriggerRepeatedHapticPulse::DurationMicroSec' has a wrong offset!");
static_assert(offsetof(Input_TriggerRepeatedHapticPulse, OffMicroSec) == 0x00000A, "Member 'Input_TriggerRepeatedHapticPulse::OffMicroSec' has a wrong offset!");
static_assert(offsetof(Input_TriggerRepeatedHapticPulse, Repeat) == 0x00000B, "Member 'Input_TriggerRepeatedHapticPulse::Repeat' has a wrong offset!");
static_assert(offsetof(Input_TriggerRepeatedHapticPulse, Flags_0) == 0x00000C, "Member 'Input_TriggerRepeatedHapticPulse::Flags_0' has a wrong offset!");

// Function SteamCore.Input.TriggerVibration
// 0x0010 (0x0010 - 0x0000)
struct Input_TriggerVibration final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LeftSpeed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RightSpeed;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Input_TriggerVibration) == 0x000008, "Wrong alignment on Input_TriggerVibration");
static_assert(sizeof(Input_TriggerVibration) == 0x000010, "Wrong size on Input_TriggerVibration");
static_assert(offsetof(Input_TriggerVibration, Handle) == 0x000000, "Member 'Input_TriggerVibration::Handle' has a wrong offset!");
static_assert(offsetof(Input_TriggerVibration, LeftSpeed) == 0x000008, "Member 'Input_TriggerVibration::LeftSpeed' has a wrong offset!");
static_assert(offsetof(Input_TriggerVibration, RightSpeed) == 0x000009, "Member 'Input_TriggerVibration::RightSpeed' has a wrong offset!");

// Function SteamCore.Inventory.AddPromoItem
// 0x000C (0x000C - 0x0000)
struct Inventory_AddPromoItem final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemDef                          ItemDef;                                           // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_AddPromoItem) == 0x000004, "Wrong alignment on Inventory_AddPromoItem");
static_assert(sizeof(Inventory_AddPromoItem) == 0x00000C, "Wrong size on Inventory_AddPromoItem");
static_assert(offsetof(Inventory_AddPromoItem, Result) == 0x000000, "Member 'Inventory_AddPromoItem::Result' has a wrong offset!");
static_assert(offsetof(Inventory_AddPromoItem, ItemDef) == 0x000004, "Member 'Inventory_AddPromoItem::ItemDef' has a wrong offset!");
static_assert(offsetof(Inventory_AddPromoItem, ReturnValue) == 0x000008, "Member 'Inventory_AddPromoItem::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.AddPromoItems
// 0x0020 (0x0020 - 0x0000)
struct Inventory_AddPromoItems final
{
public:
	struct FSteamInventoryResult                  OutResult;                                         // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_AddPromoItems) == 0x000008, "Wrong alignment on Inventory_AddPromoItems");
static_assert(sizeof(Inventory_AddPromoItems) == 0x000020, "Wrong size on Inventory_AddPromoItems");
static_assert(offsetof(Inventory_AddPromoItems, OutResult) == 0x000000, "Member 'Inventory_AddPromoItems::OutResult' has a wrong offset!");
static_assert(offsetof(Inventory_AddPromoItems, ItemDefs) == 0x000008, "Member 'Inventory_AddPromoItems::ItemDefs' has a wrong offset!");
static_assert(offsetof(Inventory_AddPromoItems, ReturnValue) == 0x000018, "Member 'Inventory_AddPromoItems::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.CheckResultSteamID
// 0x0018 (0x0018 - 0x0000)
struct Inventory_CheckResultSteamID final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDExpected;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_CheckResultSteamID) == 0x000008, "Wrong alignment on Inventory_CheckResultSteamID");
static_assert(sizeof(Inventory_CheckResultSteamID) == 0x000018, "Wrong size on Inventory_CheckResultSteamID");
static_assert(offsetof(Inventory_CheckResultSteamID, Handle) == 0x000000, "Member 'Inventory_CheckResultSteamID::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_CheckResultSteamID, SteamIDExpected) == 0x000008, "Member 'Inventory_CheckResultSteamID::SteamIDExpected' has a wrong offset!");
static_assert(offsetof(Inventory_CheckResultSteamID, ReturnValue) == 0x000010, "Member 'Inventory_CheckResultSteamID::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.ConsumeItem
// 0x0018 (0x0018 - 0x0000)
struct Inventory_ConsumeItem final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamItemInstanceID                   ItemConsume;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_ConsumeItem) == 0x000008, "Wrong alignment on Inventory_ConsumeItem");
static_assert(sizeof(Inventory_ConsumeItem) == 0x000018, "Wrong size on Inventory_ConsumeItem");
static_assert(offsetof(Inventory_ConsumeItem, Result) == 0x000000, "Member 'Inventory_ConsumeItem::Result' has a wrong offset!");
static_assert(offsetof(Inventory_ConsumeItem, ItemConsume) == 0x000008, "Member 'Inventory_ConsumeItem::ItemConsume' has a wrong offset!");
static_assert(offsetof(Inventory_ConsumeItem, Quantity) == 0x000010, "Member 'Inventory_ConsumeItem::Quantity' has a wrong offset!");
static_assert(offsetof(Inventory_ConsumeItem, ReturnValue) == 0x000014, "Member 'Inventory_ConsumeItem::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.DeserializeResult
// 0x0020 (0x0020 - 0x0000)
struct Inventory_DeserializeResult final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Buffer;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bReservedMustBeFalse;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_DeserializeResult) == 0x000008, "Wrong alignment on Inventory_DeserializeResult");
static_assert(sizeof(Inventory_DeserializeResult) == 0x000020, "Wrong size on Inventory_DeserializeResult");
static_assert(offsetof(Inventory_DeserializeResult, Result) == 0x000000, "Member 'Inventory_DeserializeResult::Result' has a wrong offset!");
static_assert(offsetof(Inventory_DeserializeResult, Buffer) == 0x000008, "Member 'Inventory_DeserializeResult::Buffer' has a wrong offset!");
static_assert(offsetof(Inventory_DeserializeResult, bReservedMustBeFalse) == 0x000018, "Member 'Inventory_DeserializeResult::bReservedMustBeFalse' has a wrong offset!");
static_assert(offsetof(Inventory_DeserializeResult, ReturnValue) == 0x000019, "Member 'Inventory_DeserializeResult::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.DestroyResult
// 0x0004 (0x0004 - 0x0000)
struct Inventory_DestroyResult final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_DestroyResult) == 0x000004, "Wrong alignment on Inventory_DestroyResult");
static_assert(sizeof(Inventory_DestroyResult) == 0x000004, "Wrong size on Inventory_DestroyResult");
static_assert(offsetof(Inventory_DestroyResult, Handle) == 0x000000, "Member 'Inventory_DestroyResult::Handle' has a wrong offset!");

// Function SteamCore.Inventory.ExchangeItems
// 0x0050 (0x0050 - 0x0000)
struct Inventory_ExchangeItems final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  ArrayGenerate;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayGenerateQuantity;                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemInstanceID>           ArrayDestroy;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayDestroyQuantity;                              // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_ExchangeItems) == 0x000008, "Wrong alignment on Inventory_ExchangeItems");
static_assert(sizeof(Inventory_ExchangeItems) == 0x000050, "Wrong size on Inventory_ExchangeItems");
static_assert(offsetof(Inventory_ExchangeItems, Result) == 0x000000, "Member 'Inventory_ExchangeItems::Result' has a wrong offset!");
static_assert(offsetof(Inventory_ExchangeItems, ArrayGenerate) == 0x000008, "Member 'Inventory_ExchangeItems::ArrayGenerate' has a wrong offset!");
static_assert(offsetof(Inventory_ExchangeItems, ArrayGenerateQuantity) == 0x000018, "Member 'Inventory_ExchangeItems::ArrayGenerateQuantity' has a wrong offset!");
static_assert(offsetof(Inventory_ExchangeItems, ArrayDestroy) == 0x000028, "Member 'Inventory_ExchangeItems::ArrayDestroy' has a wrong offset!");
static_assert(offsetof(Inventory_ExchangeItems, ArrayDestroyQuantity) == 0x000038, "Member 'Inventory_ExchangeItems::ArrayDestroyQuantity' has a wrong offset!");
static_assert(offsetof(Inventory_ExchangeItems, ReturnValue) == 0x000048, "Member 'Inventory_ExchangeItems::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GenerateItems
// 0x0030 (0x0030 - 0x0000)
struct Inventory_GenerateItems final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GenerateItems) == 0x000008, "Wrong alignment on Inventory_GenerateItems");
static_assert(sizeof(Inventory_GenerateItems) == 0x000030, "Wrong size on Inventory_GenerateItems");
static_assert(offsetof(Inventory_GenerateItems, Result) == 0x000000, "Member 'Inventory_GenerateItems::Result' has a wrong offset!");
static_assert(offsetof(Inventory_GenerateItems, ItemDefs) == 0x000008, "Member 'Inventory_GenerateItems::ItemDefs' has a wrong offset!");
static_assert(offsetof(Inventory_GenerateItems, Quantity) == 0x000018, "Member 'Inventory_GenerateItems::Quantity' has a wrong offset!");
static_assert(offsetof(Inventory_GenerateItems, ReturnValue) == 0x000028, "Member 'Inventory_GenerateItems::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetAllItems
// 0x0008 (0x0008 - 0x0000)
struct Inventory_GetAllItems final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetAllItems) == 0x000004, "Wrong alignment on Inventory_GetAllItems");
static_assert(sizeof(Inventory_GetAllItems) == 0x000008, "Wrong size on Inventory_GetAllItems");
static_assert(offsetof(Inventory_GetAllItems, Handle) == 0x000000, "Member 'Inventory_GetAllItems::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_GetAllItems, ReturnValue) == 0x000004, "Member 'Inventory_GetAllItems::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetEligiblePromoItemDefinitionIDs
// 0x0020 (0x0020 - 0x0000)
struct Inventory_GetEligiblePromoItemDefinitionIDs final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetEligiblePromoItemDefinitionIDs) == 0x000008, "Wrong alignment on Inventory_GetEligiblePromoItemDefinitionIDs");
static_assert(sizeof(Inventory_GetEligiblePromoItemDefinitionIDs) == 0x000020, "Wrong size on Inventory_GetEligiblePromoItemDefinitionIDs");
static_assert(offsetof(Inventory_GetEligiblePromoItemDefinitionIDs, SteamID) == 0x000000, "Member 'Inventory_GetEligiblePromoItemDefinitionIDs::SteamID' has a wrong offset!");
static_assert(offsetof(Inventory_GetEligiblePromoItemDefinitionIDs, ItemDefs) == 0x000008, "Member 'Inventory_GetEligiblePromoItemDefinitionIDs::ItemDefs' has a wrong offset!");
static_assert(offsetof(Inventory_GetEligiblePromoItemDefinitionIDs, ReturnValue) == 0x000018, "Member 'Inventory_GetEligiblePromoItemDefinitionIDs::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetItemDefinitionIDs
// 0x0018 (0x0018 - 0x0000)
struct Inventory_GetItemDefinitionIDs final
{
public:
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetItemDefinitionIDs) == 0x000008, "Wrong alignment on Inventory_GetItemDefinitionIDs");
static_assert(sizeof(Inventory_GetItemDefinitionIDs) == 0x000018, "Wrong size on Inventory_GetItemDefinitionIDs");
static_assert(offsetof(Inventory_GetItemDefinitionIDs, ItemDefs) == 0x000000, "Member 'Inventory_GetItemDefinitionIDs::ItemDefs' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemDefinitionIDs, ReturnValue) == 0x000010, "Member 'Inventory_GetItemDefinitionIDs::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetItemDefinitionProperty
// 0x0030 (0x0030 - 0x0000)
struct Inventory_GetItemDefinitionProperty final
{
public:
	struct FSteamItemDef                          ItemDef;                                           // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetItemDefinitionProperty) == 0x000008, "Wrong alignment on Inventory_GetItemDefinitionProperty");
static_assert(sizeof(Inventory_GetItemDefinitionProperty) == 0x000030, "Wrong size on Inventory_GetItemDefinitionProperty");
static_assert(offsetof(Inventory_GetItemDefinitionProperty, ItemDef) == 0x000000, "Member 'Inventory_GetItemDefinitionProperty::ItemDef' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemDefinitionProperty, PropertyName) == 0x000008, "Member 'Inventory_GetItemDefinitionProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemDefinitionProperty, Value) == 0x000018, "Member 'Inventory_GetItemDefinitionProperty::Value' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemDefinitionProperty, ReturnValue) == 0x000028, "Member 'Inventory_GetItemDefinitionProperty::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetItemPrice
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetItemPrice final
{
public:
	struct FSteamItemDef                          ItemDef;                                           // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePrice;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetItemPrice) == 0x000004, "Wrong alignment on Inventory_GetItemPrice");
static_assert(sizeof(Inventory_GetItemPrice) == 0x000010, "Wrong size on Inventory_GetItemPrice");
static_assert(offsetof(Inventory_GetItemPrice, ItemDef) == 0x000000, "Member 'Inventory_GetItemPrice::ItemDef' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemPrice, Price) == 0x000004, "Member 'Inventory_GetItemPrice::Price' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemPrice, BasePrice) == 0x000008, "Member 'Inventory_GetItemPrice::BasePrice' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemPrice, ReturnValue) == 0x00000C, "Member 'Inventory_GetItemPrice::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetItemsByID
// 0x0020 (0x0020 - 0x0000)
struct Inventory_GetItemsByID final
{
public:
	struct FSteamInventoryResult                  InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemInstanceID>           InstanceIDs;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetItemsByID) == 0x000008, "Wrong alignment on Inventory_GetItemsByID");
static_assert(sizeof(Inventory_GetItemsByID) == 0x000020, "Wrong size on Inventory_GetItemsByID");
static_assert(offsetof(Inventory_GetItemsByID, InventoryResult) == 0x000000, "Member 'Inventory_GetItemsByID::InventoryResult' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemsByID, InstanceIDs) == 0x000008, "Member 'Inventory_GetItemsByID::InstanceIDs' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemsByID, ReturnValue) == 0x000018, "Member 'Inventory_GetItemsByID::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetItemsWithPrices
// 0x0038 (0x0038 - 0x0000)
struct Inventory_GetItemsWithPrices final
{
public:
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Prices;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BasePrices;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetItemsWithPrices) == 0x000008, "Wrong alignment on Inventory_GetItemsWithPrices");
static_assert(sizeof(Inventory_GetItemsWithPrices) == 0x000038, "Wrong size on Inventory_GetItemsWithPrices");
static_assert(offsetof(Inventory_GetItemsWithPrices, ItemDefs) == 0x000000, "Member 'Inventory_GetItemsWithPrices::ItemDefs' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemsWithPrices, Prices) == 0x000010, "Member 'Inventory_GetItemsWithPrices::Prices' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemsWithPrices, BasePrices) == 0x000020, "Member 'Inventory_GetItemsWithPrices::BasePrices' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemsWithPrices, ReturnValue) == 0x000030, "Member 'Inventory_GetItemsWithPrices::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetNumItemsWithPrices
// 0x0004 (0x0004 - 0x0000)
struct Inventory_GetNumItemsWithPrices final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetNumItemsWithPrices) == 0x000004, "Wrong alignment on Inventory_GetNumItemsWithPrices");
static_assert(sizeof(Inventory_GetNumItemsWithPrices) == 0x000004, "Wrong size on Inventory_GetNumItemsWithPrices");
static_assert(offsetof(Inventory_GetNumItemsWithPrices, ReturnValue) == 0x000000, "Member 'Inventory_GetNumItemsWithPrices::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetResultItemProperty
// 0x0030 (0x0030 - 0x0000)
struct Inventory_GetResultItemProperty final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetResultItemProperty) == 0x000008, "Wrong alignment on Inventory_GetResultItemProperty");
static_assert(sizeof(Inventory_GetResultItemProperty) == 0x000030, "Wrong size on Inventory_GetResultItemProperty");
static_assert(offsetof(Inventory_GetResultItemProperty, Handle) == 0x000000, "Member 'Inventory_GetResultItemProperty::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultItemProperty, ItemIndex) == 0x000004, "Member 'Inventory_GetResultItemProperty::ItemIndex' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultItemProperty, PropertyName) == 0x000008, "Member 'Inventory_GetResultItemProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultItemProperty, Value) == 0x000018, "Member 'Inventory_GetResultItemProperty::Value' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultItemProperty, ReturnValue) == 0x000028, "Member 'Inventory_GetResultItemProperty::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetResultItems
// 0x0020 (0x0020 - 0x0000)
struct Inventory_GetResultItems final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDetails>              Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetResultItems) == 0x000008, "Wrong alignment on Inventory_GetResultItems");
static_assert(sizeof(Inventory_GetResultItems) == 0x000020, "Wrong size on Inventory_GetResultItems");
static_assert(offsetof(Inventory_GetResultItems, Handle) == 0x000000, "Member 'Inventory_GetResultItems::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultItems, Items) == 0x000008, "Member 'Inventory_GetResultItems::Items' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultItems, ReturnValue) == 0x000018, "Member 'Inventory_GetResultItems::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetResultStatus
// 0x0008 (0x0008 - 0x0000)
struct Inventory_GetResultStatus final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamResult                                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetResultStatus) == 0x000004, "Wrong alignment on Inventory_GetResultStatus");
static_assert(sizeof(Inventory_GetResultStatus) == 0x000008, "Wrong size on Inventory_GetResultStatus");
static_assert(offsetof(Inventory_GetResultStatus, Handle) == 0x000000, "Member 'Inventory_GetResultStatus::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultStatus, ReturnValue) == 0x000004, "Member 'Inventory_GetResultStatus::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GetResultTimestamp
// 0x0008 (0x0008 - 0x0000)
struct Inventory_GetResultTimestamp final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetResultTimestamp) == 0x000004, "Wrong alignment on Inventory_GetResultTimestamp");
static_assert(sizeof(Inventory_GetResultTimestamp) == 0x000008, "Wrong size on Inventory_GetResultTimestamp");
static_assert(offsetof(Inventory_GetResultTimestamp, Handle) == 0x000000, "Member 'Inventory_GetResultTimestamp::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_GetResultTimestamp, ReturnValue) == 0x000004, "Member 'Inventory_GetResultTimestamp::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.GrantPromoItems
// 0x0008 (0x0008 - 0x0000)
struct Inventory_GrantPromoItems final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GrantPromoItems) == 0x000004, "Wrong alignment on Inventory_GrantPromoItems");
static_assert(sizeof(Inventory_GrantPromoItems) == 0x000008, "Wrong size on Inventory_GrantPromoItems");
static_assert(offsetof(Inventory_GrantPromoItems, Result) == 0x000000, "Member 'Inventory_GrantPromoItems::Result' has a wrong offset!");
static_assert(offsetof(Inventory_GrantPromoItems, ReturnValue) == 0x000004, "Member 'Inventory_GrantPromoItems::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.LoadItemDefinitions
// 0x0001 (0x0001 - 0x0000)
struct Inventory_LoadItemDefinitions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_LoadItemDefinitions) == 0x000001, "Wrong alignment on Inventory_LoadItemDefinitions");
static_assert(sizeof(Inventory_LoadItemDefinitions) == 0x000001, "Wrong size on Inventory_LoadItemDefinitions");
static_assert(offsetof(Inventory_LoadItemDefinitions, ReturnValue) == 0x000000, "Member 'Inventory_LoadItemDefinitions::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.RemoveProperty
// 0x0028 (0x0028 - 0x0000)
struct Inventory_RemoveProperty final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemoveProperty) == 0x000008, "Wrong alignment on Inventory_RemoveProperty");
static_assert(sizeof(Inventory_RemoveProperty) == 0x000028, "Wrong size on Inventory_RemoveProperty");
static_assert(offsetof(Inventory_RemoveProperty, Handle) == 0x000000, "Member 'Inventory_RemoveProperty::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_RemoveProperty, ItemId) == 0x000008, "Member 'Inventory_RemoveProperty::ItemId' has a wrong offset!");
static_assert(offsetof(Inventory_RemoveProperty, PropertyName) == 0x000010, "Member 'Inventory_RemoveProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(Inventory_RemoveProperty, ReturnValue) == 0x000020, "Member 'Inventory_RemoveProperty::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.SerializeResult
// 0x0020 (0x0020 - 0x0000)
struct Inventory_SerializeResult final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Buffer;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_SerializeResult) == 0x000008, "Wrong alignment on Inventory_SerializeResult");
static_assert(sizeof(Inventory_SerializeResult) == 0x000020, "Wrong size on Inventory_SerializeResult");
static_assert(offsetof(Inventory_SerializeResult, Handle) == 0x000000, "Member 'Inventory_SerializeResult::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_SerializeResult, Buffer) == 0x000008, "Member 'Inventory_SerializeResult::Buffer' has a wrong offset!");
static_assert(offsetof(Inventory_SerializeResult, ReturnValue) == 0x000018, "Member 'Inventory_SerializeResult::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.SetPropertyBool
// 0x0028 (0x0028 - 0x0000)
struct Inventory_SetPropertyBool final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_SetPropertyBool) == 0x000008, "Wrong alignment on Inventory_SetPropertyBool");
static_assert(sizeof(Inventory_SetPropertyBool) == 0x000028, "Wrong size on Inventory_SetPropertyBool");
static_assert(offsetof(Inventory_SetPropertyBool, Handle) == 0x000000, "Member 'Inventory_SetPropertyBool::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyBool, ItemId) == 0x000008, "Member 'Inventory_SetPropertyBool::ItemId' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyBool, PropertyName) == 0x000010, "Member 'Inventory_SetPropertyBool::PropertyName' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyBool, bValue) == 0x000020, "Member 'Inventory_SetPropertyBool::bValue' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyBool, ReturnValue) == 0x000021, "Member 'Inventory_SetPropertyBool::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.SetPropertyFloat
// 0x0028 (0x0028 - 0x0000)
struct Inventory_SetPropertyFloat final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_SetPropertyFloat) == 0x000008, "Wrong alignment on Inventory_SetPropertyFloat");
static_assert(sizeof(Inventory_SetPropertyFloat) == 0x000028, "Wrong size on Inventory_SetPropertyFloat");
static_assert(offsetof(Inventory_SetPropertyFloat, Handle) == 0x000000, "Member 'Inventory_SetPropertyFloat::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyFloat, ItemId) == 0x000008, "Member 'Inventory_SetPropertyFloat::ItemId' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyFloat, PropertyName) == 0x000010, "Member 'Inventory_SetPropertyFloat::PropertyName' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyFloat, Value) == 0x000020, "Member 'Inventory_SetPropertyFloat::Value' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyFloat, ReturnValue) == 0x000024, "Member 'Inventory_SetPropertyFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.SetPropertyInt
// 0x0028 (0x0028 - 0x0000)
struct Inventory_SetPropertyInt final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_SetPropertyInt) == 0x000008, "Wrong alignment on Inventory_SetPropertyInt");
static_assert(sizeof(Inventory_SetPropertyInt) == 0x000028, "Wrong size on Inventory_SetPropertyInt");
static_assert(offsetof(Inventory_SetPropertyInt, Handle) == 0x000000, "Member 'Inventory_SetPropertyInt::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyInt, ItemId) == 0x000008, "Member 'Inventory_SetPropertyInt::ItemId' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyInt, PropertyName) == 0x000010, "Member 'Inventory_SetPropertyInt::PropertyName' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyInt, Value) == 0x000020, "Member 'Inventory_SetPropertyInt::Value' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyInt, ReturnValue) == 0x000024, "Member 'Inventory_SetPropertyInt::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.SetPropertyString
// 0x0038 (0x0038 - 0x0000)
struct Inventory_SetPropertyString final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_SetPropertyString) == 0x000008, "Wrong alignment on Inventory_SetPropertyString");
static_assert(sizeof(Inventory_SetPropertyString) == 0x000038, "Wrong size on Inventory_SetPropertyString");
static_assert(offsetof(Inventory_SetPropertyString, Handle) == 0x000000, "Member 'Inventory_SetPropertyString::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyString, ItemId) == 0x000008, "Member 'Inventory_SetPropertyString::ItemId' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyString, PropertyName) == 0x000010, "Member 'Inventory_SetPropertyString::PropertyName' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyString, Value) == 0x000020, "Member 'Inventory_SetPropertyString::Value' has a wrong offset!");
static_assert(offsetof(Inventory_SetPropertyString, ReturnValue) == 0x000030, "Member 'Inventory_SetPropertyString::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.StartUpdateProperties
// 0x0008 (0x0008 - 0x0000)
struct Inventory_StartUpdateProperties final
{
public:
	struct FSteamInventoryUpdateHandle            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_StartUpdateProperties) == 0x000008, "Wrong alignment on Inventory_StartUpdateProperties");
static_assert(sizeof(Inventory_StartUpdateProperties) == 0x000008, "Wrong size on Inventory_StartUpdateProperties");
static_assert(offsetof(Inventory_StartUpdateProperties, ReturnValue) == 0x000000, "Member 'Inventory_StartUpdateProperties::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.SubmitUpdateProperties
// 0x0010 (0x0010 - 0x0000)
struct Inventory_SubmitUpdateProperties final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamInventoryResult                  ResultHandle;                                      // 0x0008(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_SubmitUpdateProperties) == 0x000008, "Wrong alignment on Inventory_SubmitUpdateProperties");
static_assert(sizeof(Inventory_SubmitUpdateProperties) == 0x000010, "Wrong size on Inventory_SubmitUpdateProperties");
static_assert(offsetof(Inventory_SubmitUpdateProperties, Handle) == 0x000000, "Member 'Inventory_SubmitUpdateProperties::Handle' has a wrong offset!");
static_assert(offsetof(Inventory_SubmitUpdateProperties, ResultHandle) == 0x000008, "Member 'Inventory_SubmitUpdateProperties::ResultHandle' has a wrong offset!");
static_assert(offsetof(Inventory_SubmitUpdateProperties, ReturnValue) == 0x00000C, "Member 'Inventory_SubmitUpdateProperties::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.TransferItemQuantity
// 0x0028 (0x0028 - 0x0000)
struct Inventory_TransferItemQuantity final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamItemInstanceID                   ItemIDSource;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamItemInstanceID                   ItemIDDest;                                        // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_TransferItemQuantity) == 0x000008, "Wrong alignment on Inventory_TransferItemQuantity");
static_assert(sizeof(Inventory_TransferItemQuantity) == 0x000028, "Wrong size on Inventory_TransferItemQuantity");
static_assert(offsetof(Inventory_TransferItemQuantity, Result) == 0x000000, "Member 'Inventory_TransferItemQuantity::Result' has a wrong offset!");
static_assert(offsetof(Inventory_TransferItemQuantity, ItemIDSource) == 0x000008, "Member 'Inventory_TransferItemQuantity::ItemIDSource' has a wrong offset!");
static_assert(offsetof(Inventory_TransferItemQuantity, Quantity) == 0x000010, "Member 'Inventory_TransferItemQuantity::Quantity' has a wrong offset!");
static_assert(offsetof(Inventory_TransferItemQuantity, ItemIDDest) == 0x000018, "Member 'Inventory_TransferItemQuantity::ItemIDDest' has a wrong offset!");
static_assert(offsetof(Inventory_TransferItemQuantity, ReturnValue) == 0x000020, "Member 'Inventory_TransferItemQuantity::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.TriggerItemDrop
// 0x000C (0x000C - 0x0000)
struct Inventory_TriggerItemDrop final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemDef                          ListDefinition;                                    // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_TriggerItemDrop) == 0x000004, "Wrong alignment on Inventory_TriggerItemDrop");
static_assert(sizeof(Inventory_TriggerItemDrop) == 0x00000C, "Wrong size on Inventory_TriggerItemDrop");
static_assert(offsetof(Inventory_TriggerItemDrop, Result) == 0x000000, "Member 'Inventory_TriggerItemDrop::Result' has a wrong offset!");
static_assert(offsetof(Inventory_TriggerItemDrop, ListDefinition) == 0x000004, "Member 'Inventory_TriggerItemDrop::ListDefinition' has a wrong offset!");
static_assert(offsetof(Inventory_TriggerItemDrop, ReturnValue) == 0x000008, "Member 'Inventory_TriggerItemDrop::ReturnValue' has a wrong offset!");

// Function SteamCore.Inventory.RequestEligiblePromoItemDefinitionsIDs
// 0x0018 (0x0018 - 0x0000)
struct Inventory_RequestEligiblePromoItemDefinitionsIDs final
{
public:
	TDelegate<void(struct FSteamInventoryEligiblePromoItemDefIDs& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_RequestEligiblePromoItemDefinitionsIDs) == 0x000008, "Wrong alignment on Inventory_RequestEligiblePromoItemDefinitionsIDs");
static_assert(sizeof(Inventory_RequestEligiblePromoItemDefinitionsIDs) == 0x000018, "Wrong size on Inventory_RequestEligiblePromoItemDefinitionsIDs");
static_assert(offsetof(Inventory_RequestEligiblePromoItemDefinitionsIDs, Callback) == 0x000000, "Member 'Inventory_RequestEligiblePromoItemDefinitionsIDs::Callback' has a wrong offset!");
static_assert(offsetof(Inventory_RequestEligiblePromoItemDefinitionsIDs, SteamID) == 0x000010, "Member 'Inventory_RequestEligiblePromoItemDefinitionsIDs::SteamID' has a wrong offset!");

// Function SteamCore.Inventory.RequestPrices
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RequestPrices final
{
public:
	TDelegate<void(struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_RequestPrices) == 0x000004, "Wrong alignment on Inventory_RequestPrices");
static_assert(sizeof(Inventory_RequestPrices) == 0x000010, "Wrong size on Inventory_RequestPrices");
static_assert(offsetof(Inventory_RequestPrices, Callback) == 0x000000, "Member 'Inventory_RequestPrices::Callback' has a wrong offset!");

// Function SteamCore.Inventory.StartPurchase
// 0x0030 (0x0030 - 0x0000)
struct Inventory_StartPurchase final
{
public:
	TDelegate<void(struct FSteamInventoryStartPurchaseResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_StartPurchase) == 0x000008, "Wrong alignment on Inventory_StartPurchase");
static_assert(sizeof(Inventory_StartPurchase) == 0x000030, "Wrong size on Inventory_StartPurchase");
static_assert(offsetof(Inventory_StartPurchase, Callback) == 0x000000, "Member 'Inventory_StartPurchase::Callback' has a wrong offset!");
static_assert(offsetof(Inventory_StartPurchase, ItemDefs) == 0x000010, "Member 'Inventory_StartPurchase::ItemDefs' has a wrong offset!");
static_assert(offsetof(Inventory_StartPurchase, Quantity) == 0x000020, "Member 'Inventory_StartPurchase::Quantity' has a wrong offset!");

// Function SteamCore.SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs.RequestEligiblePromoItemDefinitionsIDsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync) == 0x000008, "Wrong alignment on SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync");
static_assert(sizeof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync) == 0x000020, "Wrong size on SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, SteamID) == 0x000008, "Member 'SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, Timeout) == 0x000010, "Member 'SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback final
{
public:
	struct FSteamInventoryEligiblePromoItemDefIDs Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback");
static_assert(sizeof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback) == 0x000020, "Wrong size on SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback, Data) == 0x000000, "Member 'SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreInventoryAsyncActionRequestPricesResult.RequestPricesAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreInventoryAsyncActionRequestPricesResult* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync) == 0x000008, "Wrong alignment on SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync");
static_assert(sizeof(SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync) == 0x000018, "Wrong size on SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync, Timeout) == 0x000008, "Member 'SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync, ReturnValue) == 0x000010, "Member 'SteamCoreInventoryAsyncActionRequestPricesResult_RequestPricesAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreInventoryAsyncActionRequestPricesResult.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback final
{
public:
	struct FSteamInventoryRequestPricesResult     Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback");
static_assert(sizeof(SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback) == 0x000020, "Wrong size on SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback, Data) == 0x000000, "Member 'SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreInventoryAsyncActionRequestPricesResult_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreInventoryAsyncActionStartPurchaseResult.StartPurchaseAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreInventoryAsyncActionStartPurchaseResult* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync) == 0x000008, "Wrong alignment on SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync");
static_assert(sizeof(SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync) == 0x000038, "Wrong size on SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync");
static_assert(offsetof(SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, ItemDefs) == 0x000008, "Member 'SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, Quantity) == 0x000018, "Member 'SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::Quantity' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, Timeout) == 0x000028, "Member 'SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, ReturnValue) == 0x000030, "Member 'SteamCoreInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreInventoryAsyncActionStartPurchaseResult.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback final
{
public:
	struct FSteamInventoryStartPurchaseResult     Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback");
static_assert(sizeof(SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback) == 0x000030, "Wrong size on SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback");
static_assert(offsetof(SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback, Data) == 0x000000, "Member 'SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreInventoryAsyncActionStartPurchaseResult_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.Matchmaking.AddFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct Matchmaking_AddFavoriteGame final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamFavoriteFlags>                   Flags_0;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TimeLastPlayedOnServer;                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_AddFavoriteGame) == 0x000008, "Wrong alignment on Matchmaking_AddFavoriteGame");
static_assert(sizeof(Matchmaking_AddFavoriteGame) == 0x000038, "Wrong size on Matchmaking_AddFavoriteGame");
static_assert(offsetof(Matchmaking_AddFavoriteGame, AppID) == 0x000000, "Member 'Matchmaking_AddFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddFavoriteGame, IP) == 0x000008, "Member 'Matchmaking_AddFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddFavoriteGame, ConnectionPort) == 0x000018, "Member 'Matchmaking_AddFavoriteGame::ConnectionPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddFavoriteGame, QueryPort) == 0x00001C, "Member 'Matchmaking_AddFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddFavoriteGame, Flags_0) == 0x000020, "Member 'Matchmaking_AddFavoriteGame::Flags_0' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddFavoriteGame, TimeLastPlayedOnServer) == 0x000030, "Member 'Matchmaking_AddFavoriteGame::TimeLastPlayedOnServer' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddFavoriteGame, ReturnValue) == 0x000034, "Member 'Matchmaking_AddFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.AddRequestLobbyListCompatibleMembersFilter
// 0x0008 (0x0008 - 0x0000)
struct Matchmaking_AddRequestLobbyListCompatibleMembersFilter final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_AddRequestLobbyListCompatibleMembersFilter) == 0x000008, "Wrong alignment on Matchmaking_AddRequestLobbyListCompatibleMembersFilter");
static_assert(sizeof(Matchmaking_AddRequestLobbyListCompatibleMembersFilter) == 0x000008, "Wrong size on Matchmaking_AddRequestLobbyListCompatibleMembersFilter");
static_assert(offsetof(Matchmaking_AddRequestLobbyListCompatibleMembersFilter, SteamIDLobby) == 0x000000, "Member 'Matchmaking_AddRequestLobbyListCompatibleMembersFilter::SteamIDLobby' has a wrong offset!");

// Function SteamCore.Matchmaking.AddRequestLobbyListDistanceFilter
// 0x0001 (0x0001 - 0x0000)
struct Matchmaking_AddRequestLobbyListDistanceFilter final
{
public:
	ESteamLobbyDistanceFilter                     LobbyDistanceFilter;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_AddRequestLobbyListDistanceFilter) == 0x000001, "Wrong alignment on Matchmaking_AddRequestLobbyListDistanceFilter");
static_assert(sizeof(Matchmaking_AddRequestLobbyListDistanceFilter) == 0x000001, "Wrong size on Matchmaking_AddRequestLobbyListDistanceFilter");
static_assert(offsetof(Matchmaking_AddRequestLobbyListDistanceFilter, LobbyDistanceFilter) == 0x000000, "Member 'Matchmaking_AddRequestLobbyListDistanceFilter::LobbyDistanceFilter' has a wrong offset!");

// Function SteamCore.Matchmaking.AddRequestLobbyListFilterSlotsAvailable
// 0x0004 (0x0004 - 0x0000)
struct Matchmaking_AddRequestLobbyListFilterSlotsAvailable final
{
public:
	int32                                         SlotsAvailable;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_AddRequestLobbyListFilterSlotsAvailable) == 0x000004, "Wrong alignment on Matchmaking_AddRequestLobbyListFilterSlotsAvailable");
static_assert(sizeof(Matchmaking_AddRequestLobbyListFilterSlotsAvailable) == 0x000004, "Wrong size on Matchmaking_AddRequestLobbyListFilterSlotsAvailable");
static_assert(offsetof(Matchmaking_AddRequestLobbyListFilterSlotsAvailable, SlotsAvailable) == 0x000000, "Member 'Matchmaking_AddRequestLobbyListFilterSlotsAvailable::SlotsAvailable' has a wrong offset!");

// Function SteamCore.Matchmaking.AddRequestLobbyListNearValueFilter
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_AddRequestLobbyListNearValueFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueToBeCloseTo;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_AddRequestLobbyListNearValueFilter) == 0x000008, "Wrong alignment on Matchmaking_AddRequestLobbyListNearValueFilter");
static_assert(sizeof(Matchmaking_AddRequestLobbyListNearValueFilter) == 0x000018, "Wrong size on Matchmaking_AddRequestLobbyListNearValueFilter");
static_assert(offsetof(Matchmaking_AddRequestLobbyListNearValueFilter, KeyToMatch) == 0x000000, "Member 'Matchmaking_AddRequestLobbyListNearValueFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddRequestLobbyListNearValueFilter, ValueToBeCloseTo) == 0x000010, "Member 'Matchmaking_AddRequestLobbyListNearValueFilter::ValueToBeCloseTo' has a wrong offset!");

// Function SteamCore.Matchmaking.AddRequestLobbyListNumericalFilter
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_AddRequestLobbyListNumericalFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueToMatch;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyComparison                         ComparisonType;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_AddRequestLobbyListNumericalFilter) == 0x000008, "Wrong alignment on Matchmaking_AddRequestLobbyListNumericalFilter");
static_assert(sizeof(Matchmaking_AddRequestLobbyListNumericalFilter) == 0x000018, "Wrong size on Matchmaking_AddRequestLobbyListNumericalFilter");
static_assert(offsetof(Matchmaking_AddRequestLobbyListNumericalFilter, KeyToMatch) == 0x000000, "Member 'Matchmaking_AddRequestLobbyListNumericalFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddRequestLobbyListNumericalFilter, ValueToMatch) == 0x000010, "Member 'Matchmaking_AddRequestLobbyListNumericalFilter::ValueToMatch' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddRequestLobbyListNumericalFilter, ComparisonType) == 0x000014, "Member 'Matchmaking_AddRequestLobbyListNumericalFilter::ComparisonType' has a wrong offset!");

// Function SteamCore.Matchmaking.AddRequestLobbyListResultCountFilter
// 0x0004 (0x0004 - 0x0000)
struct Matchmaking_AddRequestLobbyListResultCountFilter final
{
public:
	int32                                         MaxResults;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_AddRequestLobbyListResultCountFilter) == 0x000004, "Wrong alignment on Matchmaking_AddRequestLobbyListResultCountFilter");
static_assert(sizeof(Matchmaking_AddRequestLobbyListResultCountFilter) == 0x000004, "Wrong size on Matchmaking_AddRequestLobbyListResultCountFilter");
static_assert(offsetof(Matchmaking_AddRequestLobbyListResultCountFilter, MaxResults) == 0x000000, "Member 'Matchmaking_AddRequestLobbyListResultCountFilter::MaxResults' has a wrong offset!");

// Function SteamCore.Matchmaking.AddRequestLobbyListStringFilter
// 0x0028 (0x0028 - 0x0000)
struct Matchmaking_AddRequestLobbyListStringFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueToMatch;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyComparison                         ComparisonType;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_AddRequestLobbyListStringFilter) == 0x000008, "Wrong alignment on Matchmaking_AddRequestLobbyListStringFilter");
static_assert(sizeof(Matchmaking_AddRequestLobbyListStringFilter) == 0x000028, "Wrong size on Matchmaking_AddRequestLobbyListStringFilter");
static_assert(offsetof(Matchmaking_AddRequestLobbyListStringFilter, KeyToMatch) == 0x000000, "Member 'Matchmaking_AddRequestLobbyListStringFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddRequestLobbyListStringFilter, ValueToMatch) == 0x000010, "Member 'Matchmaking_AddRequestLobbyListStringFilter::ValueToMatch' has a wrong offset!");
static_assert(offsetof(Matchmaking_AddRequestLobbyListStringFilter, ComparisonType) == 0x000020, "Member 'Matchmaking_AddRequestLobbyListStringFilter::ComparisonType' has a wrong offset!");

// Function SteamCore.Matchmaking.DeleteLobbyData
// 0x0020 (0x0020 - 0x0000)
struct Matchmaking_DeleteLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_DeleteLobbyData) == 0x000008, "Wrong alignment on Matchmaking_DeleteLobbyData");
static_assert(sizeof(Matchmaking_DeleteLobbyData) == 0x000020, "Wrong size on Matchmaking_DeleteLobbyData");
static_assert(offsetof(Matchmaking_DeleteLobbyData, SteamIDLobby) == 0x000000, "Member 'Matchmaking_DeleteLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_DeleteLobbyData, Key) == 0x000008, "Member 'Matchmaking_DeleteLobbyData::Key' has a wrong offset!");
static_assert(offsetof(Matchmaking_DeleteLobbyData, ReturnValue) == 0x000018, "Member 'Matchmaking_DeleteLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct Matchmaking_GetFavoriteGame final
{
public:
	int32                                         Game;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamFavoriteFlags>                   Flags_0;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TimeLastPlayedOnServer;                            // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_GetFavoriteGame) == 0x000008, "Wrong alignment on Matchmaking_GetFavoriteGame");
static_assert(sizeof(Matchmaking_GetFavoriteGame) == 0x000038, "Wrong size on Matchmaking_GetFavoriteGame");
static_assert(offsetof(Matchmaking_GetFavoriteGame, Game) == 0x000000, "Member 'Matchmaking_GetFavoriteGame::Game' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetFavoriteGame, AppID) == 0x000004, "Member 'Matchmaking_GetFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetFavoriteGame, IP) == 0x000008, "Member 'Matchmaking_GetFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetFavoriteGame, ConnectionPort) == 0x000018, "Member 'Matchmaking_GetFavoriteGame::ConnectionPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetFavoriteGame, QueryPort) == 0x00001C, "Member 'Matchmaking_GetFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetFavoriteGame, Flags_0) == 0x000020, "Member 'Matchmaking_GetFavoriteGame::Flags_0' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetFavoriteGame, TimeLastPlayedOnServer) == 0x000030, "Member 'Matchmaking_GetFavoriteGame::TimeLastPlayedOnServer' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetFavoriteGame, ReturnValue) == 0x000034, "Member 'Matchmaking_GetFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetFavoriteGameCount
// 0x0004 (0x0004 - 0x0000)
struct Matchmaking_GetFavoriteGameCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_GetFavoriteGameCount) == 0x000004, "Wrong alignment on Matchmaking_GetFavoriteGameCount");
static_assert(sizeof(Matchmaking_GetFavoriteGameCount) == 0x000004, "Wrong size on Matchmaking_GetFavoriteGameCount");
static_assert(offsetof(Matchmaking_GetFavoriteGameCount, ReturnValue) == 0x000000, "Member 'Matchmaking_GetFavoriteGameCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyByIndex
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_GetLobbyByIndex final
{
public:
	int32                                         Lobby;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_GetLobbyByIndex) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyByIndex");
static_assert(sizeof(Matchmaking_GetLobbyByIndex) == 0x000010, "Wrong size on Matchmaking_GetLobbyByIndex");
static_assert(offsetof(Matchmaking_GetLobbyByIndex, Lobby) == 0x000000, "Member 'Matchmaking_GetLobbyByIndex::Lobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyByIndex, ReturnValue) == 0x000008, "Member 'Matchmaking_GetLobbyByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyChatEntry
// 0x0030 (0x0030 - 0x0000)
struct Matchmaking_GetLobbyChatEntry final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDUser;                                       // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatEntryType                           ChatEntryType;                                     // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_GetLobbyChatEntry) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyChatEntry");
static_assert(sizeof(Matchmaking_GetLobbyChatEntry) == 0x000030, "Wrong size on Matchmaking_GetLobbyChatEntry");
static_assert(offsetof(Matchmaking_GetLobbyChatEntry, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyChatEntry::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyChatEntry, MessageID) == 0x000008, "Member 'Matchmaking_GetLobbyChatEntry::MessageID' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyChatEntry, SteamIDUser) == 0x000010, "Member 'Matchmaking_GetLobbyChatEntry::SteamIDUser' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyChatEntry, Message) == 0x000018, "Member 'Matchmaking_GetLobbyChatEntry::Message' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyChatEntry, ChatEntryType) == 0x000028, "Member 'Matchmaking_GetLobbyChatEntry::ChatEntryType' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyChatEntry, ReturnValue) == 0x00002C, "Member 'Matchmaking_GetLobbyChatEntry::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyData
// 0x0028 (0x0028 - 0x0000)
struct Matchmaking_GetLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_GetLobbyData) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyData");
static_assert(sizeof(Matchmaking_GetLobbyData) == 0x000028, "Wrong size on Matchmaking_GetLobbyData");
static_assert(offsetof(Matchmaking_GetLobbyData, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyData, Key) == 0x000008, "Member 'Matchmaking_GetLobbyData::Key' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyData, ReturnValue) == 0x000018, "Member 'Matchmaking_GetLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyDataByIndex
// 0x0038 (0x0038 - 0x0000)
struct Matchmaking_GetLobbyDataByIndex final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LobbyData;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_GetLobbyDataByIndex) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyDataByIndex");
static_assert(sizeof(Matchmaking_GetLobbyDataByIndex) == 0x000038, "Wrong size on Matchmaking_GetLobbyDataByIndex");
static_assert(offsetof(Matchmaking_GetLobbyDataByIndex, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyDataByIndex::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyDataByIndex, LobbyData) == 0x000008, "Member 'Matchmaking_GetLobbyDataByIndex::LobbyData' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyDataByIndex, Key) == 0x000010, "Member 'Matchmaking_GetLobbyDataByIndex::Key' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyDataByIndex, Value) == 0x000020, "Member 'Matchmaking_GetLobbyDataByIndex::Value' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyDataByIndex, ReturnValue) == 0x000030, "Member 'Matchmaking_GetLobbyDataByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyDataCount
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_GetLobbyDataCount final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_GetLobbyDataCount) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyDataCount");
static_assert(sizeof(Matchmaking_GetLobbyDataCount) == 0x000010, "Wrong size on Matchmaking_GetLobbyDataCount");
static_assert(offsetof(Matchmaking_GetLobbyDataCount, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyDataCount::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyDataCount, ReturnValue) == 0x000008, "Member 'Matchmaking_GetLobbyDataCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyGameServer
// 0x0030 (0x0030 - 0x0000)
struct Matchmaking_GetLobbyGameServer final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameServerIP;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameServerPort;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDGameServer;                                 // 0x0020(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_GetLobbyGameServer) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyGameServer");
static_assert(sizeof(Matchmaking_GetLobbyGameServer) == 0x000030, "Wrong size on Matchmaking_GetLobbyGameServer");
static_assert(offsetof(Matchmaking_GetLobbyGameServer, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyGameServer::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyGameServer, GameServerIP) == 0x000008, "Member 'Matchmaking_GetLobbyGameServer::GameServerIP' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyGameServer, GameServerPort) == 0x000018, "Member 'Matchmaking_GetLobbyGameServer::GameServerPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyGameServer, SteamIDGameServer) == 0x000020, "Member 'Matchmaking_GetLobbyGameServer::SteamIDGameServer' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyGameServer, ReturnValue) == 0x000028, "Member 'Matchmaking_GetLobbyGameServer::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyMemberByIndex
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_GetLobbyMemberByIndex final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Member;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_GetLobbyMemberByIndex) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyMemberByIndex");
static_assert(sizeof(Matchmaking_GetLobbyMemberByIndex) == 0x000018, "Wrong size on Matchmaking_GetLobbyMemberByIndex");
static_assert(offsetof(Matchmaking_GetLobbyMemberByIndex, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyMemberByIndex::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyMemberByIndex, Member) == 0x000008, "Member 'Matchmaking_GetLobbyMemberByIndex::Member' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyMemberByIndex, ReturnValue) == 0x000010, "Member 'Matchmaking_GetLobbyMemberByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyMemberData
// 0x0030 (0x0030 - 0x0000)
struct Matchmaking_GetLobbyMemberData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_GetLobbyMemberData) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyMemberData");
static_assert(sizeof(Matchmaking_GetLobbyMemberData) == 0x000030, "Wrong size on Matchmaking_GetLobbyMemberData");
static_assert(offsetof(Matchmaking_GetLobbyMemberData, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyMemberData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyMemberData, SteamIDUser) == 0x000008, "Member 'Matchmaking_GetLobbyMemberData::SteamIDUser' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyMemberData, Key) == 0x000010, "Member 'Matchmaking_GetLobbyMemberData::Key' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyMemberData, ReturnValue) == 0x000020, "Member 'Matchmaking_GetLobbyMemberData::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyMemberLimit
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_GetLobbyMemberLimit final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_GetLobbyMemberLimit) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyMemberLimit");
static_assert(sizeof(Matchmaking_GetLobbyMemberLimit) == 0x000010, "Wrong size on Matchmaking_GetLobbyMemberLimit");
static_assert(offsetof(Matchmaking_GetLobbyMemberLimit, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyMemberLimit::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyMemberLimit, ReturnValue) == 0x000008, "Member 'Matchmaking_GetLobbyMemberLimit::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetLobbyOwner
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_GetLobbyOwner final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_GetLobbyOwner) == 0x000008, "Wrong alignment on Matchmaking_GetLobbyOwner");
static_assert(sizeof(Matchmaking_GetLobbyOwner) == 0x000010, "Wrong size on Matchmaking_GetLobbyOwner");
static_assert(offsetof(Matchmaking_GetLobbyOwner, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetLobbyOwner::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetLobbyOwner, ReturnValue) == 0x000008, "Member 'Matchmaking_GetLobbyOwner::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.GetNumLobbyMembers
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_GetNumLobbyMembers final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_GetNumLobbyMembers) == 0x000008, "Wrong alignment on Matchmaking_GetNumLobbyMembers");
static_assert(sizeof(Matchmaking_GetNumLobbyMembers) == 0x000010, "Wrong size on Matchmaking_GetNumLobbyMembers");
static_assert(offsetof(Matchmaking_GetNumLobbyMembers, SteamIDLobby) == 0x000000, "Member 'Matchmaking_GetNumLobbyMembers::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_GetNumLobbyMembers, ReturnValue) == 0x000008, "Member 'Matchmaking_GetNumLobbyMembers::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.InviteUserToLobby
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_InviteUserToLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDInvitee;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_InviteUserToLobby) == 0x000008, "Wrong alignment on Matchmaking_InviteUserToLobby");
static_assert(sizeof(Matchmaking_InviteUserToLobby) == 0x000018, "Wrong size on Matchmaking_InviteUserToLobby");
static_assert(offsetof(Matchmaking_InviteUserToLobby, SteamIDLobby) == 0x000000, "Member 'Matchmaking_InviteUserToLobby::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_InviteUserToLobby, SteamIDInvitee) == 0x000008, "Member 'Matchmaking_InviteUserToLobby::SteamIDInvitee' has a wrong offset!");
static_assert(offsetof(Matchmaking_InviteUserToLobby, ReturnValue) == 0x000010, "Member 'Matchmaking_InviteUserToLobby::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.LeaveLobby
// 0x0008 (0x0008 - 0x0000)
struct Matchmaking_LeaveLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_LeaveLobby) == 0x000008, "Wrong alignment on Matchmaking_LeaveLobby");
static_assert(sizeof(Matchmaking_LeaveLobby) == 0x000008, "Wrong size on Matchmaking_LeaveLobby");
static_assert(offsetof(Matchmaking_LeaveLobby, SteamIDLobby) == 0x000000, "Member 'Matchmaking_LeaveLobby::SteamIDLobby' has a wrong offset!");

// Function SteamCore.Matchmaking.RemoveFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct Matchmaking_RemoveFavoriteGame final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamFavoriteFlags>                   Flags_0;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_RemoveFavoriteGame) == 0x000008, "Wrong alignment on Matchmaking_RemoveFavoriteGame");
static_assert(sizeof(Matchmaking_RemoveFavoriteGame) == 0x000038, "Wrong size on Matchmaking_RemoveFavoriteGame");
static_assert(offsetof(Matchmaking_RemoveFavoriteGame, AppID) == 0x000000, "Member 'Matchmaking_RemoveFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(Matchmaking_RemoveFavoriteGame, IP) == 0x000008, "Member 'Matchmaking_RemoveFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(Matchmaking_RemoveFavoriteGame, ConnectionPort) == 0x000018, "Member 'Matchmaking_RemoveFavoriteGame::ConnectionPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_RemoveFavoriteGame, QueryPort) == 0x00001C, "Member 'Matchmaking_RemoveFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_RemoveFavoriteGame, Flags_0) == 0x000020, "Member 'Matchmaking_RemoveFavoriteGame::Flags_0' has a wrong offset!");
static_assert(offsetof(Matchmaking_RemoveFavoriteGame, ReturnValue) == 0x000030, "Member 'Matchmaking_RemoveFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.RequestLobbyData
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_RequestLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_RequestLobbyData) == 0x000008, "Wrong alignment on Matchmaking_RequestLobbyData");
static_assert(sizeof(Matchmaking_RequestLobbyData) == 0x000010, "Wrong size on Matchmaking_RequestLobbyData");
static_assert(offsetof(Matchmaking_RequestLobbyData, SteamIDLobby) == 0x000000, "Member 'Matchmaking_RequestLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_RequestLobbyData, ReturnValue) == 0x000008, "Member 'Matchmaking_RequestLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.SendLobbyChatMsg
// 0x0020 (0x0020 - 0x0000)
struct Matchmaking_SendLobbyChatMsg final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_SendLobbyChatMsg) == 0x000008, "Wrong alignment on Matchmaking_SendLobbyChatMsg");
static_assert(sizeof(Matchmaking_SendLobbyChatMsg) == 0x000020, "Wrong size on Matchmaking_SendLobbyChatMsg");
static_assert(offsetof(Matchmaking_SendLobbyChatMsg, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SendLobbyChatMsg::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SendLobbyChatMsg, Message) == 0x000008, "Member 'Matchmaking_SendLobbyChatMsg::Message' has a wrong offset!");
static_assert(offsetof(Matchmaking_SendLobbyChatMsg, ReturnValue) == 0x000018, "Member 'Matchmaking_SendLobbyChatMsg::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLinkedLobby
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_SetLinkedLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobbyDependent;                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_SetLinkedLobby) == 0x000008, "Wrong alignment on Matchmaking_SetLinkedLobby");
static_assert(sizeof(Matchmaking_SetLinkedLobby) == 0x000018, "Wrong size on Matchmaking_SetLinkedLobby");
static_assert(offsetof(Matchmaking_SetLinkedLobby, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLinkedLobby::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLinkedLobby, SteamIDLobbyDependent) == 0x000008, "Member 'Matchmaking_SetLinkedLobby::SteamIDLobbyDependent' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLinkedLobby, ReturnValue) == 0x000010, "Member 'Matchmaking_SetLinkedLobby::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLobbyData
// 0x0030 (0x0030 - 0x0000)
struct Matchmaking_SetLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_SetLobbyData) == 0x000008, "Wrong alignment on Matchmaking_SetLobbyData");
static_assert(sizeof(Matchmaking_SetLobbyData) == 0x000030, "Wrong size on Matchmaking_SetLobbyData");
static_assert(offsetof(Matchmaking_SetLobbyData, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyData, Key) == 0x000008, "Member 'Matchmaking_SetLobbyData::Key' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyData, Value) == 0x000018, "Member 'Matchmaking_SetLobbyData::Value' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyData, ReturnValue) == 0x000028, "Member 'Matchmaking_SetLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLobbyGameServer
// 0x0028 (0x0028 - 0x0000)
struct Matchmaking_SetLobbyGameServer final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameServerIP;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameServerPort;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDGameServer;                                 // 0x0020(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_SetLobbyGameServer) == 0x000008, "Wrong alignment on Matchmaking_SetLobbyGameServer");
static_assert(sizeof(Matchmaking_SetLobbyGameServer) == 0x000028, "Wrong size on Matchmaking_SetLobbyGameServer");
static_assert(offsetof(Matchmaking_SetLobbyGameServer, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLobbyGameServer::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyGameServer, GameServerIP) == 0x000008, "Member 'Matchmaking_SetLobbyGameServer::GameServerIP' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyGameServer, GameServerPort) == 0x000018, "Member 'Matchmaking_SetLobbyGameServer::GameServerPort' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyGameServer, SteamIDGameServer) == 0x000020, "Member 'Matchmaking_SetLobbyGameServer::SteamIDGameServer' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLobbyJoinable
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_SetLobbyJoinable final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLobbyJoinable;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_SetLobbyJoinable) == 0x000008, "Wrong alignment on Matchmaking_SetLobbyJoinable");
static_assert(sizeof(Matchmaking_SetLobbyJoinable) == 0x000010, "Wrong size on Matchmaking_SetLobbyJoinable");
static_assert(offsetof(Matchmaking_SetLobbyJoinable, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLobbyJoinable::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyJoinable, bLobbyJoinable) == 0x000008, "Member 'Matchmaking_SetLobbyJoinable::bLobbyJoinable' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyJoinable, ReturnValue) == 0x000009, "Member 'Matchmaking_SetLobbyJoinable::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLobbyMemberData
// 0x0028 (0x0028 - 0x0000)
struct Matchmaking_SetLobbyMemberData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_SetLobbyMemberData) == 0x000008, "Wrong alignment on Matchmaking_SetLobbyMemberData");
static_assert(sizeof(Matchmaking_SetLobbyMemberData) == 0x000028, "Wrong size on Matchmaking_SetLobbyMemberData");
static_assert(offsetof(Matchmaking_SetLobbyMemberData, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLobbyMemberData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyMemberData, Key) == 0x000008, "Member 'Matchmaking_SetLobbyMemberData::Key' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyMemberData, Value) == 0x000018, "Member 'Matchmaking_SetLobbyMemberData::Value' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLobbyMemberLimit
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_SetLobbyMemberLimit final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMembers;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_SetLobbyMemberLimit) == 0x000008, "Wrong alignment on Matchmaking_SetLobbyMemberLimit");
static_assert(sizeof(Matchmaking_SetLobbyMemberLimit) == 0x000010, "Wrong size on Matchmaking_SetLobbyMemberLimit");
static_assert(offsetof(Matchmaking_SetLobbyMemberLimit, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLobbyMemberLimit::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyMemberLimit, MaxMembers) == 0x000008, "Member 'Matchmaking_SetLobbyMemberLimit::MaxMembers' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyMemberLimit, ReturnValue) == 0x00000C, "Member 'Matchmaking_SetLobbyMemberLimit::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLobbyOwner
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_SetLobbyOwner final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDNewOwner;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_SetLobbyOwner) == 0x000008, "Wrong alignment on Matchmaking_SetLobbyOwner");
static_assert(sizeof(Matchmaking_SetLobbyOwner) == 0x000018, "Wrong size on Matchmaking_SetLobbyOwner");
static_assert(offsetof(Matchmaking_SetLobbyOwner, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLobbyOwner::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyOwner, SteamIDNewOwner) == 0x000008, "Member 'Matchmaking_SetLobbyOwner::SteamIDNewOwner' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyOwner, ReturnValue) == 0x000010, "Member 'Matchmaking_SetLobbyOwner::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.SetLobbyType
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_SetLobbyType final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyType                               LobbyType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Matchmaking_SetLobbyType) == 0x000008, "Wrong alignment on Matchmaking_SetLobbyType");
static_assert(sizeof(Matchmaking_SetLobbyType) == 0x000010, "Wrong size on Matchmaking_SetLobbyType");
static_assert(offsetof(Matchmaking_SetLobbyType, SteamIDLobby) == 0x000000, "Member 'Matchmaking_SetLobbyType::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyType, LobbyType) == 0x000008, "Member 'Matchmaking_SetLobbyType::LobbyType' has a wrong offset!");
static_assert(offsetof(Matchmaking_SetLobbyType, ReturnValue) == 0x000009, "Member 'Matchmaking_SetLobbyType::ReturnValue' has a wrong offset!");

// Function SteamCore.Matchmaking.CreateLobby
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_CreateLobby final
{
public:
	TDelegate<void(struct FCreateLobbyData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLobbyType                               LobbyType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMembers;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_CreateLobby) == 0x000004, "Wrong alignment on Matchmaking_CreateLobby");
static_assert(sizeof(Matchmaking_CreateLobby) == 0x000018, "Wrong size on Matchmaking_CreateLobby");
static_assert(offsetof(Matchmaking_CreateLobby, Callback) == 0x000000, "Member 'Matchmaking_CreateLobby::Callback' has a wrong offset!");
static_assert(offsetof(Matchmaking_CreateLobby, LobbyType) == 0x000010, "Member 'Matchmaking_CreateLobby::LobbyType' has a wrong offset!");
static_assert(offsetof(Matchmaking_CreateLobby, MaxMembers) == 0x000014, "Member 'Matchmaking_CreateLobby::MaxMembers' has a wrong offset!");

// Function SteamCore.Matchmaking.JoinLobby
// 0x0018 (0x0018 - 0x0000)
struct Matchmaking_JoinLobby final
{
public:
	TDelegate<void(struct FJoinLobbyData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_JoinLobby) == 0x000008, "Wrong alignment on Matchmaking_JoinLobby");
static_assert(sizeof(Matchmaking_JoinLobby) == 0x000018, "Wrong size on Matchmaking_JoinLobby");
static_assert(offsetof(Matchmaking_JoinLobby, Callback) == 0x000000, "Member 'Matchmaking_JoinLobby::Callback' has a wrong offset!");
static_assert(offsetof(Matchmaking_JoinLobby, SteamIDLobby) == 0x000010, "Member 'Matchmaking_JoinLobby::SteamIDLobby' has a wrong offset!");

// Function SteamCore.Matchmaking.RequestLobbyList
// 0x0010 (0x0010 - 0x0000)
struct Matchmaking_RequestLobbyList final
{
public:
	TDelegate<void(struct FLobbyMatchList& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Matchmaking_RequestLobbyList) == 0x000004, "Wrong alignment on Matchmaking_RequestLobbyList");
static_assert(sizeof(Matchmaking_RequestLobbyList) == 0x000010, "Wrong size on Matchmaking_RequestLobbyList");
static_assert(offsetof(Matchmaking_RequestLobbyList, Callback) == 0x000000, "Member 'Matchmaking_RequestLobbyList::Callback' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingAsyncActionCreateLobby.CreateLobbyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyType                               LobbyType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMembers;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreMatchmakingAsyncActionCreateLobby* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync");
static_assert(sizeof(SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync) == 0x000020, "Wrong size on SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, LobbyType) == 0x000008, "Member 'SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::LobbyType' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, MaxMembers) == 0x00000C, "Member 'SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::MaxMembers' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, Timeout) == 0x000010, "Member 'SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingAsyncActionCreateLobby.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback final
{
public:
	struct FCreateLobbyData                       Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback");
static_assert(sizeof(SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback) == 0x000018, "Wrong size on SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback, Data) == 0x000000, "Member 'SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreMatchmakingAsyncActionCreateLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingAsyncActionRequestLobbyList.RequestLobbyListAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreMatchmakingAsyncActionRequestLobbyList* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync");
static_assert(sizeof(SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync) == 0x000018, "Wrong size on SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync, Timeout) == 0x000008, "Member 'SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync, ReturnValue) == 0x000010, "Member 'SteamCoreMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingAsyncActionRequestLobbyList.HandleCallback
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback final
{
public:
	struct FLobbyMatchList                        Data;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback) == 0x000004, "Wrong alignment on SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback");
static_assert(sizeof(SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback) == 0x000008, "Wrong size on SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback, bWasSuccessful) == 0x000004, "Member 'SteamCoreMatchmakingAsyncActionRequestLobbyList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingAsyncActionJoinLobby.JoinLobbyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreMatchmakingAsyncActionJoinLobby* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync");
static_assert(sizeof(SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync) == 0x000020, "Wrong size on SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, SteamIDLobby) == 0x000008, "Member 'SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, Timeout) == 0x000010, "Member 'SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingAsyncActionJoinLobby.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback final
{
public:
	struct FJoinLobbyData                         Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback");
static_assert(sizeof(SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback) == 0x000018, "Wrong size on SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback, Data) == 0x000000, "Member 'SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreMatchmakingAsyncActionJoinLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreCreateSession.CreateSteamCoreSession
// 0x0088 (0x0088 - 0x0000)
struct SteamCoreCreateSession_CreateSteamCoreSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSteamSessionSetting> SessionSettings;                                   // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesPresence;                                     // 0x006E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresence;                             // 0x006F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresenceFriendsOnly;                  // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiCheatProtected;                               // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesStats;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAdvertise;                                  // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLobbiesVoiceChatIfAvailable;                   // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreCreateSession*                ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreCreateSession_CreateSteamCoreSession) == 0x000008, "Wrong alignment on SteamCoreCreateSession_CreateSteamCoreSession");
static_assert(sizeof(SteamCoreCreateSession_CreateSteamCoreSession) == 0x000088, "Wrong size on SteamCoreCreateSession_CreateSteamCoreSession");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, WorldContextObject) == 0x000000, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, SessionSettings) == 0x000008, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::SessionSettings' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, SessionName) == 0x000058, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, MaxPlayers) == 0x000068, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::MaxPlayers' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bUseLAN) == 0x00006C, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bUseLAN' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bAllowInvites) == 0x00006D, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bAllowInvites' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bUsesPresence) == 0x00006E, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bUsesPresence' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bAllowJoinViaPresence) == 0x00006F, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bAllowJoinViaPresence' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bAllowJoinViaPresenceFriendsOnly) == 0x000070, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bAllowJoinViaPresenceFriendsOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bAntiCheatProtected) == 0x000071, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bAntiCheatProtected' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bUsesStats) == 0x000072, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bUsesStats' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bShouldAdvertise) == 0x000073, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bShouldAdvertise' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, bUseLobbiesVoiceChatIfAvailable) == 0x000074, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::bUseLobbiesVoiceChatIfAvailable' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, Timeout) == 0x000078, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreCreateSession_CreateSteamCoreSession, ReturnValue) == 0x000080, "Member 'SteamCoreCreateSession_CreateSteamCoreSession::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFindSession.FindSteamCoreSessions
// 0x0070 (0x0070 - 0x0000)
struct SteamCoreFindSession_FindSteamCoreSessions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSteamSessionSearchSetting> SearchSettings;                                    // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamSessionFindType                         ServerType;                                        // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmptyServersOnly;                                 // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecureServersOnly;                                // 0x005F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreFindSession*                  ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFindSession_FindSteamCoreSessions) == 0x000008, "Wrong alignment on SteamCoreFindSession_FindSteamCoreSessions");
static_assert(sizeof(SteamCoreFindSession_FindSteamCoreSessions) == 0x000070, "Wrong size on SteamCoreFindSession_FindSteamCoreSessions");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, WorldContextObject) == 0x000000, "Member 'SteamCoreFindSession_FindSteamCoreSessions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, SearchSettings) == 0x000008, "Member 'SteamCoreFindSession_FindSteamCoreSessions::SearchSettings' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, MaxResults) == 0x000058, "Member 'SteamCoreFindSession_FindSteamCoreSessions::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, bUseLAN) == 0x00005C, "Member 'SteamCoreFindSession_FindSteamCoreSessions::bUseLAN' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, ServerType) == 0x00005D, "Member 'SteamCoreFindSession_FindSteamCoreSessions::ServerType' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, bEmptyServersOnly) == 0x00005E, "Member 'SteamCoreFindSession_FindSteamCoreSessions::bEmptyServersOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, bSecureServersOnly) == 0x00005F, "Member 'SteamCoreFindSession_FindSteamCoreSessions::bSecureServersOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, Timeout) == 0x000060, "Member 'SteamCoreFindSession_FindSteamCoreSessions::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreFindSession_FindSteamCoreSessions, ReturnValue) == 0x000068, "Member 'SteamCoreFindSession_FindSteamCoreSessions::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreFindSession.OnCompleted
// 0x0001 (0x0001 - 0x0000)
struct SteamCoreFindSession_OnCompleted final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreFindSession_OnCompleted) == 0x000001, "Wrong alignment on SteamCoreFindSession_OnCompleted");
static_assert(sizeof(SteamCoreFindSession_OnCompleted) == 0x000001, "Wrong size on SteamCoreFindSession_OnCompleted");
static_assert(offsetof(SteamCoreFindSession_OnCompleted, bSuccessful) == 0x000000, "Member 'SteamCoreFindSession_OnCompleted::bSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreDestroySession.DestroySteamCoreSession
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreDestroySession_DestroySteamCoreSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreDestroySession*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreDestroySession_DestroySteamCoreSession) == 0x000008, "Wrong alignment on SteamCoreDestroySession_DestroySteamCoreSession");
static_assert(sizeof(SteamCoreDestroySession_DestroySteamCoreSession) == 0x000018, "Wrong size on SteamCoreDestroySession_DestroySteamCoreSession");
static_assert(offsetof(SteamCoreDestroySession_DestroySteamCoreSession, WorldContextObject) == 0x000000, "Member 'SteamCoreDestroySession_DestroySteamCoreSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreDestroySession_DestroySteamCoreSession, Timeout) == 0x000008, "Member 'SteamCoreDestroySession_DestroySteamCoreSession::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreDestroySession_DestroySteamCoreSession, ReturnValue) == 0x000010, "Member 'SteamCoreDestroySession_DestroySteamCoreSession::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreDestroySession.OnCompleted
// 0x000C (0x000C - 0x0000)
struct SteamCoreDestroySession_OnCompleted final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreDestroySession_OnCompleted) == 0x000004, "Wrong alignment on SteamCoreDestroySession_OnCompleted");
static_assert(sizeof(SteamCoreDestroySession_OnCompleted) == 0x00000C, "Wrong size on SteamCoreDestroySession_OnCompleted");
static_assert(offsetof(SteamCoreDestroySession_OnCompleted, SessionName) == 0x000000, "Member 'SteamCoreDestroySession_OnCompleted::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreDestroySession_OnCompleted, bWasSuccessful) == 0x000008, "Member 'SteamCoreDestroySession_OnCompleted::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUpdateSession.UpdateSteamCoreSession
// 0x0078 (0x0078 - 0x0000)
struct SteamCoreUpdateSession_UpdateSteamCoreSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSteamSessionSearchSetting> Settings;                                          // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUpdateSession*                ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUpdateSession_UpdateSteamCoreSession) == 0x000008, "Wrong alignment on SteamCoreUpdateSession_UpdateSteamCoreSession");
static_assert(sizeof(SteamCoreUpdateSession_UpdateSteamCoreSession) == 0x000078, "Wrong size on SteamCoreUpdateSession_UpdateSteamCoreSession");
static_assert(offsetof(SteamCoreUpdateSession_UpdateSteamCoreSession, WorldContextObject) == 0x000000, "Member 'SteamCoreUpdateSession_UpdateSteamCoreSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUpdateSession_UpdateSteamCoreSession, Settings) == 0x000008, "Member 'SteamCoreUpdateSession_UpdateSteamCoreSession::Settings' has a wrong offset!");
static_assert(offsetof(SteamCoreUpdateSession_UpdateSteamCoreSession, SessionName) == 0x000058, "Member 'SteamCoreUpdateSession_UpdateSteamCoreSession::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreUpdateSession_UpdateSteamCoreSession, MaxPlayers) == 0x000068, "Member 'SteamCoreUpdateSession_UpdateSteamCoreSession::MaxPlayers' has a wrong offset!");
static_assert(offsetof(SteamCoreUpdateSession_UpdateSteamCoreSession, ReturnValue) == 0x000070, "Member 'SteamCoreUpdateSession_UpdateSteamCoreSession::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUpdateSession.OnCompleted
// 0x000C (0x000C - 0x0000)
struct SteamCoreUpdateSession_OnCompleted final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUpdateSession_OnCompleted) == 0x000004, "Wrong alignment on SteamCoreUpdateSession_OnCompleted");
static_assert(sizeof(SteamCoreUpdateSession_OnCompleted) == 0x00000C, "Wrong size on SteamCoreUpdateSession_OnCompleted");
static_assert(offsetof(SteamCoreUpdateSession_OnCompleted, SessionName) == 0x000000, "Member 'SteamCoreUpdateSession_OnCompleted::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreUpdateSession_OnCompleted, bWasSuccessful) == 0x000008, "Member 'SteamCoreUpdateSession_OnCompleted::bWasSuccessful' has a wrong offset!");

// Function SteamCore.MatchmakingServers.PingServer
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_PingServer final
{
public:
	TDelegate<void(struct FGameServerItem& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakingServers_PingServer) == 0x000008, "Wrong alignment on MatchmakingServers_PingServer");
static_assert(sizeof(MatchmakingServers_PingServer) == 0x000028, "Wrong size on MatchmakingServers_PingServer");
static_assert(offsetof(MatchmakingServers_PingServer, Callback) == 0x000000, "Member 'MatchmakingServers_PingServer::Callback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_PingServer, IP) == 0x000010, "Member 'MatchmakingServers_PingServer::IP' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_PingServer, QueryPort) == 0x000020, "Member 'MatchmakingServers_PingServer::QueryPort' has a wrong offset!");

// Function SteamCore.MatchmakingServers.RequestFavoritesServerList
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_RequestFavoritesServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingServers_RequestFavoritesServerList) == 0x000008, "Wrong alignment on MatchmakingServers_RequestFavoritesServerList");
static_assert(sizeof(MatchmakingServers_RequestFavoritesServerList) == 0x000028, "Wrong size on MatchmakingServers_RequestFavoritesServerList");
static_assert(offsetof(MatchmakingServers_RequestFavoritesServerList, ServerCallback) == 0x000000, "Member 'MatchmakingServers_RequestFavoritesServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFavoritesServerList, AppID) == 0x000010, "Member 'MatchmakingServers_RequestFavoritesServerList::AppID' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFavoritesServerList, Timeout) == 0x000014, "Member 'MatchmakingServers_RequestFavoritesServerList::Timeout' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFavoritesServerList, MaxResults) == 0x000018, "Member 'MatchmakingServers_RequestFavoritesServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFavoritesServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'MatchmakingServers_RequestFavoritesServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFavoritesServerList, ServerFilter) == 0x000020, "Member 'MatchmakingServers_RequestFavoritesServerList::ServerFilter' has a wrong offset!");

// Function SteamCore.MatchmakingServers.RequestFriendsServerList
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_RequestFriendsServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingServers_RequestFriendsServerList) == 0x000008, "Wrong alignment on MatchmakingServers_RequestFriendsServerList");
static_assert(sizeof(MatchmakingServers_RequestFriendsServerList) == 0x000028, "Wrong size on MatchmakingServers_RequestFriendsServerList");
static_assert(offsetof(MatchmakingServers_RequestFriendsServerList, ServerCallback) == 0x000000, "Member 'MatchmakingServers_RequestFriendsServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFriendsServerList, AppID) == 0x000010, "Member 'MatchmakingServers_RequestFriendsServerList::AppID' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFriendsServerList, Timeout) == 0x000014, "Member 'MatchmakingServers_RequestFriendsServerList::Timeout' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFriendsServerList, MaxResults) == 0x000018, "Member 'MatchmakingServers_RequestFriendsServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFriendsServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'MatchmakingServers_RequestFriendsServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestFriendsServerList, ServerFilter) == 0x000020, "Member 'MatchmakingServers_RequestFriendsServerList::ServerFilter' has a wrong offset!");

// Function SteamCore.MatchmakingServers.RequestHistoryServerList
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_RequestHistoryServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingServers_RequestHistoryServerList) == 0x000008, "Wrong alignment on MatchmakingServers_RequestHistoryServerList");
static_assert(sizeof(MatchmakingServers_RequestHistoryServerList) == 0x000028, "Wrong size on MatchmakingServers_RequestHistoryServerList");
static_assert(offsetof(MatchmakingServers_RequestHistoryServerList, ServerCallback) == 0x000000, "Member 'MatchmakingServers_RequestHistoryServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestHistoryServerList, AppID) == 0x000010, "Member 'MatchmakingServers_RequestHistoryServerList::AppID' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestHistoryServerList, Timeout) == 0x000014, "Member 'MatchmakingServers_RequestHistoryServerList::Timeout' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestHistoryServerList, MaxResults) == 0x000018, "Member 'MatchmakingServers_RequestHistoryServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestHistoryServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'MatchmakingServers_RequestHistoryServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestHistoryServerList, ServerFilter) == 0x000020, "Member 'MatchmakingServers_RequestHistoryServerList::ServerFilter' has a wrong offset!");

// Function SteamCore.MatchmakingServers.RequestInternetServerList
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_RequestInternetServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingServers_RequestInternetServerList) == 0x000008, "Wrong alignment on MatchmakingServers_RequestInternetServerList");
static_assert(sizeof(MatchmakingServers_RequestInternetServerList) == 0x000028, "Wrong size on MatchmakingServers_RequestInternetServerList");
static_assert(offsetof(MatchmakingServers_RequestInternetServerList, ServerCallback) == 0x000000, "Member 'MatchmakingServers_RequestInternetServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestInternetServerList, AppID) == 0x000010, "Member 'MatchmakingServers_RequestInternetServerList::AppID' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestInternetServerList, Timeout) == 0x000014, "Member 'MatchmakingServers_RequestInternetServerList::Timeout' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestInternetServerList, MaxResults) == 0x000018, "Member 'MatchmakingServers_RequestInternetServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestInternetServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'MatchmakingServers_RequestInternetServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestInternetServerList, ServerFilter) == 0x000020, "Member 'MatchmakingServers_RequestInternetServerList::ServerFilter' has a wrong offset!");

// Function SteamCore.MatchmakingServers.RequestLANServerList
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_RequestLANServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingServers_RequestLANServerList) == 0x000008, "Wrong alignment on MatchmakingServers_RequestLANServerList");
static_assert(sizeof(MatchmakingServers_RequestLANServerList) == 0x000028, "Wrong size on MatchmakingServers_RequestLANServerList");
static_assert(offsetof(MatchmakingServers_RequestLANServerList, ServerCallback) == 0x000000, "Member 'MatchmakingServers_RequestLANServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestLANServerList, AppID) == 0x000010, "Member 'MatchmakingServers_RequestLANServerList::AppID' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestLANServerList, Timeout) == 0x000014, "Member 'MatchmakingServers_RequestLANServerList::Timeout' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestLANServerList, MaxResults) == 0x000018, "Member 'MatchmakingServers_RequestLANServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestLANServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'MatchmakingServers_RequestLANServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestLANServerList, ServerFilter) == 0x000020, "Member 'MatchmakingServers_RequestLANServerList::ServerFilter' has a wrong offset!");

// Function SteamCore.MatchmakingServers.RequestSpectatorServerList
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_RequestSpectatorServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingServers_RequestSpectatorServerList) == 0x000008, "Wrong alignment on MatchmakingServers_RequestSpectatorServerList");
static_assert(sizeof(MatchmakingServers_RequestSpectatorServerList) == 0x000028, "Wrong size on MatchmakingServers_RequestSpectatorServerList");
static_assert(offsetof(MatchmakingServers_RequestSpectatorServerList, ServerCallback) == 0x000000, "Member 'MatchmakingServers_RequestSpectatorServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestSpectatorServerList, AppID) == 0x000010, "Member 'MatchmakingServers_RequestSpectatorServerList::AppID' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestSpectatorServerList, Timeout) == 0x000014, "Member 'MatchmakingServers_RequestSpectatorServerList::Timeout' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestSpectatorServerList, MaxResults) == 0x000018, "Member 'MatchmakingServers_RequestSpectatorServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestSpectatorServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'MatchmakingServers_RequestSpectatorServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_RequestSpectatorServerList, ServerFilter) == 0x000020, "Member 'MatchmakingServers_RequestSpectatorServerList::ServerFilter' has a wrong offset!");

// Function SteamCore.MatchmakingServers.ServerRules
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingServers_ServerRules final
{
public:
	TDelegate<void(TArray<struct FGameServerRule>& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakingServers_ServerRules) == 0x000008, "Wrong alignment on MatchmakingServers_ServerRules");
static_assert(sizeof(MatchmakingServers_ServerRules) == 0x000028, "Wrong size on MatchmakingServers_ServerRules");
static_assert(offsetof(MatchmakingServers_ServerRules, Callback) == 0x000000, "Member 'MatchmakingServers_ServerRules::Callback' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_ServerRules, IP) == 0x000010, "Member 'MatchmakingServers_ServerRules::IP' has a wrong offset!");
static_assert(offsetof(MatchmakingServers_ServerRules, QueryPort) == 0x000020, "Member 'MatchmakingServers_ServerRules::QueryPort' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionPingServer.CancelPingQueries
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionPingServer_CancelPingQueries final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionPingServer_CancelPingQueries) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionPingServer_CancelPingQueries");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionPingServer_CancelPingQueries) == 0x000008, "Wrong size on SteamCoreMatchmakingServersAsyncActionPingServer_CancelPingQueries");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_CancelPingQueries, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_CancelPingQueries::WorldContextObject' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionPingServer.PingServerAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionPingServer* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync, IP) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync::IP' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync, Port) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync::Port' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync, Timeout) == 0x00001C, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_PingServerAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionPingServer.HandleCallback
// 0x00B8 (0x00B8 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback final
{
public:
	struct FGameServerItem                        Data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback) == 0x0000B8, "Wrong size on SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback, Data) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback, bWasSuccessful) == 0x0000B0, "Member 'SteamCoreMatchmakingServersAsyncActionPingServer_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.CancelServerListQueries
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries) == 0x000008, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries::WorldContextObject' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.RequestFavoritesServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, AppID) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.RequestFriendsServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, AppID) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.RequestHistoryServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, AppID) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.RequestInternetServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, AppID) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.RequestLANServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, AppID) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.RequestSpectatorServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, AppID) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionRequestServerList.HandleCallback
// 0x00B0 (0x00B0 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionRequestServerList_HandleCallback final
{
public:
	struct FGameServerItem                        Data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionRequestServerList_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionRequestServerList_HandleCallback");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionRequestServerList_HandleCallback) == 0x0000B0, "Wrong size on SteamCoreMatchmakingServersAsyncActionRequestServerList_HandleCallback");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionRequestServerList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionRequestServerList_HandleCallback::Data' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionServerRules.CancelServerRulesQueries
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries) == 0x000008, "Wrong size on SteamCoreMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries::WorldContextObject' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionServerRules.ServerRulesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreMatchmakingServersAsyncActionServerRules* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync) == 0x000028, "Wrong size on SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync, IP) == 0x000008, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync::IP' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync, QueryPort) == 0x000018, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync::QueryPort' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync, Timeout) == 0x00001C, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_ServerRulesAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreMatchmakingServersAsyncActionServerRules.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback final
{
public:
	TArray<struct FGameServerRule>                Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback");
static_assert(sizeof(SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback) == 0x000018, "Wrong size on SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback, Data) == 0x000000, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreMatchmakingServersAsyncActionServerRules_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterAnd
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterAnd final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterAnd) == 0x000008, "Wrong alignment on ServerFilter_AddFilterAnd");
static_assert(sizeof(ServerFilter_AddFilterAnd) == 0x000010, "Wrong size on ServerFilter_AddFilterAnd");
static_assert(offsetof(ServerFilter_AddFilterAnd, Value) == 0x000000, "Member 'ServerFilter_AddFilterAnd::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterGameAddr
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameAddr final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameAddr) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameAddr");
static_assert(sizeof(ServerFilter_AddFilterGameAddr) == 0x000010, "Wrong size on ServerFilter_AddFilterGameAddr");
static_assert(offsetof(ServerFilter_AddFilterGameAddr, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameAddr::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterGameDataAnd
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameDataAnd final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameDataAnd) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameDataAnd");
static_assert(sizeof(ServerFilter_AddFilterGameDataAnd) == 0x000010, "Wrong size on ServerFilter_AddFilterGameDataAnd");
static_assert(offsetof(ServerFilter_AddFilterGameDataAnd, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameDataAnd::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterGameDataNor
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameDataNor final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameDataNor) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameDataNor");
static_assert(sizeof(ServerFilter_AddFilterGameDataNor) == 0x000010, "Wrong size on ServerFilter_AddFilterGameDataNor");
static_assert(offsetof(ServerFilter_AddFilterGameDataNor, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameDataNor::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterGameDataOr
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameDataOr final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameDataOr) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameDataOr");
static_assert(sizeof(ServerFilter_AddFilterGameDataOr) == 0x000010, "Wrong size on ServerFilter_AddFilterGameDataOr");
static_assert(offsetof(ServerFilter_AddFilterGameDataOr, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameDataOr::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterGameTagsAnd
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameTagsAnd final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameTagsAnd) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameTagsAnd");
static_assert(sizeof(ServerFilter_AddFilterGameTagsAnd) == 0x000010, "Wrong size on ServerFilter_AddFilterGameTagsAnd");
static_assert(offsetof(ServerFilter_AddFilterGameTagsAnd, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameTagsAnd::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterGameTagsNor
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameTagsNor final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameTagsNor) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameTagsNor");
static_assert(sizeof(ServerFilter_AddFilterGameTagsNor) == 0x000010, "Wrong size on ServerFilter_AddFilterGameTagsNor");
static_assert(offsetof(ServerFilter_AddFilterGameTagsNor, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameTagsNor::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterMap
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterMap final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterMap) == 0x000008, "Wrong alignment on ServerFilter_AddFilterMap");
static_assert(sizeof(ServerFilter_AddFilterMap) == 0x000010, "Wrong size on ServerFilter_AddFilterMap");
static_assert(offsetof(ServerFilter_AddFilterMap, Value) == 0x000000, "Member 'ServerFilter_AddFilterMap::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterName
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterName final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterName) == 0x000008, "Wrong alignment on ServerFilter_AddFilterName");
static_assert(sizeof(ServerFilter_AddFilterName) == 0x000010, "Wrong size on ServerFilter_AddFilterName");
static_assert(offsetof(ServerFilter_AddFilterName, Value) == 0x000000, "Member 'ServerFilter_AddFilterName::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterNand
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterNand final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterNand) == 0x000008, "Wrong alignment on ServerFilter_AddFilterNand");
static_assert(sizeof(ServerFilter_AddFilterNand) == 0x000010, "Wrong size on ServerFilter_AddFilterNand");
static_assert(offsetof(ServerFilter_AddFilterNand, Value) == 0x000000, "Member 'ServerFilter_AddFilterNand::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterNor
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterNor final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterNor) == 0x000008, "Wrong alignment on ServerFilter_AddFilterNor");
static_assert(sizeof(ServerFilter_AddFilterNor) == 0x000010, "Wrong size on ServerFilter_AddFilterNor");
static_assert(offsetof(ServerFilter_AddFilterNor, Value) == 0x000000, "Member 'ServerFilter_AddFilterNor::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterNotAppId
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterNotAppId final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterNotAppId) == 0x000008, "Wrong alignment on ServerFilter_AddFilterNotAppId");
static_assert(sizeof(ServerFilter_AddFilterNotAppId) == 0x000010, "Wrong size on ServerFilter_AddFilterNotAppId");
static_assert(offsetof(ServerFilter_AddFilterNotAppId, Value) == 0x000000, "Member 'ServerFilter_AddFilterNotAppId::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterOr
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterOr final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterOr) == 0x000008, "Wrong alignment on ServerFilter_AddFilterOr");
static_assert(sizeof(ServerFilter_AddFilterOr) == 0x000010, "Wrong size on ServerFilter_AddFilterOr");
static_assert(offsetof(ServerFilter_AddFilterOr, Value) == 0x000000, "Member 'ServerFilter_AddFilterOr::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.AddFilterVersion
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterVersion final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterVersion) == 0x000008, "Wrong alignment on ServerFilter_AddFilterVersion");
static_assert(sizeof(ServerFilter_AddFilterVersion) == 0x000010, "Wrong size on ServerFilter_AddFilterVersion");
static_assert(offsetof(ServerFilter_AddFilterVersion, Value) == 0x000000, "Member 'ServerFilter_AddFilterVersion::Value' has a wrong offset!");

// Function SteamCore.ServerFilter.GetFilters
// 0x0050 (0x0050 - 0x0000)
struct ServerFilter_GetFilters final
{
public:
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_GetFilters) == 0x000008, "Wrong alignment on ServerFilter_GetFilters");
static_assert(sizeof(ServerFilter_GetFilters) == 0x000050, "Wrong size on ServerFilter_GetFilters");
static_assert(offsetof(ServerFilter_GetFilters, ReturnValue) == 0x000000, "Member 'ServerFilter_GetFilters::ReturnValue' has a wrong offset!");

// Function SteamCore.Music.BIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct Music_BIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Music_BIsEnabled) == 0x000001, "Wrong alignment on Music_BIsEnabled");
static_assert(sizeof(Music_BIsEnabled) == 0x000001, "Wrong size on Music_BIsEnabled");
static_assert(offsetof(Music_BIsEnabled, ReturnValue) == 0x000000, "Member 'Music_BIsEnabled::ReturnValue' has a wrong offset!");

// Function SteamCore.Music.BIsPlaying
// 0x0001 (0x0001 - 0x0000)
struct Music_BIsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Music_BIsPlaying) == 0x000001, "Wrong alignment on Music_BIsPlaying");
static_assert(sizeof(Music_BIsPlaying) == 0x000001, "Wrong size on Music_BIsPlaying");
static_assert(offsetof(Music_BIsPlaying, ReturnValue) == 0x000000, "Member 'Music_BIsPlaying::ReturnValue' has a wrong offset!");

// Function SteamCore.Music.GetPlaybackStatus
// 0x0001 (0x0001 - 0x0000)
struct Music_GetPlaybackStatus final
{
public:
	ESteamAudioPlaybackStatus                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Music_GetPlaybackStatus) == 0x000001, "Wrong alignment on Music_GetPlaybackStatus");
static_assert(sizeof(Music_GetPlaybackStatus) == 0x000001, "Wrong size on Music_GetPlaybackStatus");
static_assert(offsetof(Music_GetPlaybackStatus, ReturnValue) == 0x000000, "Member 'Music_GetPlaybackStatus::ReturnValue' has a wrong offset!");

// Function SteamCore.Music.GetVolume
// 0x0004 (0x0004 - 0x0000)
struct Music_GetVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Music_GetVolume) == 0x000004, "Wrong alignment on Music_GetVolume");
static_assert(sizeof(Music_GetVolume) == 0x000004, "Wrong size on Music_GetVolume");
static_assert(offsetof(Music_GetVolume, ReturnValue) == 0x000000, "Member 'Music_GetVolume::ReturnValue' has a wrong offset!");

// Function SteamCore.Music.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct Music_SetVolume final
{
public:
	float                                         FlVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Music_SetVolume) == 0x000004, "Wrong alignment on Music_SetVolume");
static_assert(sizeof(Music_SetVolume) == 0x000004, "Wrong size on Music_SetVolume");
static_assert(offsetof(Music_SetVolume, FlVolume) == 0x000000, "Member 'Music_SetVolume::FlVolume' has a wrong offset!");

// Function SteamCore.Networking.AcceptP2PSessionWithUser
// 0x0010 (0x0010 - 0x0000)
struct Networking_AcceptP2PSessionWithUser final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Networking_AcceptP2PSessionWithUser) == 0x000008, "Wrong alignment on Networking_AcceptP2PSessionWithUser");
static_assert(sizeof(Networking_AcceptP2PSessionWithUser) == 0x000010, "Wrong size on Networking_AcceptP2PSessionWithUser");
static_assert(offsetof(Networking_AcceptP2PSessionWithUser, SteamIDRemote) == 0x000000, "Member 'Networking_AcceptP2PSessionWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(Networking_AcceptP2PSessionWithUser, ReturnValue) == 0x000008, "Member 'Networking_AcceptP2PSessionWithUser::ReturnValue' has a wrong offset!");

// Function SteamCore.Networking.AllowP2PPacketRelay
// 0x0002 (0x0002 - 0x0000)
struct Networking_AllowP2PPacketRelay final
{
public:
	bool                                          bAllow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Networking_AllowP2PPacketRelay) == 0x000001, "Wrong alignment on Networking_AllowP2PPacketRelay");
static_assert(sizeof(Networking_AllowP2PPacketRelay) == 0x000002, "Wrong size on Networking_AllowP2PPacketRelay");
static_assert(offsetof(Networking_AllowP2PPacketRelay, bAllow) == 0x000000, "Member 'Networking_AllowP2PPacketRelay::bAllow' has a wrong offset!");
static_assert(offsetof(Networking_AllowP2PPacketRelay, ReturnValue) == 0x000001, "Member 'Networking_AllowP2PPacketRelay::ReturnValue' has a wrong offset!");

// Function SteamCore.Networking.CloseP2PChannelWithUser
// 0x0010 (0x0010 - 0x0000)
struct Networking_CloseP2PChannelWithUser final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Networking_CloseP2PChannelWithUser) == 0x000008, "Wrong alignment on Networking_CloseP2PChannelWithUser");
static_assert(sizeof(Networking_CloseP2PChannelWithUser) == 0x000010, "Wrong size on Networking_CloseP2PChannelWithUser");
static_assert(offsetof(Networking_CloseP2PChannelWithUser, SteamIDRemote) == 0x000000, "Member 'Networking_CloseP2PChannelWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(Networking_CloseP2PChannelWithUser, Channel) == 0x000008, "Member 'Networking_CloseP2PChannelWithUser::Channel' has a wrong offset!");
static_assert(offsetof(Networking_CloseP2PChannelWithUser, ReturnValue) == 0x00000C, "Member 'Networking_CloseP2PChannelWithUser::ReturnValue' has a wrong offset!");

// Function SteamCore.Networking.CloseP2PSessionWithUser
// 0x0010 (0x0010 - 0x0000)
struct Networking_CloseP2PSessionWithUser final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Networking_CloseP2PSessionWithUser) == 0x000008, "Wrong alignment on Networking_CloseP2PSessionWithUser");
static_assert(sizeof(Networking_CloseP2PSessionWithUser) == 0x000010, "Wrong size on Networking_CloseP2PSessionWithUser");
static_assert(offsetof(Networking_CloseP2PSessionWithUser, SteamIDRemote) == 0x000000, "Member 'Networking_CloseP2PSessionWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(Networking_CloseP2PSessionWithUser, ReturnValue) == 0x000008, "Member 'Networking_CloseP2PSessionWithUser::ReturnValue' has a wrong offset!");

// Function SteamCore.Networking.GetP2PSessionState
// 0x0038 (0x0038 - 0x0000)
struct Networking_GetP2PSessionState final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamP2PSessionState                  ConnectionState;                                   // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Networking_GetP2PSessionState) == 0x000008, "Wrong alignment on Networking_GetP2PSessionState");
static_assert(sizeof(Networking_GetP2PSessionState) == 0x000038, "Wrong size on Networking_GetP2PSessionState");
static_assert(offsetof(Networking_GetP2PSessionState, SteamIDRemote) == 0x000000, "Member 'Networking_GetP2PSessionState::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(Networking_GetP2PSessionState, ConnectionState) == 0x000008, "Member 'Networking_GetP2PSessionState::ConnectionState' has a wrong offset!");
static_assert(offsetof(Networking_GetP2PSessionState, ReturnValue) == 0x000030, "Member 'Networking_GetP2PSessionState::ReturnValue' has a wrong offset!");

// Function SteamCore.Networking.IsP2PPacketAvailable
// 0x000C (0x000C - 0x0000)
struct Networking_IsP2PPacketAvailable final
{
public:
	int32                                         MessageSize;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Networking_IsP2PPacketAvailable) == 0x000004, "Wrong alignment on Networking_IsP2PPacketAvailable");
static_assert(sizeof(Networking_IsP2PPacketAvailable) == 0x00000C, "Wrong size on Networking_IsP2PPacketAvailable");
static_assert(offsetof(Networking_IsP2PPacketAvailable, MessageSize) == 0x000000, "Member 'Networking_IsP2PPacketAvailable::MessageSize' has a wrong offset!");
static_assert(offsetof(Networking_IsP2PPacketAvailable, Channel) == 0x000004, "Member 'Networking_IsP2PPacketAvailable::Channel' has a wrong offset!");
static_assert(offsetof(Networking_IsP2PPacketAvailable, ReturnValue) == 0x000008, "Member 'Networking_IsP2PPacketAvailable::ReturnValue' has a wrong offset!");

// Function SteamCore.Networking.ReadP2PPacket
// 0x0028 (0x0028 - 0x0000)
struct Networking_ReadP2PPacket final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               OutSteamIdRemote;                                  // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageSize;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Networking_ReadP2PPacket) == 0x000008, "Wrong alignment on Networking_ReadP2PPacket");
static_assert(sizeof(Networking_ReadP2PPacket) == 0x000028, "Wrong size on Networking_ReadP2PPacket");
static_assert(offsetof(Networking_ReadP2PPacket, Data) == 0x000000, "Member 'Networking_ReadP2PPacket::Data' has a wrong offset!");
static_assert(offsetof(Networking_ReadP2PPacket, OutSteamIdRemote) == 0x000010, "Member 'Networking_ReadP2PPacket::OutSteamIdRemote' has a wrong offset!");
static_assert(offsetof(Networking_ReadP2PPacket, MessageSize) == 0x000018, "Member 'Networking_ReadP2PPacket::MessageSize' has a wrong offset!");
static_assert(offsetof(Networking_ReadP2PPacket, Channel) == 0x00001C, "Member 'Networking_ReadP2PPacket::Channel' has a wrong offset!");
static_assert(offsetof(Networking_ReadP2PPacket, ReturnValue) == 0x000020, "Member 'Networking_ReadP2PPacket::ReturnValue' has a wrong offset!");

// Function SteamCore.Networking.SendP2PPacket
// 0x0028 (0x0028 - 0x0000)
struct Networking_SendP2PPacket final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamP2PSend                                 P2PSendType;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Channel;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Networking_SendP2PPacket) == 0x000008, "Wrong alignment on Networking_SendP2PPacket");
static_assert(sizeof(Networking_SendP2PPacket) == 0x000028, "Wrong size on Networking_SendP2PPacket");
static_assert(offsetof(Networking_SendP2PPacket, SteamIDRemote) == 0x000000, "Member 'Networking_SendP2PPacket::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(Networking_SendP2PPacket, Data) == 0x000008, "Member 'Networking_SendP2PPacket::Data' has a wrong offset!");
static_assert(offsetof(Networking_SendP2PPacket, P2PSendType) == 0x000018, "Member 'Networking_SendP2PPacket::P2PSendType' has a wrong offset!");
static_assert(offsetof(Networking_SendP2PPacket, Channel) == 0x00001C, "Member 'Networking_SendP2PPacket::Channel' has a wrong offset!");
static_assert(offsetof(Networking_SendP2PPacket, ReturnValue) == 0x000020, "Member 'Networking_SendP2PPacket::ReturnValue' has a wrong offset!");

// Function SteamCore.NetworkingUtils.ConvertPingLocationToString
// 0x0020 (0x0020 - 0x0000)
struct NetworkingUtils_ConvertPingLocationToString final
{
public:
	struct FSteamNetworkPingLocation              Location;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkingUtils_ConvertPingLocationToString) == 0x000008, "Wrong alignment on NetworkingUtils_ConvertPingLocationToString");
static_assert(sizeof(NetworkingUtils_ConvertPingLocationToString) == 0x000020, "Wrong size on NetworkingUtils_ConvertPingLocationToString");
static_assert(offsetof(NetworkingUtils_ConvertPingLocationToString, Location) == 0x000000, "Member 'NetworkingUtils_ConvertPingLocationToString::Location' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_ConvertPingLocationToString, String) == 0x000010, "Member 'NetworkingUtils_ConvertPingLocationToString::String' has a wrong offset!");

// Function SteamCore.NetworkingUtils.ParsePingLocationString
// 0x0028 (0x0028 - 0x0000)
struct NetworkingUtils_ParsePingLocationString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamNetworkPingLocation              Result;                                            // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkingUtils_ParsePingLocationString) == 0x000008, "Wrong alignment on NetworkingUtils_ParsePingLocationString");
static_assert(sizeof(NetworkingUtils_ParsePingLocationString) == 0x000028, "Wrong size on NetworkingUtils_ParsePingLocationString");
static_assert(offsetof(NetworkingUtils_ParsePingLocationString, String) == 0x000000, "Member 'NetworkingUtils_ParsePingLocationString::String' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_ParsePingLocationString, Result) == 0x000010, "Member 'NetworkingUtils_ParsePingLocationString::Result' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_ParsePingLocationString, ReturnValue) == 0x000020, "Member 'NetworkingUtils_ParsePingLocationString::ReturnValue' has a wrong offset!");

// Function SteamCore.NetworkingUtils.CheckPingDataUpToDate
// 0x0008 (0x0008 - 0x0000)
struct NetworkingUtils_CheckPingDataUpToDate final
{
public:
	float                                         MaxAgeSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkingUtils_CheckPingDataUpToDate) == 0x000004, "Wrong alignment on NetworkingUtils_CheckPingDataUpToDate");
static_assert(sizeof(NetworkingUtils_CheckPingDataUpToDate) == 0x000008, "Wrong size on NetworkingUtils_CheckPingDataUpToDate");
static_assert(offsetof(NetworkingUtils_CheckPingDataUpToDate, MaxAgeSeconds) == 0x000000, "Member 'NetworkingUtils_CheckPingDataUpToDate::MaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_CheckPingDataUpToDate, ReturnValue) == 0x000004, "Member 'NetworkingUtils_CheckPingDataUpToDate::ReturnValue' has a wrong offset!");

// Function SteamCore.NetworkingUtils.EstimatePingTimeBetweenTwoLocations
// 0x0028 (0x0028 - 0x0000)
struct NetworkingUtils_EstimatePingTimeBetweenTwoLocations final
{
public:
	struct FSteamNetworkPingLocation              Location1;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamNetworkPingLocation              Location2;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkingUtils_EstimatePingTimeBetweenTwoLocations) == 0x000008, "Wrong alignment on NetworkingUtils_EstimatePingTimeBetweenTwoLocations");
static_assert(sizeof(NetworkingUtils_EstimatePingTimeBetweenTwoLocations) == 0x000028, "Wrong size on NetworkingUtils_EstimatePingTimeBetweenTwoLocations");
static_assert(offsetof(NetworkingUtils_EstimatePingTimeBetweenTwoLocations, Location1) == 0x000000, "Member 'NetworkingUtils_EstimatePingTimeBetweenTwoLocations::Location1' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_EstimatePingTimeBetweenTwoLocations, Location2) == 0x000010, "Member 'NetworkingUtils_EstimatePingTimeBetweenTwoLocations::Location2' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_EstimatePingTimeBetweenTwoLocations, ReturnValue) == 0x000020, "Member 'NetworkingUtils_EstimatePingTimeBetweenTwoLocations::ReturnValue' has a wrong offset!");

// Function SteamCore.NetworkingUtils.EstimatePingTimeFromLocalHost
// 0x0018 (0x0018 - 0x0000)
struct NetworkingUtils_EstimatePingTimeFromLocalHost final
{
public:
	struct FSteamNetworkPingLocation              RemoteLocation;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkingUtils_EstimatePingTimeFromLocalHost) == 0x000008, "Wrong alignment on NetworkingUtils_EstimatePingTimeFromLocalHost");
static_assert(sizeof(NetworkingUtils_EstimatePingTimeFromLocalHost) == 0x000018, "Wrong size on NetworkingUtils_EstimatePingTimeFromLocalHost");
static_assert(offsetof(NetworkingUtils_EstimatePingTimeFromLocalHost, RemoteLocation) == 0x000000, "Member 'NetworkingUtils_EstimatePingTimeFromLocalHost::RemoteLocation' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_EstimatePingTimeFromLocalHost, ReturnValue) == 0x000010, "Member 'NetworkingUtils_EstimatePingTimeFromLocalHost::ReturnValue' has a wrong offset!");

// Function SteamCore.NetworkingUtils.GetLocalPingLocation
// 0x0018 (0x0018 - 0x0000)
struct NetworkingUtils_GetLocalPingLocation final
{
public:
	struct FSteamNetworkPingLocation              Result;                                            // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkingUtils_GetLocalPingLocation) == 0x000008, "Wrong alignment on NetworkingUtils_GetLocalPingLocation");
static_assert(sizeof(NetworkingUtils_GetLocalPingLocation) == 0x000018, "Wrong size on NetworkingUtils_GetLocalPingLocation");
static_assert(offsetof(NetworkingUtils_GetLocalPingLocation, Result) == 0x000000, "Member 'NetworkingUtils_GetLocalPingLocation::Result' has a wrong offset!");
static_assert(offsetof(NetworkingUtils_GetLocalPingLocation, ReturnValue) == 0x000010, "Member 'NetworkingUtils_GetLocalPingLocation::ReturnValue' has a wrong offset!");

// Function SteamCore.ParentalSettings.BIsAppBlocked
// 0x0008 (0x0008 - 0x0000)
struct ParentalSettings_BIsAppBlocked final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ParentalSettings_BIsAppBlocked) == 0x000004, "Wrong alignment on ParentalSettings_BIsAppBlocked");
static_assert(sizeof(ParentalSettings_BIsAppBlocked) == 0x000008, "Wrong size on ParentalSettings_BIsAppBlocked");
static_assert(offsetof(ParentalSettings_BIsAppBlocked, AppID) == 0x000000, "Member 'ParentalSettings_BIsAppBlocked::AppID' has a wrong offset!");
static_assert(offsetof(ParentalSettings_BIsAppBlocked, ReturnValue) == 0x000004, "Member 'ParentalSettings_BIsAppBlocked::ReturnValue' has a wrong offset!");

// Function SteamCore.ParentalSettings.BIsAppInBlockList
// 0x0008 (0x0008 - 0x0000)
struct ParentalSettings_BIsAppInBlockList final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ParentalSettings_BIsAppInBlockList) == 0x000004, "Wrong alignment on ParentalSettings_BIsAppInBlockList");
static_assert(sizeof(ParentalSettings_BIsAppInBlockList) == 0x000008, "Wrong size on ParentalSettings_BIsAppInBlockList");
static_assert(offsetof(ParentalSettings_BIsAppInBlockList, AppID) == 0x000000, "Member 'ParentalSettings_BIsAppInBlockList::AppID' has a wrong offset!");
static_assert(offsetof(ParentalSettings_BIsAppInBlockList, ReturnValue) == 0x000004, "Member 'ParentalSettings_BIsAppInBlockList::ReturnValue' has a wrong offset!");

// Function SteamCore.ParentalSettings.BIsFeatureBlocked
// 0x0002 (0x0002 - 0x0000)
struct ParentalSettings_BIsFeatureBlocked final
{
public:
	ESteamParentalFeature                         Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParentalSettings_BIsFeatureBlocked) == 0x000001, "Wrong alignment on ParentalSettings_BIsFeatureBlocked");
static_assert(sizeof(ParentalSettings_BIsFeatureBlocked) == 0x000002, "Wrong size on ParentalSettings_BIsFeatureBlocked");
static_assert(offsetof(ParentalSettings_BIsFeatureBlocked, Feature) == 0x000000, "Member 'ParentalSettings_BIsFeatureBlocked::Feature' has a wrong offset!");
static_assert(offsetof(ParentalSettings_BIsFeatureBlocked, ReturnValue) == 0x000001, "Member 'ParentalSettings_BIsFeatureBlocked::ReturnValue' has a wrong offset!");

// Function SteamCore.ParentalSettings.BIsFeatureInBlockList
// 0x0002 (0x0002 - 0x0000)
struct ParentalSettings_BIsFeatureInBlockList final
{
public:
	ESteamParentalFeature                         Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParentalSettings_BIsFeatureInBlockList) == 0x000001, "Wrong alignment on ParentalSettings_BIsFeatureInBlockList");
static_assert(sizeof(ParentalSettings_BIsFeatureInBlockList) == 0x000002, "Wrong size on ParentalSettings_BIsFeatureInBlockList");
static_assert(offsetof(ParentalSettings_BIsFeatureInBlockList, Feature) == 0x000000, "Member 'ParentalSettings_BIsFeatureInBlockList::Feature' has a wrong offset!");
static_assert(offsetof(ParentalSettings_BIsFeatureInBlockList, ReturnValue) == 0x000001, "Member 'ParentalSettings_BIsFeatureInBlockList::ReturnValue' has a wrong offset!");

// Function SteamCore.ParentalSettings.BIsParentalLockEnabled
// 0x0001 (0x0001 - 0x0000)
struct ParentalSettings_BIsParentalLockEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParentalSettings_BIsParentalLockEnabled) == 0x000001, "Wrong alignment on ParentalSettings_BIsParentalLockEnabled");
static_assert(sizeof(ParentalSettings_BIsParentalLockEnabled) == 0x000001, "Wrong size on ParentalSettings_BIsParentalLockEnabled");
static_assert(offsetof(ParentalSettings_BIsParentalLockEnabled, ReturnValue) == 0x000000, "Member 'ParentalSettings_BIsParentalLockEnabled::ReturnValue' has a wrong offset!");

// Function SteamCore.ParentalSettings.BIsParentalLockLocked
// 0x0001 (0x0001 - 0x0000)
struct ParentalSettings_BIsParentalLockLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParentalSettings_BIsParentalLockLocked) == 0x000001, "Wrong alignment on ParentalSettings_BIsParentalLockLocked");
static_assert(sizeof(ParentalSettings_BIsParentalLockLocked) == 0x000001, "Wrong size on ParentalSettings_BIsParentalLockLocked");
static_assert(offsetof(ParentalSettings_BIsParentalLockLocked, ReturnValue) == 0x000000, "Member 'ParentalSettings_BIsParentalLockLocked::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.CancelReservation
// 0x0010 (0x0010 - 0x0000)
struct SteamParties_CancelReservation final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamParties_CancelReservation) == 0x000008, "Wrong alignment on SteamParties_CancelReservation");
static_assert(sizeof(SteamParties_CancelReservation) == 0x000010, "Wrong size on SteamParties_CancelReservation");
static_assert(offsetof(SteamParties_CancelReservation, BeaconID) == 0x000000, "Member 'SteamParties_CancelReservation::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamParties_CancelReservation, SteamIDUser) == 0x000008, "Member 'SteamParties_CancelReservation::SteamIDUser' has a wrong offset!");

// Function SteamCore.SteamParties.DestroyBeacon
// 0x0010 (0x0010 - 0x0000)
struct SteamParties_DestroyBeacon final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamParties_DestroyBeacon) == 0x000008, "Wrong alignment on SteamParties_DestroyBeacon");
static_assert(sizeof(SteamParties_DestroyBeacon) == 0x000010, "Wrong size on SteamParties_DestroyBeacon");
static_assert(offsetof(SteamParties_DestroyBeacon, BeaconID) == 0x000000, "Member 'SteamParties_DestroyBeacon::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamParties_DestroyBeacon, ReturnValue) == 0x000008, "Member 'SteamParties_DestroyBeacon::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.GetAvailableBeaconLocations
// 0x0018 (0x0018 - 0x0000)
struct SteamParties_GetAvailableBeaconLocations final
{
public:
	TArray<struct FSteamPartyBeaconLocation>      LocationList;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxNumLocations;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamParties_GetAvailableBeaconLocations) == 0x000008, "Wrong alignment on SteamParties_GetAvailableBeaconLocations");
static_assert(sizeof(SteamParties_GetAvailableBeaconLocations) == 0x000018, "Wrong size on SteamParties_GetAvailableBeaconLocations");
static_assert(offsetof(SteamParties_GetAvailableBeaconLocations, LocationList) == 0x000000, "Member 'SteamParties_GetAvailableBeaconLocations::LocationList' has a wrong offset!");
static_assert(offsetof(SteamParties_GetAvailableBeaconLocations, MaxNumLocations) == 0x000010, "Member 'SteamParties_GetAvailableBeaconLocations::MaxNumLocations' has a wrong offset!");
static_assert(offsetof(SteamParties_GetAvailableBeaconLocations, ReturnValue) == 0x000014, "Member 'SteamParties_GetAvailableBeaconLocations::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.GetBeaconByIndex
// 0x0010 (0x0010 - 0x0000)
struct SteamParties_GetBeaconByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyBeaconID                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamParties_GetBeaconByIndex) == 0x000008, "Wrong alignment on SteamParties_GetBeaconByIndex");
static_assert(sizeof(SteamParties_GetBeaconByIndex) == 0x000010, "Wrong size on SteamParties_GetBeaconByIndex");
static_assert(offsetof(SteamParties_GetBeaconByIndex, Index_0) == 0x000000, "Member 'SteamParties_GetBeaconByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconByIndex, ReturnValue) == 0x000008, "Member 'SteamParties_GetBeaconByIndex::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.GetBeaconDetails
// 0x0040 (0x0040 - 0x0000)
struct SteamParties_GetBeaconDetails final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDBeaconOwner;                                // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamPartyBeaconLocation              Location;                                          // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 OutMetadata;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamParties_GetBeaconDetails) == 0x000008, "Wrong alignment on SteamParties_GetBeaconDetails");
static_assert(sizeof(SteamParties_GetBeaconDetails) == 0x000040, "Wrong size on SteamParties_GetBeaconDetails");
static_assert(offsetof(SteamParties_GetBeaconDetails, BeaconID) == 0x000000, "Member 'SteamParties_GetBeaconDetails::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconDetails, SteamIDBeaconOwner) == 0x000008, "Member 'SteamParties_GetBeaconDetails::SteamIDBeaconOwner' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconDetails, Location) == 0x000010, "Member 'SteamParties_GetBeaconDetails::Location' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconDetails, OutMetadata) == 0x000028, "Member 'SteamParties_GetBeaconDetails::OutMetadata' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconDetails, ReturnValue) == 0x000038, "Member 'SteamParties_GetBeaconDetails::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.GetBeaconLocationData
// 0x0038 (0x0038 - 0x0000)
struct SteamParties_GetBeaconLocationData final
{
public:
	struct FSteamPartyBeaconLocation              BeaconLocation;                                    // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	ESteamPartiesBeaconLocationData               EData;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PCHDataStringOut;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamParties_GetBeaconLocationData) == 0x000008, "Wrong alignment on SteamParties_GetBeaconLocationData");
static_assert(sizeof(SteamParties_GetBeaconLocationData) == 0x000038, "Wrong size on SteamParties_GetBeaconLocationData");
static_assert(offsetof(SteamParties_GetBeaconLocationData, BeaconLocation) == 0x000000, "Member 'SteamParties_GetBeaconLocationData::BeaconLocation' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconLocationData, EData) == 0x000018, "Member 'SteamParties_GetBeaconLocationData::EData' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconLocationData, PCHDataStringOut) == 0x000020, "Member 'SteamParties_GetBeaconLocationData::PCHDataStringOut' has a wrong offset!");
static_assert(offsetof(SteamParties_GetBeaconLocationData, ReturnValue) == 0x000030, "Member 'SteamParties_GetBeaconLocationData::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.GetNumActiveBeacons
// 0x0004 (0x0004 - 0x0000)
struct SteamParties_GetNumActiveBeacons final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamParties_GetNumActiveBeacons) == 0x000004, "Wrong alignment on SteamParties_GetNumActiveBeacons");
static_assert(sizeof(SteamParties_GetNumActiveBeacons) == 0x000004, "Wrong size on SteamParties_GetNumActiveBeacons");
static_assert(offsetof(SteamParties_GetNumActiveBeacons, ReturnValue) == 0x000000, "Member 'SteamParties_GetNumActiveBeacons::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.GetNumAvailableBeaconLocations
// 0x0008 (0x0008 - 0x0000)
struct SteamParties_GetNumAvailableBeaconLocations final
{
public:
	int32                                         NumLocations;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamParties_GetNumAvailableBeaconLocations) == 0x000004, "Wrong alignment on SteamParties_GetNumAvailableBeaconLocations");
static_assert(sizeof(SteamParties_GetNumAvailableBeaconLocations) == 0x000008, "Wrong size on SteamParties_GetNumAvailableBeaconLocations");
static_assert(offsetof(SteamParties_GetNumAvailableBeaconLocations, NumLocations) == 0x000000, "Member 'SteamParties_GetNumAvailableBeaconLocations::NumLocations' has a wrong offset!");
static_assert(offsetof(SteamParties_GetNumAvailableBeaconLocations, ReturnValue) == 0x000004, "Member 'SteamParties_GetNumAvailableBeaconLocations::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamParties.OnReservationCompleted
// 0x0010 (0x0010 - 0x0000)
struct SteamParties_OnReservationCompleted final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamParties_OnReservationCompleted) == 0x000008, "Wrong alignment on SteamParties_OnReservationCompleted");
static_assert(sizeof(SteamParties_OnReservationCompleted) == 0x000010, "Wrong size on SteamParties_OnReservationCompleted");
static_assert(offsetof(SteamParties_OnReservationCompleted, BeaconID) == 0x000000, "Member 'SteamParties_OnReservationCompleted::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamParties_OnReservationCompleted, SteamIDUser) == 0x000008, "Member 'SteamParties_OnReservationCompleted::SteamIDUser' has a wrong offset!");

// Function SteamCore.SteamParties.ChangeNumOpenSlots
// 0x0020 (0x0020 - 0x0000)
struct SteamParties_ChangeNumOpenSlots final
{
public:
	TDelegate<void(struct FChangeNumOpenSlotsData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamParties_ChangeNumOpenSlots) == 0x000008, "Wrong alignment on SteamParties_ChangeNumOpenSlots");
static_assert(sizeof(SteamParties_ChangeNumOpenSlots) == 0x000020, "Wrong size on SteamParties_ChangeNumOpenSlots");
static_assert(offsetof(SteamParties_ChangeNumOpenSlots, Callback) == 0x000000, "Member 'SteamParties_ChangeNumOpenSlots::Callback' has a wrong offset!");
static_assert(offsetof(SteamParties_ChangeNumOpenSlots, BeaconID) == 0x000010, "Member 'SteamParties_ChangeNumOpenSlots::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamParties_ChangeNumOpenSlots, OpenSlots) == 0x000018, "Member 'SteamParties_ChangeNumOpenSlots::OpenSlots' has a wrong offset!");

// Function SteamCore.SteamParties.CreateBeacon
// 0x0050 (0x0050 - 0x0000)
struct SteamParties_CreateBeacon final
{
public:
	TDelegate<void(struct FCreateBeaconData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamPartyBeaconLocation              BeaconLocation;                                    // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamParties_CreateBeacon) == 0x000008, "Wrong alignment on SteamParties_CreateBeacon");
static_assert(sizeof(SteamParties_CreateBeacon) == 0x000050, "Wrong size on SteamParties_CreateBeacon");
static_assert(offsetof(SteamParties_CreateBeacon, Callback) == 0x000000, "Member 'SteamParties_CreateBeacon::Callback' has a wrong offset!");
static_assert(offsetof(SteamParties_CreateBeacon, OpenSlots) == 0x000010, "Member 'SteamParties_CreateBeacon::OpenSlots' has a wrong offset!");
static_assert(offsetof(SteamParties_CreateBeacon, BeaconLocation) == 0x000018, "Member 'SteamParties_CreateBeacon::BeaconLocation' has a wrong offset!");
static_assert(offsetof(SteamParties_CreateBeacon, ConnectString) == 0x000030, "Member 'SteamParties_CreateBeacon::ConnectString' has a wrong offset!");
static_assert(offsetof(SteamParties_CreateBeacon, MetaData) == 0x000040, "Member 'SteamParties_CreateBeacon::MetaData' has a wrong offset!");

// Function SteamCore.SteamParties.JoinParty
// 0x0018 (0x0018 - 0x0000)
struct SteamParties_JoinParty final
{
public:
	TDelegate<void(struct FJoinPartyData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamParties_JoinParty) == 0x000008, "Wrong alignment on SteamParties_JoinParty");
static_assert(sizeof(SteamParties_JoinParty) == 0x000018, "Wrong size on SteamParties_JoinParty");
static_assert(offsetof(SteamParties_JoinParty, Callback) == 0x000000, "Member 'SteamParties_JoinParty::Callback' has a wrong offset!");
static_assert(offsetof(SteamParties_JoinParty, BeaconID) == 0x000010, "Member 'SteamParties_JoinParty::BeaconID' has a wrong offset!");

// Function SteamCore.SteamCoreSteamPartiesAsyncActionJoinParty.JoinPartyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreSteamPartiesAsyncActionJoinParty* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync) == 0x000008, "Wrong alignment on SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync");
static_assert(sizeof(SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync) == 0x000020, "Wrong size on SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync, BeaconID) == 0x000008, "Member 'SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync, Timeout) == 0x000010, "Member 'SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreSteamPartiesAsyncActionJoinParty_JoinPartyAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreSteamPartiesAsyncActionJoinParty.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback final
{
public:
	struct FJoinPartyData                         Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback");
static_assert(sizeof(SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback) == 0x000030, "Wrong size on SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback, Data) == 0x000000, "Member 'SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreSteamPartiesAsyncActionJoinParty_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreSteamPartiesAsyncActionCreateBeacon.CreateBeaconAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamPartyBeaconLocation              BeaconLocation;                                    // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreSteamPartiesAsyncActionCreateBeacon* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync) == 0x000008, "Wrong alignment on SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync");
static_assert(sizeof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync) == 0x000058, "Wrong size on SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, OpenSlots) == 0x000008, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::OpenSlots' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, BeaconLocation) == 0x000010, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::BeaconLocation' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, ConnectString) == 0x000028, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::ConnectString' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, MetaData) == 0x000038, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::MetaData' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, Timeout) == 0x000048, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, ReturnValue) == 0x000050, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreSteamPartiesAsyncActionCreateBeacon.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback final
{
public:
	struct FCreateBeaconData                      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback");
static_assert(sizeof(SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback) == 0x000018, "Wrong size on SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback, Data) == 0x000000, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreSteamPartiesAsyncActionCreateBeacon_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots.ChangeNumOpenSlotsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreSteamPartiesAsyncActionChangeNumOpenSlots* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync) == 0x000008, "Wrong alignment on SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync");
static_assert(sizeof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync) == 0x000020, "Wrong size on SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, BeaconID) == 0x000008, "Member 'SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, OpenSlots) == 0x000010, "Member 'SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::OpenSlots' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, Timeout) == 0x000014, "Member 'SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback final
{
public:
	struct FChangeNumOpenSlotsData                Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback");
static_assert(sizeof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback) == 0x000002, "Wrong size on SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback, Data) == 0x000000, "Member 'SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.RemotePlay.BGetSessionClientResolution
// 0x0010 (0x0010 - 0x0000)
struct RemotePlay_BGetSessionClientResolution final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionX;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionY;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemotePlay_BGetSessionClientResolution) == 0x000004, "Wrong alignment on RemotePlay_BGetSessionClientResolution");
static_assert(sizeof(RemotePlay_BGetSessionClientResolution) == 0x000010, "Wrong size on RemotePlay_BGetSessionClientResolution");
static_assert(offsetof(RemotePlay_BGetSessionClientResolution, SessionID) == 0x000000, "Member 'RemotePlay_BGetSessionClientResolution::SessionID' has a wrong offset!");
static_assert(offsetof(RemotePlay_BGetSessionClientResolution, ResolutionX) == 0x000004, "Member 'RemotePlay_BGetSessionClientResolution::ResolutionX' has a wrong offset!");
static_assert(offsetof(RemotePlay_BGetSessionClientResolution, ResolutionY) == 0x000008, "Member 'RemotePlay_BGetSessionClientResolution::ResolutionY' has a wrong offset!");
static_assert(offsetof(RemotePlay_BGetSessionClientResolution, ReturnValue) == 0x00000C, "Member 'RemotePlay_BGetSessionClientResolution::ReturnValue' has a wrong offset!");

// Function SteamCore.RemotePlay.BSendRemotePlayTogetherInvite
// 0x0010 (0x0010 - 0x0000)
struct RemotePlay_BSendRemotePlayTogetherInvite final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemotePlay_BSendRemotePlayTogetherInvite) == 0x000008, "Wrong alignment on RemotePlay_BSendRemotePlayTogetherInvite");
static_assert(sizeof(RemotePlay_BSendRemotePlayTogetherInvite) == 0x000010, "Wrong size on RemotePlay_BSendRemotePlayTogetherInvite");
static_assert(offsetof(RemotePlay_BSendRemotePlayTogetherInvite, SteamIDFriend) == 0x000000, "Member 'RemotePlay_BSendRemotePlayTogetherInvite::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(RemotePlay_BSendRemotePlayTogetherInvite, ReturnValue) == 0x000008, "Member 'RemotePlay_BSendRemotePlayTogetherInvite::ReturnValue' has a wrong offset!");

// Function SteamCore.RemotePlay.GetSessionClientFormFactor
// 0x0008 (0x0008 - 0x0000)
struct RemotePlay_GetSessionClientFormFactor final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreDeviceFormFactor                    ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemotePlay_GetSessionClientFormFactor) == 0x000004, "Wrong alignment on RemotePlay_GetSessionClientFormFactor");
static_assert(sizeof(RemotePlay_GetSessionClientFormFactor) == 0x000008, "Wrong size on RemotePlay_GetSessionClientFormFactor");
static_assert(offsetof(RemotePlay_GetSessionClientFormFactor, SessionID) == 0x000000, "Member 'RemotePlay_GetSessionClientFormFactor::SessionID' has a wrong offset!");
static_assert(offsetof(RemotePlay_GetSessionClientFormFactor, ReturnValue) == 0x000004, "Member 'RemotePlay_GetSessionClientFormFactor::ReturnValue' has a wrong offset!");

// Function SteamCore.RemotePlay.GetSessionClientName
// 0x0018 (0x0018 - 0x0000)
struct RemotePlay_GetSessionClientName final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemotePlay_GetSessionClientName) == 0x000008, "Wrong alignment on RemotePlay_GetSessionClientName");
static_assert(sizeof(RemotePlay_GetSessionClientName) == 0x000018, "Wrong size on RemotePlay_GetSessionClientName");
static_assert(offsetof(RemotePlay_GetSessionClientName, SessionID) == 0x000000, "Member 'RemotePlay_GetSessionClientName::SessionID' has a wrong offset!");
static_assert(offsetof(RemotePlay_GetSessionClientName, ReturnValue) == 0x000008, "Member 'RemotePlay_GetSessionClientName::ReturnValue' has a wrong offset!");

// Function SteamCore.RemotePlay.GetSessionCount
// 0x0004 (0x0004 - 0x0000)
struct RemotePlay_GetSessionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemotePlay_GetSessionCount) == 0x000004, "Wrong alignment on RemotePlay_GetSessionCount");
static_assert(sizeof(RemotePlay_GetSessionCount) == 0x000004, "Wrong size on RemotePlay_GetSessionCount");
static_assert(offsetof(RemotePlay_GetSessionCount, ReturnValue) == 0x000000, "Member 'RemotePlay_GetSessionCount::ReturnValue' has a wrong offset!");

// Function SteamCore.RemotePlay.GetSessionID
// 0x0008 (0x0008 - 0x0000)
struct RemotePlay_GetSessionID final
{
public:
	int32                                         SessionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemotePlay_GetSessionID) == 0x000004, "Wrong alignment on RemotePlay_GetSessionID");
static_assert(sizeof(RemotePlay_GetSessionID) == 0x000008, "Wrong size on RemotePlay_GetSessionID");
static_assert(offsetof(RemotePlay_GetSessionID, SessionIndex) == 0x000000, "Member 'RemotePlay_GetSessionID::SessionIndex' has a wrong offset!");
static_assert(offsetof(RemotePlay_GetSessionID, ReturnValue) == 0x000004, "Member 'RemotePlay_GetSessionID::ReturnValue' has a wrong offset!");

// Function SteamCore.RemotePlay.GetSessionSteamID
// 0x0010 (0x0010 - 0x0000)
struct RemotePlay_GetSessionSteamID final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemotePlay_GetSessionSteamID) == 0x000008, "Wrong alignment on RemotePlay_GetSessionSteamID");
static_assert(sizeof(RemotePlay_GetSessionSteamID) == 0x000010, "Wrong size on RemotePlay_GetSessionSteamID");
static_assert(offsetof(RemotePlay_GetSessionSteamID, SessionID) == 0x000000, "Member 'RemotePlay_GetSessionSteamID::SessionID' has a wrong offset!");
static_assert(offsetof(RemotePlay_GetSessionSteamID, ReturnValue) == 0x000008, "Member 'RemotePlay_GetSessionSteamID::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileDelete
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_FileDelete final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileDelete) == 0x000008, "Wrong alignment on RemoteStorage_FileDelete");
static_assert(sizeof(RemoteStorage_FileDelete) == 0x000018, "Wrong size on RemoteStorage_FileDelete");
static_assert(offsetof(RemoteStorage_FileDelete, File) == 0x000000, "Member 'RemoteStorage_FileDelete::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileDelete, ReturnValue) == 0x000010, "Member 'RemoteStorage_FileDelete::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileExists
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_FileExists final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileExists) == 0x000008, "Wrong alignment on RemoteStorage_FileExists");
static_assert(sizeof(RemoteStorage_FileExists) == 0x000018, "Wrong size on RemoteStorage_FileExists");
static_assert(offsetof(RemoteStorage_FileExists, File) == 0x000000, "Member 'RemoteStorage_FileExists::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileExists, ReturnValue) == 0x000010, "Member 'RemoteStorage_FileExists::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileForget
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_FileForget final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileForget) == 0x000008, "Wrong alignment on RemoteStorage_FileForget");
static_assert(sizeof(RemoteStorage_FileForget) == 0x000018, "Wrong size on RemoteStorage_FileForget");
static_assert(offsetof(RemoteStorage_FileForget, File) == 0x000000, "Member 'RemoteStorage_FileForget::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileForget, ReturnValue) == 0x000010, "Member 'RemoteStorage_FileForget::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FilePersisted
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_FilePersisted final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FilePersisted) == 0x000008, "Wrong alignment on RemoteStorage_FilePersisted");
static_assert(sizeof(RemoteStorage_FilePersisted) == 0x000018, "Wrong size on RemoteStorage_FilePersisted");
static_assert(offsetof(RemoteStorage_FilePersisted, File) == 0x000000, "Member 'RemoteStorage_FilePersisted::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FilePersisted, ReturnValue) == 0x000010, "Member 'RemoteStorage_FilePersisted::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileRead
// 0x0028 (0x0028 - 0x0000)
struct RemoteStorage_FileRead final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Buffer;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DataToRead;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_FileRead) == 0x000008, "Wrong alignment on RemoteStorage_FileRead");
static_assert(sizeof(RemoteStorage_FileRead) == 0x000028, "Wrong size on RemoteStorage_FileRead");
static_assert(offsetof(RemoteStorage_FileRead, File) == 0x000000, "Member 'RemoteStorage_FileRead::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileRead, Buffer) == 0x000010, "Member 'RemoteStorage_FileRead::Buffer' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileRead, DataToRead) == 0x000020, "Member 'RemoteStorage_FileRead::DataToRead' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileRead, ReturnValue) == 0x000024, "Member 'RemoteStorage_FileRead::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileReadAsyncComplete
// 0x0030 (0x0030 - 0x0000)
struct RemoteStorage_FileReadAsyncComplete final
{
public:
	struct FRemoteStorageFileReadAsyncComplete    ReadCall;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Buffer;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BytesToRead;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileReadAsyncComplete) == 0x000008, "Wrong alignment on RemoteStorage_FileReadAsyncComplete");
static_assert(sizeof(RemoteStorage_FileReadAsyncComplete) == 0x000030, "Wrong size on RemoteStorage_FileReadAsyncComplete");
static_assert(offsetof(RemoteStorage_FileReadAsyncComplete, ReadCall) == 0x000000, "Member 'RemoteStorage_FileReadAsyncComplete::ReadCall' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileReadAsyncComplete, Buffer) == 0x000018, "Member 'RemoteStorage_FileReadAsyncComplete::Buffer' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileReadAsyncComplete, BytesToRead) == 0x000028, "Member 'RemoteStorage_FileReadAsyncComplete::BytesToRead' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileReadAsyncComplete, ReturnValue) == 0x00002C, "Member 'RemoteStorage_FileReadAsyncComplete::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileWrite
// 0x0028 (0x0028 - 0x0000)
struct RemoteStorage_FileWrite final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileWrite) == 0x000008, "Wrong alignment on RemoteStorage_FileWrite");
static_assert(sizeof(RemoteStorage_FileWrite) == 0x000028, "Wrong size on RemoteStorage_FileWrite");
static_assert(offsetof(RemoteStorage_FileWrite, File) == 0x000000, "Member 'RemoteStorage_FileWrite::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWrite, Data) == 0x000010, "Member 'RemoteStorage_FileWrite::Data' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWrite, ReturnValue) == 0x000020, "Member 'RemoteStorage_FileWrite::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileWriteStreamCancel
// 0x0010 (0x0010 - 0x0000)
struct RemoteStorage_FileWriteStreamCancel final
{
public:
	struct FUGCFileWriteStreamHandle              Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileWriteStreamCancel) == 0x000008, "Wrong alignment on RemoteStorage_FileWriteStreamCancel");
static_assert(sizeof(RemoteStorage_FileWriteStreamCancel) == 0x000010, "Wrong size on RemoteStorage_FileWriteStreamCancel");
static_assert(offsetof(RemoteStorage_FileWriteStreamCancel, Handle) == 0x000000, "Member 'RemoteStorage_FileWriteStreamCancel::Handle' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWriteStreamCancel, ReturnValue) == 0x000008, "Member 'RemoteStorage_FileWriteStreamCancel::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileWriteStreamClose
// 0x0010 (0x0010 - 0x0000)
struct RemoteStorage_FileWriteStreamClose final
{
public:
	struct FUGCFileWriteStreamHandle              Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileWriteStreamClose) == 0x000008, "Wrong alignment on RemoteStorage_FileWriteStreamClose");
static_assert(sizeof(RemoteStorage_FileWriteStreamClose) == 0x000010, "Wrong size on RemoteStorage_FileWriteStreamClose");
static_assert(offsetof(RemoteStorage_FileWriteStreamClose, Handle) == 0x000000, "Member 'RemoteStorage_FileWriteStreamClose::Handle' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWriteStreamClose, ReturnValue) == 0x000008, "Member 'RemoteStorage_FileWriteStreamClose::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileWriteStreamOpen
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_FileWriteStreamOpen final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCFileWriteStreamHandle              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_FileWriteStreamOpen) == 0x000008, "Wrong alignment on RemoteStorage_FileWriteStreamOpen");
static_assert(sizeof(RemoteStorage_FileWriteStreamOpen) == 0x000018, "Wrong size on RemoteStorage_FileWriteStreamOpen");
static_assert(offsetof(RemoteStorage_FileWriteStreamOpen, File) == 0x000000, "Member 'RemoteStorage_FileWriteStreamOpen::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWriteStreamOpen, ReturnValue) == 0x000010, "Member 'RemoteStorage_FileWriteStreamOpen::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileWriteStreamWriteChunk
// 0x0020 (0x0020 - 0x0000)
struct RemoteStorage_FileWriteStreamWriteChunk final
{
public:
	struct FUGCFileWriteStreamHandle              Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_FileWriteStreamWriteChunk) == 0x000008, "Wrong alignment on RemoteStorage_FileWriteStreamWriteChunk");
static_assert(sizeof(RemoteStorage_FileWriteStreamWriteChunk) == 0x000020, "Wrong size on RemoteStorage_FileWriteStreamWriteChunk");
static_assert(offsetof(RemoteStorage_FileWriteStreamWriteChunk, Handle) == 0x000000, "Member 'RemoteStorage_FileWriteStreamWriteChunk::Handle' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWriteStreamWriteChunk, Data) == 0x000008, "Member 'RemoteStorage_FileWriteStreamWriteChunk::Data' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWriteStreamWriteChunk, ReturnValue) == 0x000018, "Member 'RemoteStorage_FileWriteStreamWriteChunk::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetCachedUGCCount
// 0x0004 (0x0004 - 0x0000)
struct RemoteStorage_GetCachedUGCCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_GetCachedUGCCount) == 0x000004, "Wrong alignment on RemoteStorage_GetCachedUGCCount");
static_assert(sizeof(RemoteStorage_GetCachedUGCCount) == 0x000004, "Wrong size on RemoteStorage_GetCachedUGCCount");
static_assert(offsetof(RemoteStorage_GetCachedUGCCount, ReturnValue) == 0x000000, "Member 'RemoteStorage_GetCachedUGCCount::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetCachedUGCHandle
// 0x0010 (0x0010 - 0x0000)
struct RemoteStorage_GetCachedUGCHandle final
{
public:
	int32                                         ICachedContent;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamUGCHandle                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_GetCachedUGCHandle) == 0x000008, "Wrong alignment on RemoteStorage_GetCachedUGCHandle");
static_assert(sizeof(RemoteStorage_GetCachedUGCHandle) == 0x000010, "Wrong size on RemoteStorage_GetCachedUGCHandle");
static_assert(offsetof(RemoteStorage_GetCachedUGCHandle, ICachedContent) == 0x000000, "Member 'RemoteStorage_GetCachedUGCHandle::ICachedContent' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetCachedUGCHandle, ReturnValue) == 0x000008, "Member 'RemoteStorage_GetCachedUGCHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetFileCount
// 0x0004 (0x0004 - 0x0000)
struct RemoteStorage_GetFileCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_GetFileCount) == 0x000004, "Wrong alignment on RemoteStorage_GetFileCount");
static_assert(sizeof(RemoteStorage_GetFileCount) == 0x000004, "Wrong size on RemoteStorage_GetFileCount");
static_assert(offsetof(RemoteStorage_GetFileCount, ReturnValue) == 0x000000, "Member 'RemoteStorage_GetFileCount::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetFileNameAndSize
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_GetFileNameAndSize final
{
public:
	int32                                         File;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSizeInBytes;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_GetFileNameAndSize) == 0x000008, "Wrong alignment on RemoteStorage_GetFileNameAndSize");
static_assert(sizeof(RemoteStorage_GetFileNameAndSize) == 0x000018, "Wrong size on RemoteStorage_GetFileNameAndSize");
static_assert(offsetof(RemoteStorage_GetFileNameAndSize, File) == 0x000000, "Member 'RemoteStorage_GetFileNameAndSize::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetFileNameAndSize, FileSizeInBytes) == 0x000004, "Member 'RemoteStorage_GetFileNameAndSize::FileSizeInBytes' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetFileNameAndSize, ReturnValue) == 0x000008, "Member 'RemoteStorage_GetFileNameAndSize::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetFileSize
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_GetFileSize final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_GetFileSize) == 0x000008, "Wrong alignment on RemoteStorage_GetFileSize");
static_assert(sizeof(RemoteStorage_GetFileSize) == 0x000018, "Wrong size on RemoteStorage_GetFileSize");
static_assert(offsetof(RemoteStorage_GetFileSize, File) == 0x000000, "Member 'RemoteStorage_GetFileSize::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetFileSize, ReturnValue) == 0x000010, "Member 'RemoteStorage_GetFileSize::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetFileTimestamp
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_GetFileTimestamp final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_GetFileTimestamp) == 0x000008, "Wrong alignment on RemoteStorage_GetFileTimestamp");
static_assert(sizeof(RemoteStorage_GetFileTimestamp) == 0x000018, "Wrong size on RemoteStorage_GetFileTimestamp");
static_assert(offsetof(RemoteStorage_GetFileTimestamp, File) == 0x000000, "Member 'RemoteStorage_GetFileTimestamp::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetFileTimestamp, ReturnValue) == 0x000010, "Member 'RemoteStorage_GetFileTimestamp::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetQuota
// 0x000C (0x000C - 0x0000)
struct RemoteStorage_GetQuota final
{
public:
	int32                                         TotalBytes;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableBytes;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_GetQuota) == 0x000004, "Wrong alignment on RemoteStorage_GetQuota");
static_assert(sizeof(RemoteStorage_GetQuota) == 0x00000C, "Wrong size on RemoteStorage_GetQuota");
static_assert(offsetof(RemoteStorage_GetQuota, TotalBytes) == 0x000000, "Member 'RemoteStorage_GetQuota::TotalBytes' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetQuota, AvailableBytes) == 0x000004, "Member 'RemoteStorage_GetQuota::AvailableBytes' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetQuota, ReturnValue) == 0x000008, "Member 'RemoteStorage_GetQuota::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetSyncPlatforms
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_GetSyncPlatforms final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamRemoteStoragePlatform                   ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_GetSyncPlatforms) == 0x000008, "Wrong alignment on RemoteStorage_GetSyncPlatforms");
static_assert(sizeof(RemoteStorage_GetSyncPlatforms) == 0x000018, "Wrong size on RemoteStorage_GetSyncPlatforms");
static_assert(offsetof(RemoteStorage_GetSyncPlatforms, File) == 0x000000, "Member 'RemoteStorage_GetSyncPlatforms::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetSyncPlatforms, ReturnValue) == 0x000010, "Member 'RemoteStorage_GetSyncPlatforms::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetUGCDetails
// 0x0038 (0x0038 - 0x0000)
struct RemoteStorage_GetUGCDetails final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSizeInBytes;                                   // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDOwner;                                      // 0x0028(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_GetUGCDetails) == 0x000008, "Wrong alignment on RemoteStorage_GetUGCDetails");
static_assert(sizeof(RemoteStorage_GetUGCDetails) == 0x000038, "Wrong size on RemoteStorage_GetUGCDetails");
static_assert(offsetof(RemoteStorage_GetUGCDetails, Handle) == 0x000000, "Member 'RemoteStorage_GetUGCDetails::Handle' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDetails, AppID) == 0x000008, "Member 'RemoteStorage_GetUGCDetails::AppID' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDetails, Name_0) == 0x000010, "Member 'RemoteStorage_GetUGCDetails::Name_0' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDetails, FileSizeInBytes) == 0x000020, "Member 'RemoteStorage_GetUGCDetails::FileSizeInBytes' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDetails, SteamIDOwner) == 0x000028, "Member 'RemoteStorage_GetUGCDetails::SteamIDOwner' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDetails, ReturnValue) == 0x000030, "Member 'RemoteStorage_GetUGCDetails::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.GetUGCDownloadProgress
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_GetUGCDownloadProgress final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesDownloaded;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesExpected;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_GetUGCDownloadProgress) == 0x000008, "Wrong alignment on RemoteStorage_GetUGCDownloadProgress");
static_assert(sizeof(RemoteStorage_GetUGCDownloadProgress) == 0x000018, "Wrong size on RemoteStorage_GetUGCDownloadProgress");
static_assert(offsetof(RemoteStorage_GetUGCDownloadProgress, Handle) == 0x000000, "Member 'RemoteStorage_GetUGCDownloadProgress::Handle' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDownloadProgress, BytesDownloaded) == 0x000008, "Member 'RemoteStorage_GetUGCDownloadProgress::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDownloadProgress, BytesExpected) == 0x00000C, "Member 'RemoteStorage_GetUGCDownloadProgress::BytesExpected' has a wrong offset!");
static_assert(offsetof(RemoteStorage_GetUGCDownloadProgress, ReturnValue) == 0x000010, "Member 'RemoteStorage_GetUGCDownloadProgress::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.IsCloudEnabledForAccount
// 0x0001 (0x0001 - 0x0000)
struct RemoteStorage_IsCloudEnabledForAccount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_IsCloudEnabledForAccount) == 0x000001, "Wrong alignment on RemoteStorage_IsCloudEnabledForAccount");
static_assert(sizeof(RemoteStorage_IsCloudEnabledForAccount) == 0x000001, "Wrong size on RemoteStorage_IsCloudEnabledForAccount");
static_assert(offsetof(RemoteStorage_IsCloudEnabledForAccount, ReturnValue) == 0x000000, "Member 'RemoteStorage_IsCloudEnabledForAccount::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.IsCloudEnabledForApp
// 0x0001 (0x0001 - 0x0000)
struct RemoteStorage_IsCloudEnabledForApp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_IsCloudEnabledForApp) == 0x000001, "Wrong alignment on RemoteStorage_IsCloudEnabledForApp");
static_assert(sizeof(RemoteStorage_IsCloudEnabledForApp) == 0x000001, "Wrong size on RemoteStorage_IsCloudEnabledForApp");
static_assert(offsetof(RemoteStorage_IsCloudEnabledForApp, ReturnValue) == 0x000000, "Member 'RemoteStorage_IsCloudEnabledForApp::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.SetCloudEnabledForApp
// 0x0001 (0x0001 - 0x0000)
struct RemoteStorage_SetCloudEnabledForApp final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_SetCloudEnabledForApp) == 0x000001, "Wrong alignment on RemoteStorage_SetCloudEnabledForApp");
static_assert(sizeof(RemoteStorage_SetCloudEnabledForApp) == 0x000001, "Wrong size on RemoteStorage_SetCloudEnabledForApp");
static_assert(offsetof(RemoteStorage_SetCloudEnabledForApp, bEnabled) == 0x000000, "Member 'RemoteStorage_SetCloudEnabledForApp::bEnabled' has a wrong offset!");

// Function SteamCore.RemoteStorage.SetSyncPlatforms
// 0x0018 (0x0018 - 0x0000)
struct RemoteStorage_SetSyncPlatforms final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamRemoteStoragePlatform                   RemoteStoragePlatform;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_SetSyncPlatforms) == 0x000008, "Wrong alignment on RemoteStorage_SetSyncPlatforms");
static_assert(sizeof(RemoteStorage_SetSyncPlatforms) == 0x000018, "Wrong size on RemoteStorage_SetSyncPlatforms");
static_assert(offsetof(RemoteStorage_SetSyncPlatforms, File) == 0x000000, "Member 'RemoteStorage_SetSyncPlatforms::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_SetSyncPlatforms, RemoteStoragePlatform) == 0x000010, "Member 'RemoteStorage_SetSyncPlatforms::RemoteStoragePlatform' has a wrong offset!");
static_assert(offsetof(RemoteStorage_SetSyncPlatforms, ReturnValue) == 0x000011, "Member 'RemoteStorage_SetSyncPlatforms::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.UGCRead
// 0x0028 (0x0028 - 0x0000)
struct RemoteStorage_UGCRead final
{
public:
	struct FSteamUGCHandle                        Content;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DataToRead;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUGCReadAction                           Action;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_UGCRead) == 0x000008, "Wrong alignment on RemoteStorage_UGCRead");
static_assert(sizeof(RemoteStorage_UGCRead) == 0x000028, "Wrong size on RemoteStorage_UGCRead");
static_assert(offsetof(RemoteStorage_UGCRead, Content) == 0x000000, "Member 'RemoteStorage_UGCRead::Content' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCRead, OutData) == 0x000008, "Member 'RemoteStorage_UGCRead::OutData' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCRead, DataToRead) == 0x000018, "Member 'RemoteStorage_UGCRead::DataToRead' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCRead, Offset) == 0x00001C, "Member 'RemoteStorage_UGCRead::Offset' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCRead, Action) == 0x000020, "Member 'RemoteStorage_UGCRead::Action' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCRead, ReturnValue) == 0x000024, "Member 'RemoteStorage_UGCRead::ReturnValue' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileReadAsync
// 0x0028 (0x0028 - 0x0000)
struct RemoteStorage_FileReadAsync final
{
public:
	TDelegate<void(struct FRemoteStorageFileReadAsyncComplete& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesToRead;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_FileReadAsync) == 0x000008, "Wrong alignment on RemoteStorage_FileReadAsync");
static_assert(sizeof(RemoteStorage_FileReadAsync) == 0x000028, "Wrong size on RemoteStorage_FileReadAsync");
static_assert(offsetof(RemoteStorage_FileReadAsync, Callback) == 0x000000, "Member 'RemoteStorage_FileReadAsync::Callback' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileReadAsync, File) == 0x000010, "Member 'RemoteStorage_FileReadAsync::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileReadAsync, Offset) == 0x000020, "Member 'RemoteStorage_FileReadAsync::Offset' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileReadAsync, BytesToRead) == 0x000024, "Member 'RemoteStorage_FileReadAsync::BytesToRead' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileShare
// 0x0020 (0x0020 - 0x0000)
struct RemoteStorage_FileShare final
{
public:
	TDelegate<void(struct FRemoteStorageFileShareResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_FileShare) == 0x000008, "Wrong alignment on RemoteStorage_FileShare");
static_assert(sizeof(RemoteStorage_FileShare) == 0x000020, "Wrong size on RemoteStorage_FileShare");
static_assert(offsetof(RemoteStorage_FileShare, Callback) == 0x000000, "Member 'RemoteStorage_FileShare::Callback' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileShare, File) == 0x000010, "Member 'RemoteStorage_FileShare::File' has a wrong offset!");

// Function SteamCore.RemoteStorage.FileWriteAsync
// 0x0030 (0x0030 - 0x0000)
struct RemoteStorage_FileWriteAsync final
{
public:
	TDelegate<void(struct FRemoteStorageFileWriteAsyncComplete& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoteStorage_FileWriteAsync) == 0x000008, "Wrong alignment on RemoteStorage_FileWriteAsync");
static_assert(sizeof(RemoteStorage_FileWriteAsync) == 0x000030, "Wrong size on RemoteStorage_FileWriteAsync");
static_assert(offsetof(RemoteStorage_FileWriteAsync, Callback) == 0x000000, "Member 'RemoteStorage_FileWriteAsync::Callback' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWriteAsync, File) == 0x000010, "Member 'RemoteStorage_FileWriteAsync::File' has a wrong offset!");
static_assert(offsetof(RemoteStorage_FileWriteAsync, Data) == 0x000020, "Member 'RemoteStorage_FileWriteAsync::Data' has a wrong offset!");

// Function SteamCore.RemoteStorage.UGCDownload
// 0x0020 (0x0020 - 0x0000)
struct RemoteStorage_UGCDownload final
{
public:
	TDelegate<void(struct FRemoteStorageDownloadUGCResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Content;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_UGCDownload) == 0x000008, "Wrong alignment on RemoteStorage_UGCDownload");
static_assert(sizeof(RemoteStorage_UGCDownload) == 0x000020, "Wrong size on RemoteStorage_UGCDownload");
static_assert(offsetof(RemoteStorage_UGCDownload, Callback) == 0x000000, "Member 'RemoteStorage_UGCDownload::Callback' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCDownload, Content) == 0x000010, "Member 'RemoteStorage_UGCDownload::Content' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCDownload, Priority) == 0x000018, "Member 'RemoteStorage_UGCDownload::Priority' has a wrong offset!");

// Function SteamCore.RemoteStorage.UGCDownloadToLocation
// 0x0030 (0x0030 - 0x0000)
struct RemoteStorage_UGCDownloadToLocation final
{
public:
	TDelegate<void(struct FRemoteStorageDownloadUGCResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Content;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Location;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RemoteStorage_UGCDownloadToLocation) == 0x000008, "Wrong alignment on RemoteStorage_UGCDownloadToLocation");
static_assert(sizeof(RemoteStorage_UGCDownloadToLocation) == 0x000030, "Wrong size on RemoteStorage_UGCDownloadToLocation");
static_assert(offsetof(RemoteStorage_UGCDownloadToLocation, Callback) == 0x000000, "Member 'RemoteStorage_UGCDownloadToLocation::Callback' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCDownloadToLocation, Content) == 0x000010, "Member 'RemoteStorage_UGCDownloadToLocation::Content' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCDownloadToLocation, Location) == 0x000018, "Member 'RemoteStorage_UGCDownloadToLocation::Location' has a wrong offset!");
static_assert(offsetof(RemoteStorage_UGCDownloadToLocation, Priority) == 0x000028, "Member 'RemoteStorage_UGCDownloadToLocation::Priority' has a wrong offset!");

// Function SteamCore.Screenshots.AddScreenshotToLibrary
// 0x0030 (0x0030 - 0x0000)
struct Screenshots_AddScreenshotToLibrary final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailFilename;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScreenshotHandle                      ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Screenshots_AddScreenshotToLibrary) == 0x000008, "Wrong alignment on Screenshots_AddScreenshotToLibrary");
static_assert(sizeof(Screenshots_AddScreenshotToLibrary) == 0x000030, "Wrong size on Screenshots_AddScreenshotToLibrary");
static_assert(offsetof(Screenshots_AddScreenshotToLibrary, Filename) == 0x000000, "Member 'Screenshots_AddScreenshotToLibrary::Filename' has a wrong offset!");
static_assert(offsetof(Screenshots_AddScreenshotToLibrary, ThumbnailFilename) == 0x000010, "Member 'Screenshots_AddScreenshotToLibrary::ThumbnailFilename' has a wrong offset!");
static_assert(offsetof(Screenshots_AddScreenshotToLibrary, Width) == 0x000020, "Member 'Screenshots_AddScreenshotToLibrary::Width' has a wrong offset!");
static_assert(offsetof(Screenshots_AddScreenshotToLibrary, Height) == 0x000024, "Member 'Screenshots_AddScreenshotToLibrary::Height' has a wrong offset!");
static_assert(offsetof(Screenshots_AddScreenshotToLibrary, ReturnValue) == 0x000028, "Member 'Screenshots_AddScreenshotToLibrary::ReturnValue' has a wrong offset!");

// Function SteamCore.Screenshots.AddVRScreenshotToLibrary
// 0x0030 (0x0030 - 0x0000)
struct Screenshots_AddVRScreenshotToLibrary final
{
public:
	ESteamVRScreenshotType                        EType;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VRFileName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScreenshotHandle                      ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Screenshots_AddVRScreenshotToLibrary) == 0x000008, "Wrong alignment on Screenshots_AddVRScreenshotToLibrary");
static_assert(sizeof(Screenshots_AddVRScreenshotToLibrary) == 0x000030, "Wrong size on Screenshots_AddVRScreenshotToLibrary");
static_assert(offsetof(Screenshots_AddVRScreenshotToLibrary, EType) == 0x000000, "Member 'Screenshots_AddVRScreenshotToLibrary::EType' has a wrong offset!");
static_assert(offsetof(Screenshots_AddVRScreenshotToLibrary, Filename) == 0x000008, "Member 'Screenshots_AddVRScreenshotToLibrary::Filename' has a wrong offset!");
static_assert(offsetof(Screenshots_AddVRScreenshotToLibrary, VRFileName) == 0x000018, "Member 'Screenshots_AddVRScreenshotToLibrary::VRFileName' has a wrong offset!");
static_assert(offsetof(Screenshots_AddVRScreenshotToLibrary, ReturnValue) == 0x000028, "Member 'Screenshots_AddVRScreenshotToLibrary::ReturnValue' has a wrong offset!");

// Function SteamCore.Screenshots.HookScreenshots
// 0x0001 (0x0001 - 0x0000)
struct Screenshots_HookScreenshots final
{
public:
	bool                                          bHook;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Screenshots_HookScreenshots) == 0x000001, "Wrong alignment on Screenshots_HookScreenshots");
static_assert(sizeof(Screenshots_HookScreenshots) == 0x000001, "Wrong size on Screenshots_HookScreenshots");
static_assert(offsetof(Screenshots_HookScreenshots, bHook) == 0x000000, "Member 'Screenshots_HookScreenshots::bHook' has a wrong offset!");

// Function SteamCore.Screenshots.IsScreenshotsHooked
// 0x0001 (0x0001 - 0x0000)
struct Screenshots_IsScreenshotsHooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Screenshots_IsScreenshotsHooked) == 0x000001, "Wrong alignment on Screenshots_IsScreenshotsHooked");
static_assert(sizeof(Screenshots_IsScreenshotsHooked) == 0x000001, "Wrong size on Screenshots_IsScreenshotsHooked");
static_assert(offsetof(Screenshots_IsScreenshotsHooked, ReturnValue) == 0x000000, "Member 'Screenshots_IsScreenshotsHooked::ReturnValue' has a wrong offset!");

// Function SteamCore.Screenshots.SetLocation
// 0x0020 (0x0020 - 0x0000)
struct Screenshots_SetLocation final
{
public:
	struct FScreenshotHandle                      Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Location;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Screenshots_SetLocation) == 0x000008, "Wrong alignment on Screenshots_SetLocation");
static_assert(sizeof(Screenshots_SetLocation) == 0x000020, "Wrong size on Screenshots_SetLocation");
static_assert(offsetof(Screenshots_SetLocation, Handle) == 0x000000, "Member 'Screenshots_SetLocation::Handle' has a wrong offset!");
static_assert(offsetof(Screenshots_SetLocation, Location) == 0x000008, "Member 'Screenshots_SetLocation::Location' has a wrong offset!");
static_assert(offsetof(Screenshots_SetLocation, ReturnValue) == 0x000018, "Member 'Screenshots_SetLocation::ReturnValue' has a wrong offset!");

// Function SteamCore.Screenshots.TagPublishedFile
// 0x0018 (0x0018 - 0x0000)
struct Screenshots_TagPublishedFile final
{
public:
	struct FScreenshotHandle                      Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Screenshots_TagPublishedFile) == 0x000008, "Wrong alignment on Screenshots_TagPublishedFile");
static_assert(sizeof(Screenshots_TagPublishedFile) == 0x000018, "Wrong size on Screenshots_TagPublishedFile");
static_assert(offsetof(Screenshots_TagPublishedFile, Handle) == 0x000000, "Member 'Screenshots_TagPublishedFile::Handle' has a wrong offset!");
static_assert(offsetof(Screenshots_TagPublishedFile, PublishedFileID) == 0x000008, "Member 'Screenshots_TagPublishedFile::PublishedFileID' has a wrong offset!");
static_assert(offsetof(Screenshots_TagPublishedFile, ReturnValue) == 0x000010, "Member 'Screenshots_TagPublishedFile::ReturnValue' has a wrong offset!");

// Function SteamCore.Screenshots.TagUser
// 0x0018 (0x0018 - 0x0000)
struct Screenshots_TagUser final
{
public:
	struct FScreenshotHandle                      Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Screenshots_TagUser) == 0x000008, "Wrong alignment on Screenshots_TagUser");
static_assert(sizeof(Screenshots_TagUser) == 0x000018, "Wrong size on Screenshots_TagUser");
static_assert(offsetof(Screenshots_TagUser, Handle) == 0x000000, "Member 'Screenshots_TagUser::Handle' has a wrong offset!");
static_assert(offsetof(Screenshots_TagUser, SteamID) == 0x000008, "Member 'Screenshots_TagUser::SteamID' has a wrong offset!");
static_assert(offsetof(Screenshots_TagUser, ReturnValue) == 0x000010, "Member 'Screenshots_TagUser::ReturnValue' has a wrong offset!");

// Function SteamCore.Screenshots.WriteScreenshot
// 0x0020 (0x0020 - 0x0000)
struct Screenshots_WriteScreenshot final
{
public:
	TArray<uint8>                                 PubRGB;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScreenshotHandle                      ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Screenshots_WriteScreenshot) == 0x000008, "Wrong alignment on Screenshots_WriteScreenshot");
static_assert(sizeof(Screenshots_WriteScreenshot) == 0x000020, "Wrong size on Screenshots_WriteScreenshot");
static_assert(offsetof(Screenshots_WriteScreenshot, PubRGB) == 0x000000, "Member 'Screenshots_WriteScreenshot::PubRGB' has a wrong offset!");
static_assert(offsetof(Screenshots_WriteScreenshot, Width) == 0x000010, "Member 'Screenshots_WriteScreenshot::Width' has a wrong offset!");
static_assert(offsetof(Screenshots_WriteScreenshot, Height) == 0x000014, "Member 'Screenshots_WriteScreenshot::Height' has a wrong offset!");
static_assert(offsetof(Screenshots_WriteScreenshot, ReturnValue) == 0x000018, "Member 'Screenshots_WriteScreenshot::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddExcludedTag
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddExcludedTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddExcludedTag) == 0x000008, "Wrong alignment on UGC_AddExcludedTag");
static_assert(sizeof(UGC_AddExcludedTag) == 0x000020, "Wrong size on UGC_AddExcludedTag");
static_assert(offsetof(UGC_AddExcludedTag, Handle) == 0x000000, "Member 'UGC_AddExcludedTag::Handle' has a wrong offset!");
static_assert(offsetof(UGC_AddExcludedTag, TagName) == 0x000008, "Member 'UGC_AddExcludedTag::TagName' has a wrong offset!");
static_assert(offsetof(UGC_AddExcludedTag, ReturnValue) == 0x000018, "Member 'UGC_AddExcludedTag::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddItemKeyValueTag
// 0x0030 (0x0030 - 0x0000)
struct UGC_AddItemKeyValueTag final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddItemKeyValueTag) == 0x000008, "Wrong alignment on UGC_AddItemKeyValueTag");
static_assert(sizeof(UGC_AddItemKeyValueTag) == 0x000030, "Wrong size on UGC_AddItemKeyValueTag");
static_assert(offsetof(UGC_AddItemKeyValueTag, Handle) == 0x000000, "Member 'UGC_AddItemKeyValueTag::Handle' has a wrong offset!");
static_assert(offsetof(UGC_AddItemKeyValueTag, Key) == 0x000008, "Member 'UGC_AddItemKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(UGC_AddItemKeyValueTag, Value) == 0x000018, "Member 'UGC_AddItemKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(UGC_AddItemKeyValueTag, ReturnValue) == 0x000028, "Member 'UGC_AddItemKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddItemPreviewFile
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddItemPreviewFile final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PreviewFile;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemPreviewType                         Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddItemPreviewFile) == 0x000008, "Wrong alignment on UGC_AddItemPreviewFile");
static_assert(sizeof(UGC_AddItemPreviewFile) == 0x000020, "Wrong size on UGC_AddItemPreviewFile");
static_assert(offsetof(UGC_AddItemPreviewFile, Handle) == 0x000000, "Member 'UGC_AddItemPreviewFile::Handle' has a wrong offset!");
static_assert(offsetof(UGC_AddItemPreviewFile, PreviewFile) == 0x000008, "Member 'UGC_AddItemPreviewFile::PreviewFile' has a wrong offset!");
static_assert(offsetof(UGC_AddItemPreviewFile, Type) == 0x000018, "Member 'UGC_AddItemPreviewFile::Type' has a wrong offset!");
static_assert(offsetof(UGC_AddItemPreviewFile, ReturnValue) == 0x000019, "Member 'UGC_AddItemPreviewFile::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddItemPreviewVideo
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddItemPreviewVideo final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 VideoID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddItemPreviewVideo) == 0x000008, "Wrong alignment on UGC_AddItemPreviewVideo");
static_assert(sizeof(UGC_AddItemPreviewVideo) == 0x000020, "Wrong size on UGC_AddItemPreviewVideo");
static_assert(offsetof(UGC_AddItemPreviewVideo, Handle) == 0x000000, "Member 'UGC_AddItemPreviewVideo::Handle' has a wrong offset!");
static_assert(offsetof(UGC_AddItemPreviewVideo, VideoID) == 0x000008, "Member 'UGC_AddItemPreviewVideo::VideoID' has a wrong offset!");
static_assert(offsetof(UGC_AddItemPreviewVideo, ReturnValue) == 0x000018, "Member 'UGC_AddItemPreviewVideo::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddRequiredKeyValueTag
// 0x0030 (0x0030 - 0x0000)
struct UGC_AddRequiredKeyValueTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddRequiredKeyValueTag) == 0x000008, "Wrong alignment on UGC_AddRequiredKeyValueTag");
static_assert(sizeof(UGC_AddRequiredKeyValueTag) == 0x000030, "Wrong size on UGC_AddRequiredKeyValueTag");
static_assert(offsetof(UGC_AddRequiredKeyValueTag, Handle) == 0x000000, "Member 'UGC_AddRequiredKeyValueTag::Handle' has a wrong offset!");
static_assert(offsetof(UGC_AddRequiredKeyValueTag, Key) == 0x000008, "Member 'UGC_AddRequiredKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(UGC_AddRequiredKeyValueTag, Value) == 0x000018, "Member 'UGC_AddRequiredKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(UGC_AddRequiredKeyValueTag, ReturnValue) == 0x000028, "Member 'UGC_AddRequiredKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddRequiredTag
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddRequiredTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddRequiredTag) == 0x000008, "Wrong alignment on UGC_AddRequiredTag");
static_assert(sizeof(UGC_AddRequiredTag) == 0x000020, "Wrong size on UGC_AddRequiredTag");
static_assert(offsetof(UGC_AddRequiredTag, Handle) == 0x000000, "Member 'UGC_AddRequiredTag::Handle' has a wrong offset!");
static_assert(offsetof(UGC_AddRequiredTag, TagName) == 0x000008, "Member 'UGC_AddRequiredTag::TagName' has a wrong offset!");
static_assert(offsetof(UGC_AddRequiredTag, ReturnValue) == 0x000018, "Member 'UGC_AddRequiredTag::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddRequiredTagGroup
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddRequiredTagGroup final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TagGroups;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddRequiredTagGroup) == 0x000008, "Wrong alignment on UGC_AddRequiredTagGroup");
static_assert(sizeof(UGC_AddRequiredTagGroup) == 0x000020, "Wrong size on UGC_AddRequiredTagGroup");
static_assert(offsetof(UGC_AddRequiredTagGroup, Handle) == 0x000000, "Member 'UGC_AddRequiredTagGroup::Handle' has a wrong offset!");
static_assert(offsetof(UGC_AddRequiredTagGroup, TagGroups) == 0x000008, "Member 'UGC_AddRequiredTagGroup::TagGroups' has a wrong offset!");
static_assert(offsetof(UGC_AddRequiredTagGroup, ReturnValue) == 0x000018, "Member 'UGC_AddRequiredTagGroup::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.BInitWorkshopForGameServer
// 0x0020 (0x0020 - 0x0000)
struct UGC_BInitWorkshopForGameServer final
{
public:
	int32                                         WorkshopDepotID;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Folder;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_BInitWorkshopForGameServer) == 0x000008, "Wrong alignment on UGC_BInitWorkshopForGameServer");
static_assert(sizeof(UGC_BInitWorkshopForGameServer) == 0x000020, "Wrong size on UGC_BInitWorkshopForGameServer");
static_assert(offsetof(UGC_BInitWorkshopForGameServer, WorkshopDepotID) == 0x000000, "Member 'UGC_BInitWorkshopForGameServer::WorkshopDepotID' has a wrong offset!");
static_assert(offsetof(UGC_BInitWorkshopForGameServer, Folder) == 0x000008, "Member 'UGC_BInitWorkshopForGameServer::Folder' has a wrong offset!");
static_assert(offsetof(UGC_BInitWorkshopForGameServer, ReturnValue) == 0x000018, "Member 'UGC_BInitWorkshopForGameServer::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.CreateQueryAllUGCRequest
// 0x0018 (0x0018 - 0x0000)
struct UGC_CreateQueryAllUGCRequest final
{
public:
	ESteamUGCQuery                                QueryType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUGCMatchingUGCType                      FileType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CreatorAppID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_CreateQueryAllUGCRequest) == 0x000008, "Wrong alignment on UGC_CreateQueryAllUGCRequest");
static_assert(sizeof(UGC_CreateQueryAllUGCRequest) == 0x000018, "Wrong size on UGC_CreateQueryAllUGCRequest");
static_assert(offsetof(UGC_CreateQueryAllUGCRequest, QueryType) == 0x000000, "Member 'UGC_CreateQueryAllUGCRequest::QueryType' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryAllUGCRequest, FileType) == 0x000001, "Member 'UGC_CreateQueryAllUGCRequest::FileType' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryAllUGCRequest, CreatorAppID) == 0x000004, "Member 'UGC_CreateQueryAllUGCRequest::CreatorAppID' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryAllUGCRequest, ConsumerAppID) == 0x000008, "Member 'UGC_CreateQueryAllUGCRequest::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryAllUGCRequest, Page) == 0x00000C, "Member 'UGC_CreateQueryAllUGCRequest::Page' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryAllUGCRequest, ReturnValue) == 0x000010, "Member 'UGC_CreateQueryAllUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.CreateQueryUGCDetailsRequest
// 0x0018 (0x0018 - 0x0000)
struct UGC_CreateQueryUGCDetailsRequest final
{
public:
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_CreateQueryUGCDetailsRequest) == 0x000008, "Wrong alignment on UGC_CreateQueryUGCDetailsRequest");
static_assert(sizeof(UGC_CreateQueryUGCDetailsRequest) == 0x000018, "Wrong size on UGC_CreateQueryUGCDetailsRequest");
static_assert(offsetof(UGC_CreateQueryUGCDetailsRequest, PublishedFileIDs) == 0x000000, "Member 'UGC_CreateQueryUGCDetailsRequest::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUGCDetailsRequest, ReturnValue) == 0x000010, "Member 'UGC_CreateQueryUGCDetailsRequest::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.CreateQueryUserUGCRequest
// 0x0020 (0x0020 - 0x0000)
struct UGC_CreateQueryUserUGCRequest final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUserUGCList                             ListType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUGCMatchingUGCType                      MatchingUGCType;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUserUGCListSortOrder                    SortOrder;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CreatorAppID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_CreateQueryUserUGCRequest) == 0x000008, "Wrong alignment on UGC_CreateQueryUserUGCRequest");
static_assert(sizeof(UGC_CreateQueryUserUGCRequest) == 0x000020, "Wrong size on UGC_CreateQueryUserUGCRequest");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, SteamID) == 0x000000, "Member 'UGC_CreateQueryUserUGCRequest::SteamID' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, ListType) == 0x000008, "Member 'UGC_CreateQueryUserUGCRequest::ListType' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, MatchingUGCType) == 0x000009, "Member 'UGC_CreateQueryUserUGCRequest::MatchingUGCType' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, SortOrder) == 0x00000A, "Member 'UGC_CreateQueryUserUGCRequest::SortOrder' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, CreatorAppID) == 0x00000C, "Member 'UGC_CreateQueryUserUGCRequest::CreatorAppID' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, ConsumerAppID) == 0x000010, "Member 'UGC_CreateQueryUserUGCRequest::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, Page) == 0x000014, "Member 'UGC_CreateQueryUserUGCRequest::Page' has a wrong offset!");
static_assert(offsetof(UGC_CreateQueryUserUGCRequest, ReturnValue) == 0x000018, "Member 'UGC_CreateQueryUserUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.DownloadItem
// 0x0010 (0x0010 - 0x0000)
struct UGC_DownloadItem final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighPriority;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_DownloadItem) == 0x000008, "Wrong alignment on UGC_DownloadItem");
static_assert(sizeof(UGC_DownloadItem) == 0x000010, "Wrong size on UGC_DownloadItem");
static_assert(offsetof(UGC_DownloadItem, PublishedFileID) == 0x000000, "Member 'UGC_DownloadItem::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_DownloadItem, bHighPriority) == 0x000008, "Member 'UGC_DownloadItem::bHighPriority' has a wrong offset!");
static_assert(offsetof(UGC_DownloadItem, ReturnValue) == 0x000009, "Member 'UGC_DownloadItem::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetItemDownloadInfo
// 0x0018 (0x0018 - 0x0000)
struct UGC_GetItemDownloadInfo final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesDownloaded;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesTotal;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetItemDownloadInfo) == 0x000008, "Wrong alignment on UGC_GetItemDownloadInfo");
static_assert(sizeof(UGC_GetItemDownloadInfo) == 0x000018, "Wrong size on UGC_GetItemDownloadInfo");
static_assert(offsetof(UGC_GetItemDownloadInfo, PublishedFileID) == 0x000000, "Member 'UGC_GetItemDownloadInfo::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_GetItemDownloadInfo, BytesDownloaded) == 0x000008, "Member 'UGC_GetItemDownloadInfo::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(UGC_GetItemDownloadInfo, BytesTotal) == 0x00000C, "Member 'UGC_GetItemDownloadInfo::BytesTotal' has a wrong offset!");
static_assert(offsetof(UGC_GetItemDownloadInfo, ReturnValue) == 0x000010, "Member 'UGC_GetItemDownloadInfo::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetItemInstallInfo
// 0x0028 (0x0028 - 0x0000)
struct UGC_GetItemInstallInfo final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeOnDisk;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Folder;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetItemInstallInfo) == 0x000008, "Wrong alignment on UGC_GetItemInstallInfo");
static_assert(sizeof(UGC_GetItemInstallInfo) == 0x000028, "Wrong size on UGC_GetItemInstallInfo");
static_assert(offsetof(UGC_GetItemInstallInfo, PublishedFileID) == 0x000000, "Member 'UGC_GetItemInstallInfo::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_GetItemInstallInfo, SizeOnDisk) == 0x000008, "Member 'UGC_GetItemInstallInfo::SizeOnDisk' has a wrong offset!");
static_assert(offsetof(UGC_GetItemInstallInfo, Folder) == 0x000010, "Member 'UGC_GetItemInstallInfo::Folder' has a wrong offset!");
static_assert(offsetof(UGC_GetItemInstallInfo, Timestamp) == 0x000020, "Member 'UGC_GetItemInstallInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(UGC_GetItemInstallInfo, ReturnValue) == 0x000024, "Member 'UGC_GetItemInstallInfo::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetItemState
// 0x0020 (0x0020 - 0x0000)
struct UGC_GetItemState final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamItemState>                       States;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetItemState) == 0x000008, "Wrong alignment on UGC_GetItemState");
static_assert(sizeof(UGC_GetItemState) == 0x000020, "Wrong size on UGC_GetItemState");
static_assert(offsetof(UGC_GetItemState, PublishedFileID) == 0x000000, "Member 'UGC_GetItemState::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_GetItemState, States) == 0x000008, "Member 'UGC_GetItemState::States' has a wrong offset!");
static_assert(offsetof(UGC_GetItemState, ReturnValue) == 0x000018, "Member 'UGC_GetItemState::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetItemUpdateProgress
// 0x0018 (0x0018 - 0x0000)
struct UGC_GetItemUpdateProgress final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BytesProcessed;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesTotal;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemUpdateStatus                        ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetItemUpdateProgress) == 0x000008, "Wrong alignment on UGC_GetItemUpdateProgress");
static_assert(sizeof(UGC_GetItemUpdateProgress) == 0x000018, "Wrong size on UGC_GetItemUpdateProgress");
static_assert(offsetof(UGC_GetItemUpdateProgress, Handle) == 0x000000, "Member 'UGC_GetItemUpdateProgress::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetItemUpdateProgress, BytesProcessed) == 0x000008, "Member 'UGC_GetItemUpdateProgress::BytesProcessed' has a wrong offset!");
static_assert(offsetof(UGC_GetItemUpdateProgress, BytesTotal) == 0x00000C, "Member 'UGC_GetItemUpdateProgress::BytesTotal' has a wrong offset!");
static_assert(offsetof(UGC_GetItemUpdateProgress, ReturnValue) == 0x000010, "Member 'UGC_GetItemUpdateProgress::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetNumSubscribedItems
// 0x0004 (0x0004 - 0x0000)
struct UGC_GetNumSubscribedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_GetNumSubscribedItems) == 0x000004, "Wrong alignment on UGC_GetNumSubscribedItems");
static_assert(sizeof(UGC_GetNumSubscribedItems) == 0x000004, "Wrong size on UGC_GetNumSubscribedItems");
static_assert(offsetof(UGC_GetNumSubscribedItems, ReturnValue) == 0x000000, "Member 'UGC_GetNumSubscribedItems::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCAdditionalPreview
// 0x0038 (0x0038 - 0x0000)
struct UGC_GetQueryUGCAdditionalPreview final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URLOrVideoID;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalFileName;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemPreviewType                         PreviewType;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCAdditionalPreview) == 0x000008, "Wrong alignment on UGC_GetQueryUGCAdditionalPreview");
static_assert(sizeof(UGC_GetQueryUGCAdditionalPreview) == 0x000038, "Wrong size on UGC_GetQueryUGCAdditionalPreview");
static_assert(offsetof(UGC_GetQueryUGCAdditionalPreview, Handle) == 0x000000, "Member 'UGC_GetQueryUGCAdditionalPreview::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCAdditionalPreview, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCAdditionalPreview::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCAdditionalPreview, PreviewIndex) == 0x00000C, "Member 'UGC_GetQueryUGCAdditionalPreview::PreviewIndex' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCAdditionalPreview, URLOrVideoID) == 0x000010, "Member 'UGC_GetQueryUGCAdditionalPreview::URLOrVideoID' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCAdditionalPreview, OriginalFileName) == 0x000020, "Member 'UGC_GetQueryUGCAdditionalPreview::OriginalFileName' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCAdditionalPreview, PreviewType) == 0x000030, "Member 'UGC_GetQueryUGCAdditionalPreview::PreviewType' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCAdditionalPreview, ReturnValue) == 0x000031, "Member 'UGC_GetQueryUGCAdditionalPreview::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCChildren
// 0x0028 (0x0028 - 0x0000)
struct UGC_GetQueryUGCChildren final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCChildren) == 0x000008, "Wrong alignment on UGC_GetQueryUGCChildren");
static_assert(sizeof(UGC_GetQueryUGCChildren) == 0x000028, "Wrong size on UGC_GetQueryUGCChildren");
static_assert(offsetof(UGC_GetQueryUGCChildren, Handle) == 0x000000, "Member 'UGC_GetQueryUGCChildren::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCChildren, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCChildren::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCChildren, PublishedFileIDs) == 0x000010, "Member 'UGC_GetQueryUGCChildren::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCChildren, MaxEntries) == 0x000020, "Member 'UGC_GetQueryUGCChildren::MaxEntries' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCChildren, ReturnValue) == 0x000024, "Member 'UGC_GetQueryUGCChildren::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCKeyValueTag
// 0x0038 (0x0038 - 0x0000)
struct UGC_GetQueryUGCKeyValueTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyValueTagIndex;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCKeyValueTag) == 0x000008, "Wrong alignment on UGC_GetQueryUGCKeyValueTag");
static_assert(sizeof(UGC_GetQueryUGCKeyValueTag) == 0x000038, "Wrong size on UGC_GetQueryUGCKeyValueTag");
static_assert(offsetof(UGC_GetQueryUGCKeyValueTag, Handle) == 0x000000, "Member 'UGC_GetQueryUGCKeyValueTag::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCKeyValueTag, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCKeyValueTag::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCKeyValueTag, KeyValueTagIndex) == 0x00000C, "Member 'UGC_GetQueryUGCKeyValueTag::KeyValueTagIndex' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCKeyValueTag, Key) == 0x000010, "Member 'UGC_GetQueryUGCKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCKeyValueTag, Value) == 0x000020, "Member 'UGC_GetQueryUGCKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCKeyValueTag, ReturnValue) == 0x000030, "Member 'UGC_GetQueryUGCKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCMetadata
// 0x0028 (0x0028 - 0x0000)
struct UGC_GetQueryUGCMetadata final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MetaData;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MetadataSize;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCMetadata) == 0x000008, "Wrong alignment on UGC_GetQueryUGCMetadata");
static_assert(sizeof(UGC_GetQueryUGCMetadata) == 0x000028, "Wrong size on UGC_GetQueryUGCMetadata");
static_assert(offsetof(UGC_GetQueryUGCMetadata, Handle) == 0x000000, "Member 'UGC_GetQueryUGCMetadata::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCMetadata, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCMetadata::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCMetadata, MetaData) == 0x000010, "Member 'UGC_GetQueryUGCMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCMetadata, MetadataSize) == 0x000020, "Member 'UGC_GetQueryUGCMetadata::MetadataSize' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCMetadata, ReturnValue) == 0x000024, "Member 'UGC_GetQueryUGCMetadata::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCNumAdditionalPreviews
// 0x0010 (0x0010 - 0x0000)
struct UGC_GetQueryUGCNumAdditionalPreviews final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_GetQueryUGCNumAdditionalPreviews) == 0x000008, "Wrong alignment on UGC_GetQueryUGCNumAdditionalPreviews");
static_assert(sizeof(UGC_GetQueryUGCNumAdditionalPreviews) == 0x000010, "Wrong size on UGC_GetQueryUGCNumAdditionalPreviews");
static_assert(offsetof(UGC_GetQueryUGCNumAdditionalPreviews, Handle) == 0x000000, "Member 'UGC_GetQueryUGCNumAdditionalPreviews::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCNumAdditionalPreviews, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCNumAdditionalPreviews::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCNumAdditionalPreviews, ReturnValue) == 0x00000C, "Member 'UGC_GetQueryUGCNumAdditionalPreviews::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCNumKeyValueTags
// 0x0010 (0x0010 - 0x0000)
struct UGC_GetQueryUGCNumKeyValueTags final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_GetQueryUGCNumKeyValueTags) == 0x000008, "Wrong alignment on UGC_GetQueryUGCNumKeyValueTags");
static_assert(sizeof(UGC_GetQueryUGCNumKeyValueTags) == 0x000010, "Wrong size on UGC_GetQueryUGCNumKeyValueTags");
static_assert(offsetof(UGC_GetQueryUGCNumKeyValueTags, Handle) == 0x000000, "Member 'UGC_GetQueryUGCNumKeyValueTags::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCNumKeyValueTags, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCNumKeyValueTags::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCNumKeyValueTags, ReturnValue) == 0x00000C, "Member 'UGC_GetQueryUGCNumKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCNumTags
// 0x0010 (0x0010 - 0x0000)
struct UGC_GetQueryUGCNumTags final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_GetQueryUGCNumTags) == 0x000008, "Wrong alignment on UGC_GetQueryUGCNumTags");
static_assert(sizeof(UGC_GetQueryUGCNumTags) == 0x000010, "Wrong size on UGC_GetQueryUGCNumTags");
static_assert(offsetof(UGC_GetQueryUGCNumTags, Handle) == 0x000000, "Member 'UGC_GetQueryUGCNumTags::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCNumTags, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCNumTags::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCNumTags, ReturnValue) == 0x00000C, "Member 'UGC_GetQueryUGCNumTags::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCPreviewURL
// 0x0028 (0x0028 - 0x0000)
struct UGC_GetQueryUGCPreviewURL final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCPreviewURL) == 0x000008, "Wrong alignment on UGC_GetQueryUGCPreviewURL");
static_assert(sizeof(UGC_GetQueryUGCPreviewURL) == 0x000028, "Wrong size on UGC_GetQueryUGCPreviewURL");
static_assert(offsetof(UGC_GetQueryUGCPreviewURL, Handle) == 0x000000, "Member 'UGC_GetQueryUGCPreviewURL::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCPreviewURL, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCPreviewURL::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCPreviewURL, URL) == 0x000010, "Member 'UGC_GetQueryUGCPreviewURL::URL' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCPreviewURL, ReturnValue) == 0x000020, "Member 'UGC_GetQueryUGCPreviewURL::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCResult
// 0x00C0 (0x00C0 - 0x0000)
struct UGC_GetQueryUGCResult final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamUGCDetails                       Details;                                           // 0x0010(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCResult) == 0x000008, "Wrong alignment on UGC_GetQueryUGCResult");
static_assert(sizeof(UGC_GetQueryUGCResult) == 0x0000C0, "Wrong size on UGC_GetQueryUGCResult");
static_assert(offsetof(UGC_GetQueryUGCResult, Handle) == 0x000000, "Member 'UGC_GetQueryUGCResult::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCResult, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCResult::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCResult, Details) == 0x000010, "Member 'UGC_GetQueryUGCResult::Details' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCResult, ReturnValue) == 0x0000B8, "Member 'UGC_GetQueryUGCResult::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCStatistic
// 0x0028 (0x0028 - 0x0000)
struct UGC_GetQueryUGCStatistic final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemStatistic                           StatType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatValue;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCStatistic) == 0x000008, "Wrong alignment on UGC_GetQueryUGCStatistic");
static_assert(sizeof(UGC_GetQueryUGCStatistic) == 0x000028, "Wrong size on UGC_GetQueryUGCStatistic");
static_assert(offsetof(UGC_GetQueryUGCStatistic, Handle) == 0x000000, "Member 'UGC_GetQueryUGCStatistic::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCStatistic, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCStatistic::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCStatistic, StatType) == 0x00000C, "Member 'UGC_GetQueryUGCStatistic::StatType' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCStatistic, StatValue) == 0x000010, "Member 'UGC_GetQueryUGCStatistic::StatValue' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCStatistic, ReturnValue) == 0x000020, "Member 'UGC_GetQueryUGCStatistic::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCTag
// 0x0028 (0x0028 - 0x0000)
struct UGC_GetQueryUGCTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexTag;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCTag) == 0x000008, "Wrong alignment on UGC_GetQueryUGCTag");
static_assert(sizeof(UGC_GetQueryUGCTag) == 0x000028, "Wrong size on UGC_GetQueryUGCTag");
static_assert(offsetof(UGC_GetQueryUGCTag, Handle) == 0x000000, "Member 'UGC_GetQueryUGCTag::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTag, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCTag::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTag, IndexTag) == 0x00000C, "Member 'UGC_GetQueryUGCTag::IndexTag' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTag, Value) == 0x000010, "Member 'UGC_GetQueryUGCTag::Value' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTag, ReturnValue) == 0x000020, "Member 'UGC_GetQueryUGCTag::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetQueryUGCTagDisplayName
// 0x0028 (0x0028 - 0x0000)
struct UGC_GetQueryUGCTagDisplayName final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexTag;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_GetQueryUGCTagDisplayName) == 0x000008, "Wrong alignment on UGC_GetQueryUGCTagDisplayName");
static_assert(sizeof(UGC_GetQueryUGCTagDisplayName) == 0x000028, "Wrong size on UGC_GetQueryUGCTagDisplayName");
static_assert(offsetof(UGC_GetQueryUGCTagDisplayName, Handle) == 0x000000, "Member 'UGC_GetQueryUGCTagDisplayName::Handle' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTagDisplayName, Index_0) == 0x000008, "Member 'UGC_GetQueryUGCTagDisplayName::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTagDisplayName, IndexTag) == 0x00000C, "Member 'UGC_GetQueryUGCTagDisplayName::IndexTag' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTagDisplayName, Value) == 0x000010, "Member 'UGC_GetQueryUGCTagDisplayName::Value' has a wrong offset!");
static_assert(offsetof(UGC_GetQueryUGCTagDisplayName, ReturnValue) == 0x000020, "Member 'UGC_GetQueryUGCTagDisplayName::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.GetSubscribedItems
// 0x0018 (0x0018 - 0x0000)
struct UGC_GetSubscribedItems final
{
public:
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_GetSubscribedItems) == 0x000008, "Wrong alignment on UGC_GetSubscribedItems");
static_assert(sizeof(UGC_GetSubscribedItems) == 0x000018, "Wrong size on UGC_GetSubscribedItems");
static_assert(offsetof(UGC_GetSubscribedItems, PublishedFileIDs) == 0x000000, "Member 'UGC_GetSubscribedItems::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(UGC_GetSubscribedItems, MaxEntries) == 0x000010, "Member 'UGC_GetSubscribedItems::MaxEntries' has a wrong offset!");
static_assert(offsetof(UGC_GetSubscribedItems, ReturnValue) == 0x000014, "Member 'UGC_GetSubscribedItems::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.ReleaseQueryUGCRequest
// 0x0010 (0x0010 - 0x0000)
struct UGC_ReleaseQueryUGCRequest final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_ReleaseQueryUGCRequest) == 0x000008, "Wrong alignment on UGC_ReleaseQueryUGCRequest");
static_assert(sizeof(UGC_ReleaseQueryUGCRequest) == 0x000010, "Wrong size on UGC_ReleaseQueryUGCRequest");
static_assert(offsetof(UGC_ReleaseQueryUGCRequest, Handle) == 0x000000, "Member 'UGC_ReleaseQueryUGCRequest::Handle' has a wrong offset!");
static_assert(offsetof(UGC_ReleaseQueryUGCRequest, ReturnValue) == 0x000008, "Member 'UGC_ReleaseQueryUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.RemoveItemKeyValueTags
// 0x0020 (0x0020 - 0x0000)
struct UGC_RemoveItemKeyValueTags final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_RemoveItemKeyValueTags) == 0x000008, "Wrong alignment on UGC_RemoveItemKeyValueTags");
static_assert(sizeof(UGC_RemoveItemKeyValueTags) == 0x000020, "Wrong size on UGC_RemoveItemKeyValueTags");
static_assert(offsetof(UGC_RemoveItemKeyValueTags, Handle) == 0x000000, "Member 'UGC_RemoveItemKeyValueTags::Handle' has a wrong offset!");
static_assert(offsetof(UGC_RemoveItemKeyValueTags, Key) == 0x000008, "Member 'UGC_RemoveItemKeyValueTags::Key' has a wrong offset!");
static_assert(offsetof(UGC_RemoveItemKeyValueTags, ReturnValue) == 0x000018, "Member 'UGC_RemoveItemKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.RemoveItemPreview
// 0x0010 (0x0010 - 0x0000)
struct UGC_RemoveItemPreview final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_RemoveItemPreview) == 0x000008, "Wrong alignment on UGC_RemoveItemPreview");
static_assert(sizeof(UGC_RemoveItemPreview) == 0x000010, "Wrong size on UGC_RemoveItemPreview");
static_assert(offsetof(UGC_RemoveItemPreview, Handle) == 0x000000, "Member 'UGC_RemoveItemPreview::Handle' has a wrong offset!");
static_assert(offsetof(UGC_RemoveItemPreview, Index_0) == 0x000008, "Member 'UGC_RemoveItemPreview::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_RemoveItemPreview, ReturnValue) == 0x00000C, "Member 'UGC_RemoveItemPreview::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetAllowCachedResponse
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetAllowCachedResponse final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAgeSeconds;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetAllowCachedResponse) == 0x000008, "Wrong alignment on UGC_SetAllowCachedResponse");
static_assert(sizeof(UGC_SetAllowCachedResponse) == 0x000010, "Wrong size on UGC_SetAllowCachedResponse");
static_assert(offsetof(UGC_SetAllowCachedResponse, Handle) == 0x000000, "Member 'UGC_SetAllowCachedResponse::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetAllowCachedResponse, MaxAgeSeconds) == 0x000008, "Member 'UGC_SetAllowCachedResponse::MaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(UGC_SetAllowCachedResponse, ReturnValue) == 0x00000C, "Member 'UGC_SetAllowCachedResponse::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetCloudFileNameFilter
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetCloudFileNameFilter final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudFileName;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetCloudFileNameFilter) == 0x000008, "Wrong alignment on UGC_SetCloudFileNameFilter");
static_assert(sizeof(UGC_SetCloudFileNameFilter) == 0x000020, "Wrong size on UGC_SetCloudFileNameFilter");
static_assert(offsetof(UGC_SetCloudFileNameFilter, Handle) == 0x000000, "Member 'UGC_SetCloudFileNameFilter::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetCloudFileNameFilter, MatchCloudFileName) == 0x000008, "Member 'UGC_SetCloudFileNameFilter::MatchCloudFileName' has a wrong offset!");
static_assert(offsetof(UGC_SetCloudFileNameFilter, ReturnValue) == 0x000018, "Member 'UGC_SetCloudFileNameFilter::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemContent
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetItemContent final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ContentFolder;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemContent) == 0x000008, "Wrong alignment on UGC_SetItemContent");
static_assert(sizeof(UGC_SetItemContent) == 0x000020, "Wrong size on UGC_SetItemContent");
static_assert(offsetof(UGC_SetItemContent, Handle) == 0x000000, "Member 'UGC_SetItemContent::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemContent, ContentFolder) == 0x000008, "Member 'UGC_SetItemContent::ContentFolder' has a wrong offset!");
static_assert(offsetof(UGC_SetItemContent, ReturnValue) == 0x000018, "Member 'UGC_SetItemContent::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemDescription
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetItemDescription final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemDescription) == 0x000008, "Wrong alignment on UGC_SetItemDescription");
static_assert(sizeof(UGC_SetItemDescription) == 0x000020, "Wrong size on UGC_SetItemDescription");
static_assert(offsetof(UGC_SetItemDescription, Handle) == 0x000000, "Member 'UGC_SetItemDescription::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemDescription, Description) == 0x000008, "Member 'UGC_SetItemDescription::Description' has a wrong offset!");
static_assert(offsetof(UGC_SetItemDescription, ReturnValue) == 0x000018, "Member 'UGC_SetItemDescription::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemMetadata
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetItemMetadata final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemMetadata) == 0x000008, "Wrong alignment on UGC_SetItemMetadata");
static_assert(sizeof(UGC_SetItemMetadata) == 0x000020, "Wrong size on UGC_SetItemMetadata");
static_assert(offsetof(UGC_SetItemMetadata, Handle) == 0x000000, "Member 'UGC_SetItemMetadata::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemMetadata, MetaData) == 0x000008, "Member 'UGC_SetItemMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(UGC_SetItemMetadata, ReturnValue) == 0x000018, "Member 'UGC_SetItemMetadata::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemPreview
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetItemPreview final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PreviewFile;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemPreview) == 0x000008, "Wrong alignment on UGC_SetItemPreview");
static_assert(sizeof(UGC_SetItemPreview) == 0x000020, "Wrong size on UGC_SetItemPreview");
static_assert(offsetof(UGC_SetItemPreview, Handle) == 0x000000, "Member 'UGC_SetItemPreview::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemPreview, PreviewFile) == 0x000008, "Member 'UGC_SetItemPreview::PreviewFile' has a wrong offset!");
static_assert(offsetof(UGC_SetItemPreview, ReturnValue) == 0x000018, "Member 'UGC_SetItemPreview::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemTags
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetItemTags final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemTags) == 0x000008, "Wrong alignment on UGC_SetItemTags");
static_assert(sizeof(UGC_SetItemTags) == 0x000020, "Wrong size on UGC_SetItemTags");
static_assert(offsetof(UGC_SetItemTags, Handle) == 0x000000, "Member 'UGC_SetItemTags::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemTags, Tags) == 0x000008, "Member 'UGC_SetItemTags::Tags' has a wrong offset!");
static_assert(offsetof(UGC_SetItemTags, ReturnValue) == 0x000018, "Member 'UGC_SetItemTags::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemTitle
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetItemTitle final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemTitle) == 0x000008, "Wrong alignment on UGC_SetItemTitle");
static_assert(sizeof(UGC_SetItemTitle) == 0x000020, "Wrong size on UGC_SetItemTitle");
static_assert(offsetof(UGC_SetItemTitle, Handle) == 0x000000, "Member 'UGC_SetItemTitle::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemTitle, Title) == 0x000008, "Member 'UGC_SetItemTitle::Title' has a wrong offset!");
static_assert(offsetof(UGC_SetItemTitle, ReturnValue) == 0x000018, "Member 'UGC_SetItemTitle::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemUpdateLanguage
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetItemUpdateLanguage final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemUpdateLanguage) == 0x000008, "Wrong alignment on UGC_SetItemUpdateLanguage");
static_assert(sizeof(UGC_SetItemUpdateLanguage) == 0x000020, "Wrong size on UGC_SetItemUpdateLanguage");
static_assert(offsetof(UGC_SetItemUpdateLanguage, Handle) == 0x000000, "Member 'UGC_SetItemUpdateLanguage::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemUpdateLanguage, Language) == 0x000008, "Member 'UGC_SetItemUpdateLanguage::Language' has a wrong offset!");
static_assert(offsetof(UGC_SetItemUpdateLanguage, ReturnValue) == 0x000018, "Member 'UGC_SetItemUpdateLanguage::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetItemVisibility
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetItemVisibility final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamRemoteStoragePublishedFileVisibility    Visibility;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetItemVisibility) == 0x000008, "Wrong alignment on UGC_SetItemVisibility");
static_assert(sizeof(UGC_SetItemVisibility) == 0x000010, "Wrong size on UGC_SetItemVisibility");
static_assert(offsetof(UGC_SetItemVisibility, Handle) == 0x000000, "Member 'UGC_SetItemVisibility::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetItemVisibility, Visibility) == 0x000008, "Member 'UGC_SetItemVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(UGC_SetItemVisibility, ReturnValue) == 0x000009, "Member 'UGC_SetItemVisibility::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetLanguage
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetLanguage final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetLanguage) == 0x000008, "Wrong alignment on UGC_SetLanguage");
static_assert(sizeof(UGC_SetLanguage) == 0x000020, "Wrong size on UGC_SetLanguage");
static_assert(offsetof(UGC_SetLanguage, Handle) == 0x000000, "Member 'UGC_SetLanguage::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetLanguage, Language) == 0x000008, "Member 'UGC_SetLanguage::Language' has a wrong offset!");
static_assert(offsetof(UGC_SetLanguage, ReturnValue) == 0x000018, "Member 'UGC_SetLanguage::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetMatchAnyTag
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetMatchAnyTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchAnyTag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetMatchAnyTag) == 0x000008, "Wrong alignment on UGC_SetMatchAnyTag");
static_assert(sizeof(UGC_SetMatchAnyTag) == 0x000010, "Wrong size on UGC_SetMatchAnyTag");
static_assert(offsetof(UGC_SetMatchAnyTag, Handle) == 0x000000, "Member 'UGC_SetMatchAnyTag::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetMatchAnyTag, bMatchAnyTag) == 0x000008, "Member 'UGC_SetMatchAnyTag::bMatchAnyTag' has a wrong offset!");
static_assert(offsetof(UGC_SetMatchAnyTag, ReturnValue) == 0x000009, "Member 'UGC_SetMatchAnyTag::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetRankedByTrendDays
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetRankedByTrendDays final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetRankedByTrendDays) == 0x000008, "Wrong alignment on UGC_SetRankedByTrendDays");
static_assert(sizeof(UGC_SetRankedByTrendDays) == 0x000010, "Wrong size on UGC_SetRankedByTrendDays");
static_assert(offsetof(UGC_SetRankedByTrendDays, Handle) == 0x000000, "Member 'UGC_SetRankedByTrendDays::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetRankedByTrendDays, Days) == 0x000008, "Member 'UGC_SetRankedByTrendDays::Days' has a wrong offset!");
static_assert(offsetof(UGC_SetRankedByTrendDays, ReturnValue) == 0x00000C, "Member 'UGC_SetRankedByTrendDays::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnAdditionalPreviews
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnAdditionalPreviews final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnAdditionalPreviews;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnAdditionalPreviews) == 0x000008, "Wrong alignment on UGC_SetReturnAdditionalPreviews");
static_assert(sizeof(UGC_SetReturnAdditionalPreviews) == 0x000010, "Wrong size on UGC_SetReturnAdditionalPreviews");
static_assert(offsetof(UGC_SetReturnAdditionalPreviews, Handle) == 0x000000, "Member 'UGC_SetReturnAdditionalPreviews::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnAdditionalPreviews, bReturnAdditionalPreviews) == 0x000008, "Member 'UGC_SetReturnAdditionalPreviews::bReturnAdditionalPreviews' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnAdditionalPreviews, ReturnValue) == 0x000009, "Member 'UGC_SetReturnAdditionalPreviews::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnChildren
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnChildren final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnChildren;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnChildren) == 0x000008, "Wrong alignment on UGC_SetReturnChildren");
static_assert(sizeof(UGC_SetReturnChildren) == 0x000010, "Wrong size on UGC_SetReturnChildren");
static_assert(offsetof(UGC_SetReturnChildren, Handle) == 0x000000, "Member 'UGC_SetReturnChildren::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnChildren, bReturnChildren) == 0x000008, "Member 'UGC_SetReturnChildren::bReturnChildren' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnChildren, ReturnValue) == 0x000009, "Member 'UGC_SetReturnChildren::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnKeyValueTags
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnKeyValueTags final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnKeyValueTags;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnKeyValueTags) == 0x000008, "Wrong alignment on UGC_SetReturnKeyValueTags");
static_assert(sizeof(UGC_SetReturnKeyValueTags) == 0x000010, "Wrong size on UGC_SetReturnKeyValueTags");
static_assert(offsetof(UGC_SetReturnKeyValueTags, Handle) == 0x000000, "Member 'UGC_SetReturnKeyValueTags::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnKeyValueTags, bReturnKeyValueTags) == 0x000008, "Member 'UGC_SetReturnKeyValueTags::bReturnKeyValueTags' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnKeyValueTags, ReturnValue) == 0x000009, "Member 'UGC_SetReturnKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnLongDescription
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnLongDescription final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnLongDescription;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnLongDescription) == 0x000008, "Wrong alignment on UGC_SetReturnLongDescription");
static_assert(sizeof(UGC_SetReturnLongDescription) == 0x000010, "Wrong size on UGC_SetReturnLongDescription");
static_assert(offsetof(UGC_SetReturnLongDescription, Handle) == 0x000000, "Member 'UGC_SetReturnLongDescription::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnLongDescription, bReturnLongDescription) == 0x000008, "Member 'UGC_SetReturnLongDescription::bReturnLongDescription' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnLongDescription, ReturnValue) == 0x000009, "Member 'UGC_SetReturnLongDescription::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnMetadata
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnMetadata final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnMetadata;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnMetadata) == 0x000008, "Wrong alignment on UGC_SetReturnMetadata");
static_assert(sizeof(UGC_SetReturnMetadata) == 0x000010, "Wrong size on UGC_SetReturnMetadata");
static_assert(offsetof(UGC_SetReturnMetadata, Handle) == 0x000000, "Member 'UGC_SetReturnMetadata::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnMetadata, bReturnMetadata) == 0x000008, "Member 'UGC_SetReturnMetadata::bReturnMetadata' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnMetadata, ReturnValue) == 0x000009, "Member 'UGC_SetReturnMetadata::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnOnlyIDs
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnOnlyIDs final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnOnlyIDs;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnOnlyIDs) == 0x000008, "Wrong alignment on UGC_SetReturnOnlyIDs");
static_assert(sizeof(UGC_SetReturnOnlyIDs) == 0x000010, "Wrong size on UGC_SetReturnOnlyIDs");
static_assert(offsetof(UGC_SetReturnOnlyIDs, Handle) == 0x000000, "Member 'UGC_SetReturnOnlyIDs::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnOnlyIDs, bReturnOnlyIDs) == 0x000008, "Member 'UGC_SetReturnOnlyIDs::bReturnOnlyIDs' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnOnlyIDs, ReturnValue) == 0x000009, "Member 'UGC_SetReturnOnlyIDs::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnPlaytimeStats
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnPlaytimeStats final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnPlaytimeStats) == 0x000008, "Wrong alignment on UGC_SetReturnPlaytimeStats");
static_assert(sizeof(UGC_SetReturnPlaytimeStats) == 0x000010, "Wrong size on UGC_SetReturnPlaytimeStats");
static_assert(offsetof(UGC_SetReturnPlaytimeStats, Handle) == 0x000000, "Member 'UGC_SetReturnPlaytimeStats::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnPlaytimeStats, Days) == 0x000008, "Member 'UGC_SetReturnPlaytimeStats::Days' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnPlaytimeStats, ReturnValue) == 0x00000C, "Member 'UGC_SetReturnPlaytimeStats::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetReturnTotalOnly
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetReturnTotalOnly final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnTotalOnly;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetReturnTotalOnly) == 0x000008, "Wrong alignment on UGC_SetReturnTotalOnly");
static_assert(sizeof(UGC_SetReturnTotalOnly) == 0x000010, "Wrong size on UGC_SetReturnTotalOnly");
static_assert(offsetof(UGC_SetReturnTotalOnly, Handle) == 0x000000, "Member 'UGC_SetReturnTotalOnly::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnTotalOnly, bReturnTotalOnly) == 0x000008, "Member 'UGC_SetReturnTotalOnly::bReturnTotalOnly' has a wrong offset!");
static_assert(offsetof(UGC_SetReturnTotalOnly, ReturnValue) == 0x000009, "Member 'UGC_SetReturnTotalOnly::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetSearchText
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetSearchText final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchText;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetSearchText) == 0x000008, "Wrong alignment on UGC_SetSearchText");
static_assert(sizeof(UGC_SetSearchText) == 0x000020, "Wrong size on UGC_SetSearchText");
static_assert(offsetof(UGC_SetSearchText, Handle) == 0x000000, "Member 'UGC_SetSearchText::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetSearchText, SearchText) == 0x000008, "Member 'UGC_SetSearchText::SearchText' has a wrong offset!");
static_assert(offsetof(UGC_SetSearchText, ReturnValue) == 0x000018, "Member 'UGC_SetSearchText::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.StartItemUpdate
// 0x0018 (0x0018 - 0x0000)
struct UGC_StartItemUpdate final
{
public:
	int32                                         ConsumerAppID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCUpdateHandle                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_StartItemUpdate) == 0x000008, "Wrong alignment on UGC_StartItemUpdate");
static_assert(sizeof(UGC_StartItemUpdate) == 0x000018, "Wrong size on UGC_StartItemUpdate");
static_assert(offsetof(UGC_StartItemUpdate, ConsumerAppID) == 0x000000, "Member 'UGC_StartItemUpdate::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(UGC_StartItemUpdate, PublishedFileID) == 0x000008, "Member 'UGC_StartItemUpdate::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_StartItemUpdate, ReturnValue) == 0x000010, "Member 'UGC_StartItemUpdate::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SuspendDownloads
// 0x0001 (0x0001 - 0x0000)
struct UGC_SuspendDownloads final
{
public:
	bool                                          bSuspend;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_SuspendDownloads) == 0x000001, "Wrong alignment on UGC_SuspendDownloads");
static_assert(sizeof(UGC_SuspendDownloads) == 0x000001, "Wrong size on UGC_SuspendDownloads");
static_assert(offsetof(UGC_SuspendDownloads, bSuspend) == 0x000000, "Member 'UGC_SuspendDownloads::bSuspend' has a wrong offset!");

// Function SteamCore.UGC.UpdateItemPreviewFile
// 0x0028 (0x0028 - 0x0000)
struct UGC_UpdateItemPreviewFile final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewFile;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_UpdateItemPreviewFile) == 0x000008, "Wrong alignment on UGC_UpdateItemPreviewFile");
static_assert(sizeof(UGC_UpdateItemPreviewFile) == 0x000028, "Wrong size on UGC_UpdateItemPreviewFile");
static_assert(offsetof(UGC_UpdateItemPreviewFile, Handle) == 0x000000, "Member 'UGC_UpdateItemPreviewFile::Handle' has a wrong offset!");
static_assert(offsetof(UGC_UpdateItemPreviewFile, Index_0) == 0x000008, "Member 'UGC_UpdateItemPreviewFile::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_UpdateItemPreviewFile, PreviewFile) == 0x000010, "Member 'UGC_UpdateItemPreviewFile::PreviewFile' has a wrong offset!");
static_assert(offsetof(UGC_UpdateItemPreviewFile, ReturnValue) == 0x000020, "Member 'UGC_UpdateItemPreviewFile::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.UpdateItemPreviewVideo
// 0x0028 (0x0028 - 0x0000)
struct UGC_UpdateItemPreviewVideo final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewVideo;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_UpdateItemPreviewVideo) == 0x000008, "Wrong alignment on UGC_UpdateItemPreviewVideo");
static_assert(sizeof(UGC_UpdateItemPreviewVideo) == 0x000028, "Wrong size on UGC_UpdateItemPreviewVideo");
static_assert(offsetof(UGC_UpdateItemPreviewVideo, Handle) == 0x000000, "Member 'UGC_UpdateItemPreviewVideo::Handle' has a wrong offset!");
static_assert(offsetof(UGC_UpdateItemPreviewVideo, Index_0) == 0x000008, "Member 'UGC_UpdateItemPreviewVideo::Index_0' has a wrong offset!");
static_assert(offsetof(UGC_UpdateItemPreviewVideo, PreviewVideo) == 0x000010, "Member 'UGC_UpdateItemPreviewVideo::PreviewVideo' has a wrong offset!");
static_assert(offsetof(UGC_UpdateItemPreviewVideo, ReturnValue) == 0x000020, "Member 'UGC_UpdateItemPreviewVideo::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.AddAppDependency
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddAppDependency final
{
public:
	TDelegate<void(struct FAddAppDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_AddAppDependency) == 0x000008, "Wrong alignment on UGC_AddAppDependency");
static_assert(sizeof(UGC_AddAppDependency) == 0x000020, "Wrong size on UGC_AddAppDependency");
static_assert(offsetof(UGC_AddAppDependency, Callback) == 0x000000, "Member 'UGC_AddAppDependency::Callback' has a wrong offset!");
static_assert(offsetof(UGC_AddAppDependency, PublishedFileID) == 0x000010, "Member 'UGC_AddAppDependency::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_AddAppDependency, AppID) == 0x000018, "Member 'UGC_AddAppDependency::AppID' has a wrong offset!");

// Function SteamCore.UGC.AddDependency
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddDependency final
{
public:
	TDelegate<void(struct FAddUGCDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_AddDependency) == 0x000008, "Wrong alignment on UGC_AddDependency");
static_assert(sizeof(UGC_AddDependency) == 0x000020, "Wrong size on UGC_AddDependency");
static_assert(offsetof(UGC_AddDependency, Callback) == 0x000000, "Member 'UGC_AddDependency::Callback' has a wrong offset!");
static_assert(offsetof(UGC_AddDependency, PublishedFileID) == 0x000010, "Member 'UGC_AddDependency::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_AddDependency, ChildPublishedFileId) == 0x000018, "Member 'UGC_AddDependency::ChildPublishedFileId' has a wrong offset!");

// Function SteamCore.UGC.AddItemToFavorites
// 0x0020 (0x0020 - 0x0000)
struct UGC_AddItemToFavorites final
{
public:
	TDelegate<void(struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_AddItemToFavorites) == 0x000008, "Wrong alignment on UGC_AddItemToFavorites");
static_assert(sizeof(UGC_AddItemToFavorites) == 0x000020, "Wrong size on UGC_AddItemToFavorites");
static_assert(offsetof(UGC_AddItemToFavorites, Callback) == 0x000000, "Member 'UGC_AddItemToFavorites::Callback' has a wrong offset!");
static_assert(offsetof(UGC_AddItemToFavorites, AppID) == 0x000010, "Member 'UGC_AddItemToFavorites::AppID' has a wrong offset!");
static_assert(offsetof(UGC_AddItemToFavorites, PublishedFileID) == 0x000018, "Member 'UGC_AddItemToFavorites::PublishedFileID' has a wrong offset!");

// Function SteamCore.UGC.CreateItem
// 0x0018 (0x0018 - 0x0000)
struct UGC_CreateItem final
{
public:
	TDelegate<void(struct FCreateItemResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamWorkshopFileType                        FileType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_CreateItem) == 0x000004, "Wrong alignment on UGC_CreateItem");
static_assert(sizeof(UGC_CreateItem) == 0x000018, "Wrong size on UGC_CreateItem");
static_assert(offsetof(UGC_CreateItem, Callback) == 0x000000, "Member 'UGC_CreateItem::Callback' has a wrong offset!");
static_assert(offsetof(UGC_CreateItem, ConsumerAppID) == 0x000010, "Member 'UGC_CreateItem::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(UGC_CreateItem, FileType) == 0x000014, "Member 'UGC_CreateItem::FileType' has a wrong offset!");

// Function SteamCore.UGC.DeleteItem
// 0x0018 (0x0018 - 0x0000)
struct UGC_DeleteItem final
{
public:
	TDelegate<void(struct FUGCDeleteItemResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_DeleteItem) == 0x000008, "Wrong alignment on UGC_DeleteItem");
static_assert(sizeof(UGC_DeleteItem) == 0x000018, "Wrong size on UGC_DeleteItem");
static_assert(offsetof(UGC_DeleteItem, Callback) == 0x000000, "Member 'UGC_DeleteItem::Callback' has a wrong offset!");
static_assert(offsetof(UGC_DeleteItem, PublishedFileID) == 0x000010, "Member 'UGC_DeleteItem::PublishedFileID' has a wrong offset!");

// Function SteamCore.UGC.GetAppDependencies
// 0x0018 (0x0018 - 0x0000)
struct UGC_GetAppDependencies final
{
public:
	TDelegate<void(struct FGetAppDependenciesResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_GetAppDependencies) == 0x000008, "Wrong alignment on UGC_GetAppDependencies");
static_assert(sizeof(UGC_GetAppDependencies) == 0x000018, "Wrong size on UGC_GetAppDependencies");
static_assert(offsetof(UGC_GetAppDependencies, Callback) == 0x000000, "Member 'UGC_GetAppDependencies::Callback' has a wrong offset!");
static_assert(offsetof(UGC_GetAppDependencies, PublishedFileID) == 0x000010, "Member 'UGC_GetAppDependencies::PublishedFileID' has a wrong offset!");

// Function SteamCore.UGC.GetUserItemVote
// 0x0018 (0x0018 - 0x0000)
struct UGC_GetUserItemVote final
{
public:
	TDelegate<void(struct FGetUserItemVoteResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_GetUserItemVote) == 0x000008, "Wrong alignment on UGC_GetUserItemVote");
static_assert(sizeof(UGC_GetUserItemVote) == 0x000018, "Wrong size on UGC_GetUserItemVote");
static_assert(offsetof(UGC_GetUserItemVote, Callback) == 0x000000, "Member 'UGC_GetUserItemVote::Callback' has a wrong offset!");
static_assert(offsetof(UGC_GetUserItemVote, PublishedFileID) == 0x000010, "Member 'UGC_GetUserItemVote::PublishedFileID' has a wrong offset!");

// Function SteamCore.UGC.RemoveAppDependency
// 0x0020 (0x0020 - 0x0000)
struct UGC_RemoveAppDependency final
{
public:
	TDelegate<void(struct FRemoveAppDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_RemoveAppDependency) == 0x000008, "Wrong alignment on UGC_RemoveAppDependency");
static_assert(sizeof(UGC_RemoveAppDependency) == 0x000020, "Wrong size on UGC_RemoveAppDependency");
static_assert(offsetof(UGC_RemoveAppDependency, Callback) == 0x000000, "Member 'UGC_RemoveAppDependency::Callback' has a wrong offset!");
static_assert(offsetof(UGC_RemoveAppDependency, PublishedFileID) == 0x000010, "Member 'UGC_RemoveAppDependency::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_RemoveAppDependency, AppID) == 0x000018, "Member 'UGC_RemoveAppDependency::AppID' has a wrong offset!");

// Function SteamCore.UGC.RemoveDependency
// 0x0020 (0x0020 - 0x0000)
struct UGC_RemoveDependency final
{
public:
	TDelegate<void(struct FRemoveUGCDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ParentPublishedFileID;                             // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_RemoveDependency) == 0x000008, "Wrong alignment on UGC_RemoveDependency");
static_assert(sizeof(UGC_RemoveDependency) == 0x000020, "Wrong size on UGC_RemoveDependency");
static_assert(offsetof(UGC_RemoveDependency, Callback) == 0x000000, "Member 'UGC_RemoveDependency::Callback' has a wrong offset!");
static_assert(offsetof(UGC_RemoveDependency, ParentPublishedFileID) == 0x000010, "Member 'UGC_RemoveDependency::ParentPublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_RemoveDependency, ChildPublishedFileId) == 0x000018, "Member 'UGC_RemoveDependency::ChildPublishedFileId' has a wrong offset!");

// Function SteamCore.UGC.RemoveItemFromFavorites
// 0x0020 (0x0020 - 0x0000)
struct UGC_RemoveItemFromFavorites final
{
public:
	TDelegate<void(struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_RemoveItemFromFavorites) == 0x000008, "Wrong alignment on UGC_RemoveItemFromFavorites");
static_assert(sizeof(UGC_RemoveItemFromFavorites) == 0x000020, "Wrong size on UGC_RemoveItemFromFavorites");
static_assert(offsetof(UGC_RemoveItemFromFavorites, Callback) == 0x000000, "Member 'UGC_RemoveItemFromFavorites::Callback' has a wrong offset!");
static_assert(offsetof(UGC_RemoveItemFromFavorites, AppID) == 0x000010, "Member 'UGC_RemoveItemFromFavorites::AppID' has a wrong offset!");
static_assert(offsetof(UGC_RemoveItemFromFavorites, PublishedFileID) == 0x000018, "Member 'UGC_RemoveItemFromFavorites::PublishedFileID' has a wrong offset!");

// Function SteamCore.UGC.SendQueryUGCRequest
// 0x0018 (0x0018 - 0x0000)
struct UGC_SendQueryUGCRequest final
{
public:
	TDelegate<void(struct FSteamUGCQueryCompleted& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        Handle;                                            // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_SendQueryUGCRequest) == 0x000008, "Wrong alignment on UGC_SendQueryUGCRequest");
static_assert(sizeof(UGC_SendQueryUGCRequest) == 0x000018, "Wrong size on UGC_SendQueryUGCRequest");
static_assert(offsetof(UGC_SendQueryUGCRequest, Callback) == 0x000000, "Member 'UGC_SendQueryUGCRequest::Callback' has a wrong offset!");
static_assert(offsetof(UGC_SendQueryUGCRequest, Handle) == 0x000010, "Member 'UGC_SendQueryUGCRequest::Handle' has a wrong offset!");

// Function SteamCore.UGC.SetAllowLegacyUpload
// 0x0010 (0x0010 - 0x0000)
struct UGC_SetAllowLegacyUpload final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowLegacyUpload;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetAllowLegacyUpload) == 0x000008, "Wrong alignment on UGC_SetAllowLegacyUpload");
static_assert(sizeof(UGC_SetAllowLegacyUpload) == 0x000010, "Wrong size on UGC_SetAllowLegacyUpload");
static_assert(offsetof(UGC_SetAllowLegacyUpload, Handle) == 0x000000, "Member 'UGC_SetAllowLegacyUpload::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SetAllowLegacyUpload, bAllowLegacyUpload) == 0x000008, "Member 'UGC_SetAllowLegacyUpload::bAllowLegacyUpload' has a wrong offset!");
static_assert(offsetof(UGC_SetAllowLegacyUpload, ReturnValue) == 0x000009, "Member 'UGC_SetAllowLegacyUpload::ReturnValue' has a wrong offset!");

// Function SteamCore.UGC.SetUserItemVote
// 0x0020 (0x0020 - 0x0000)
struct UGC_SetUserItemVote final
{
public:
	TDelegate<void(struct FSetUserItemVoteResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoteUp;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGC_SetUserItemVote) == 0x000008, "Wrong alignment on UGC_SetUserItemVote");
static_assert(sizeof(UGC_SetUserItemVote) == 0x000020, "Wrong size on UGC_SetUserItemVote");
static_assert(offsetof(UGC_SetUserItemVote, Callback) == 0x000000, "Member 'UGC_SetUserItemVote::Callback' has a wrong offset!");
static_assert(offsetof(UGC_SetUserItemVote, PublishedFileID) == 0x000010, "Member 'UGC_SetUserItemVote::PublishedFileID' has a wrong offset!");
static_assert(offsetof(UGC_SetUserItemVote, bVoteUp) == 0x000018, "Member 'UGC_SetUserItemVote::bVoteUp' has a wrong offset!");

// Function SteamCore.UGC.StartPlaytimeTracking
// 0x0020 (0x0020 - 0x0000)
struct UGC_StartPlaytimeTracking final
{
public:
	TDelegate<void(struct FStartPlaytimeTrackingResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileID;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_StartPlaytimeTracking) == 0x000008, "Wrong alignment on UGC_StartPlaytimeTracking");
static_assert(sizeof(UGC_StartPlaytimeTracking) == 0x000020, "Wrong size on UGC_StartPlaytimeTracking");
static_assert(offsetof(UGC_StartPlaytimeTracking, Callback) == 0x000000, "Member 'UGC_StartPlaytimeTracking::Callback' has a wrong offset!");
static_assert(offsetof(UGC_StartPlaytimeTracking, PublishedFileID) == 0x000010, "Member 'UGC_StartPlaytimeTracking::PublishedFileID' has a wrong offset!");

// Function SteamCore.UGC.StopPlaytimeTracking
// 0x0020 (0x0020 - 0x0000)
struct UGC_StopPlaytimeTracking final
{
public:
	TDelegate<void(struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_StopPlaytimeTracking) == 0x000008, "Wrong alignment on UGC_StopPlaytimeTracking");
static_assert(sizeof(UGC_StopPlaytimeTracking) == 0x000020, "Wrong size on UGC_StopPlaytimeTracking");
static_assert(offsetof(UGC_StopPlaytimeTracking, Callback) == 0x000000, "Member 'UGC_StopPlaytimeTracking::Callback' has a wrong offset!");
static_assert(offsetof(UGC_StopPlaytimeTracking, PublishedFileIDs) == 0x000010, "Member 'UGC_StopPlaytimeTracking::PublishedFileIDs' has a wrong offset!");

// Function SteamCore.UGC.StopPlaytimeTrackingForAllItems
// 0x0010 (0x0010 - 0x0000)
struct UGC_StopPlaytimeTrackingForAllItems final
{
public:
	TDelegate<void(struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_StopPlaytimeTrackingForAllItems) == 0x000004, "Wrong alignment on UGC_StopPlaytimeTrackingForAllItems");
static_assert(sizeof(UGC_StopPlaytimeTrackingForAllItems) == 0x000010, "Wrong size on UGC_StopPlaytimeTrackingForAllItems");
static_assert(offsetof(UGC_StopPlaytimeTrackingForAllItems, Callback) == 0x000000, "Member 'UGC_StopPlaytimeTrackingForAllItems::Callback' has a wrong offset!");

// Function SteamCore.UGC.SubmitItemUpdate
// 0x0028 (0x0028 - 0x0000)
struct UGC_SubmitItemUpdate final
{
public:
	TDelegate<void(struct FSubmitItemUpdateResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUGCUpdateHandle                       Handle;                                            // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChangeNote;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_SubmitItemUpdate) == 0x000008, "Wrong alignment on UGC_SubmitItemUpdate");
static_assert(sizeof(UGC_SubmitItemUpdate) == 0x000028, "Wrong size on UGC_SubmitItemUpdate");
static_assert(offsetof(UGC_SubmitItemUpdate, Callback) == 0x000000, "Member 'UGC_SubmitItemUpdate::Callback' has a wrong offset!");
static_assert(offsetof(UGC_SubmitItemUpdate, Handle) == 0x000010, "Member 'UGC_SubmitItemUpdate::Handle' has a wrong offset!");
static_assert(offsetof(UGC_SubmitItemUpdate, ChangeNote) == 0x000018, "Member 'UGC_SubmitItemUpdate::ChangeNote' has a wrong offset!");

// Function SteamCore.UGC.SubscribeItem
// 0x0018 (0x0018 - 0x0000)
struct UGC_SubscribeItem final
{
public:
	TDelegate<void(struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_SubscribeItem) == 0x000008, "Wrong alignment on UGC_SubscribeItem");
static_assert(sizeof(UGC_SubscribeItem) == 0x000018, "Wrong size on UGC_SubscribeItem");
static_assert(offsetof(UGC_SubscribeItem, Callback) == 0x000000, "Member 'UGC_SubscribeItem::Callback' has a wrong offset!");
static_assert(offsetof(UGC_SubscribeItem, PublishedFileID) == 0x000010, "Member 'UGC_SubscribeItem::PublishedFileID' has a wrong offset!");

// Function SteamCore.UGC.UnsubscribeItem
// 0x0018 (0x0018 - 0x0000)
struct UGC_UnsubscribeItem final
{
public:
	TDelegate<void(struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGC_UnsubscribeItem) == 0x000008, "Wrong alignment on UGC_UnsubscribeItem");
static_assert(sizeof(UGC_UnsubscribeItem) == 0x000018, "Wrong size on UGC_UnsubscribeItem");
static_assert(offsetof(UGC_UnsubscribeItem, Callback) == 0x000000, "Member 'UGC_UnsubscribeItem::Callback' has a wrong offset!");
static_assert(offsetof(UGC_UnsubscribeItem, PublishedFileID) == 0x000010, "Member 'UGC_UnsubscribeItem::PublishedFileID' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems.StopPlaytimeTrackingForAllItemsAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync, Timeout) == 0x000008, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync, ReturnValue) == 0x000010, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback final
{
public:
	struct FStopPlaytimeTrackingResult            Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback) == 0x000002, "Wrong size on SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionStopPlaytimeTracking.StopPlaytimeTrackingAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionStopPlaytimeTracking* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync) == 0x000028, "Wrong size on SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, Timeout) == 0x000018, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionStopPlaytimeTracking.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback final
{
public:
	struct FStopPlaytimeTrackingResult            Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback) == 0x000002, "Wrong size on SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreUGCAsyncActionStopPlaytimeTracking_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionStartPlaytimeTracking.StartPlaytimeTrackingAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionStartPlaytimeTracking* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync) == 0x000028, "Wrong size on SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, Timeout) == 0x000018, "Member 'SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionStartPlaytimeTracking.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback final
{
public:
	struct FStartPlaytimeTrackingResult           Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback) == 0x000002, "Wrong size on SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreUGCAsyncActionStartPlaytimeTracking_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionUnsubscribeItem.UnsubscribeItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileIDs;                                  // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionUnsubscribeItem* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, Timeout) == 0x000010, "Member 'SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionUnsubscribeItem.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback final
{
public:
	struct FRemoteStorageSubscribePublishedFileResult Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionUnsubscribeItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSubscribeItem.SubscribeItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileIDs;                                  // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionSubscribeItem*  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync, Timeout) == 0x000010, "Member 'SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionSubscribeItem_SubscribeItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionSubscribeItem.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionSubscribeItem_HandleCallback final
{
public:
	struct FRemoteStorageSubscribePublishedFileResult Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionSubscribeItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionSubscribeItem_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionSubscribeItem_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionSubscribeItem_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionSubscribeItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionSubscribeItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionSubscribeItem_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionSubscribeItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionRemoveItemFromFavorites.RemoveItemFromFavoritesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionRemoveItemFromFavorites* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync) == 0x000028, "Wrong size on SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, AppID) == 0x000008, "Member 'SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, PublishedFileID) == 0x000010, "Member 'SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, Timeout) == 0x000018, "Member 'SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionRemoveItemFromFavorites.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback final
{
public:
	struct FUserFavoriteItemsListChanged          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionRemoveItemFromFavorites_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionAddItemToFavorites.AddItemToFavoritesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionAddItemToFavorites* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync) == 0x000028, "Wrong size on SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, AppID) == 0x000008, "Member 'SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, PublishedFileID) == 0x000010, "Member 'SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, Timeout) == 0x000018, "Member 'SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionAddItemToFavorites.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback final
{
public:
	struct FUserFavoriteItemsListChanged          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionAddItemToFavorites_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionCreateItem.CreateItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionCreateItem_CreateItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamWorkshopFileType                        FileType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionCreateItem*     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionCreateItem_CreateItemAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionCreateItem_CreateItemAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionCreateItem_CreateItemAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionCreateItem_CreateItemAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionCreateItem_CreateItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionCreateItem_CreateItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionCreateItem_CreateItemAsync, ConsumerAppID) == 0x000008, "Member 'SteamCoreUGCAsyncActionCreateItem_CreateItemAsync::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionCreateItem_CreateItemAsync, FileType) == 0x00000C, "Member 'SteamCoreUGCAsyncActionCreateItem_CreateItemAsync::FileType' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionCreateItem_CreateItemAsync, Timeout) == 0x000010, "Member 'SteamCoreUGCAsyncActionCreateItem_CreateItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionCreateItem_CreateItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionCreateItem_CreateItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionCreateItem.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionCreateItem_HandleCallback final
{
public:
	struct FCreateItemResult                      Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionCreateItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionCreateItem_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionCreateItem_HandleCallback) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionCreateItem_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionCreateItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionCreateItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionCreateItem_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUGCAsyncActionCreateItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionRemoveAppDependency.RemoveAppDependencyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreUGCAsyncActionRemoveAppDependency* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, AppID) == 0x000010, "Member 'SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, Timeout) == 0x000014, "Member 'SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionRemoveAppDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback final
{
public:
	struct FRemoveAppDependencyResult             Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUGCAsyncActionRemoveAppDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionAddUGCDependency.AddDependencyAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionAddUGCDependency* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync) == 0x000028, "Wrong size on SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync, ChildPublishedFileId) == 0x000010, "Member 'SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync::ChildPublishedFileId' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync, Timeout) == 0x000018, "Member 'SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUGCAsyncActionAddUGCDependency_AddDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionAddUGCDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback final
{
public:
	struct FAddUGCDependencyResult                Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUGCAsyncActionAddUGCDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionRemoveUGCDependency.RemoveDependencyAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionRemoveUGCDependency* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync) == 0x000028, "Wrong size on SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, ChildPublishedFileId) == 0x000010, "Member 'SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::ChildPublishedFileId' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, Timeout) == 0x000018, "Member 'SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionRemoveUGCDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback final
{
public:
	struct FRemoveUGCDependencyResult             Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUGCAsyncActionRemoveUGCDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionDeleteItem.DeleteItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionDeleteItem*     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync, Timeout) == 0x000010, "Member 'SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionDeleteItem_DeleteItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionDeleteItem.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUGCAsyncActionDeleteItem_HandleCallback final
{
public:
	struct FUGCDeleteItemResult                   Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionDeleteItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionDeleteItem_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionDeleteItem_HandleCallback) == 0x000018, "Wrong size on SteamCoreUGCAsyncActionDeleteItem_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionDeleteItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionDeleteItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDeleteItem_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUGCAsyncActionDeleteItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionGetAppDependencies.GetAppDependenciesAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUGCAsyncActionGetAppDependencies* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, Timeout) == 0x000010, "Member 'SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionGetAppDependencies.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback final
{
public:
	struct FGetAppDependenciesResult              Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback) == 0x000030, "Wrong size on SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreUGCAsyncActionGetAppDependencies_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionDownloadItem.DownloadItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighPriority;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreUGCAsyncActionDownloadItem*   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync");
static_assert(sizeof(SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync");
static_assert(offsetof(SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync, bHighPriority) == 0x000010, "Member 'SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync::bHighPriority' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync, Timeout) == 0x000014, "Member 'SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUGCAsyncActionDownloadItem_DownloadItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUGCAsyncActionDownloadItem.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUGCAsyncActionDownloadItem_HandleCallback final
{
public:
	struct FDownloadItemResult                    Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUGCAsyncActionDownloadItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUGCAsyncActionDownloadItem_HandleCallback");
static_assert(sizeof(SteamCoreUGCAsyncActionDownloadItem_HandleCallback) == 0x000020, "Wrong size on SteamCoreUGCAsyncActionDownloadItem_HandleCallback");
static_assert(offsetof(SteamCoreUGCAsyncActionDownloadItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUGCAsyncActionDownloadItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUGCAsyncActionDownloadItem_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUGCAsyncActionDownloadItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.User.AdvertiseGame
// 0x0020 (0x0020 - 0x0000)
struct User_AdvertiseGame final
{
public:
	struct FSteamID                               SteamIDGameServer;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerIP;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_AdvertiseGame) == 0x000008, "Wrong alignment on User_AdvertiseGame");
static_assert(sizeof(User_AdvertiseGame) == 0x000020, "Wrong size on User_AdvertiseGame");
static_assert(offsetof(User_AdvertiseGame, SteamIDGameServer) == 0x000000, "Member 'User_AdvertiseGame::SteamIDGameServer' has a wrong offset!");
static_assert(offsetof(User_AdvertiseGame, ServerIP) == 0x000008, "Member 'User_AdvertiseGame::ServerIP' has a wrong offset!");
static_assert(offsetof(User_AdvertiseGame, ServerPort) == 0x000018, "Member 'User_AdvertiseGame::ServerPort' has a wrong offset!");

// Function SteamCore.User.BeginAuthSession
// 0x0020 (0x0020 - 0x0000)
struct User_BeginAuthSession final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamBeginAuthSessionResult                  ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_BeginAuthSession) == 0x000008, "Wrong alignment on User_BeginAuthSession");
static_assert(sizeof(User_BeginAuthSession) == 0x000020, "Wrong size on User_BeginAuthSession");
static_assert(offsetof(User_BeginAuthSession, Ticket) == 0x000000, "Member 'User_BeginAuthSession::Ticket' has a wrong offset!");
static_assert(offsetof(User_BeginAuthSession, SteamID) == 0x000010, "Member 'User_BeginAuthSession::SteamID' has a wrong offset!");
static_assert(offsetof(User_BeginAuthSession, ReturnValue) == 0x000018, "Member 'User_BeginAuthSession::ReturnValue' has a wrong offset!");

// Function SteamCore.User.BIsBehindNAT
// 0x0001 (0x0001 - 0x0000)
struct User_BIsBehindNAT final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_BIsBehindNAT) == 0x000001, "Wrong alignment on User_BIsBehindNAT");
static_assert(sizeof(User_BIsBehindNAT) == 0x000001, "Wrong size on User_BIsBehindNAT");
static_assert(offsetof(User_BIsBehindNAT, ReturnValue) == 0x000000, "Member 'User_BIsBehindNAT::ReturnValue' has a wrong offset!");

// Function SteamCore.User.BIsPhoneIdentifying
// 0x0001 (0x0001 - 0x0000)
struct User_BIsPhoneIdentifying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_BIsPhoneIdentifying) == 0x000001, "Wrong alignment on User_BIsPhoneIdentifying");
static_assert(sizeof(User_BIsPhoneIdentifying) == 0x000001, "Wrong size on User_BIsPhoneIdentifying");
static_assert(offsetof(User_BIsPhoneIdentifying, ReturnValue) == 0x000000, "Member 'User_BIsPhoneIdentifying::ReturnValue' has a wrong offset!");

// Function SteamCore.User.BIsPhoneRequiringVerification
// 0x0001 (0x0001 - 0x0000)
struct User_BIsPhoneRequiringVerification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_BIsPhoneRequiringVerification) == 0x000001, "Wrong alignment on User_BIsPhoneRequiringVerification");
static_assert(sizeof(User_BIsPhoneRequiringVerification) == 0x000001, "Wrong size on User_BIsPhoneRequiringVerification");
static_assert(offsetof(User_BIsPhoneRequiringVerification, ReturnValue) == 0x000000, "Member 'User_BIsPhoneRequiringVerification::ReturnValue' has a wrong offset!");

// Function SteamCore.User.BIsPhoneVerified
// 0x0001 (0x0001 - 0x0000)
struct User_BIsPhoneVerified final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_BIsPhoneVerified) == 0x000001, "Wrong alignment on User_BIsPhoneVerified");
static_assert(sizeof(User_BIsPhoneVerified) == 0x000001, "Wrong size on User_BIsPhoneVerified");
static_assert(offsetof(User_BIsPhoneVerified, ReturnValue) == 0x000000, "Member 'User_BIsPhoneVerified::ReturnValue' has a wrong offset!");

// Function SteamCore.User.BIsTwoFactorEnabled
// 0x0001 (0x0001 - 0x0000)
struct User_BIsTwoFactorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_BIsTwoFactorEnabled) == 0x000001, "Wrong alignment on User_BIsTwoFactorEnabled");
static_assert(sizeof(User_BIsTwoFactorEnabled) == 0x000001, "Wrong size on User_BIsTwoFactorEnabled");
static_assert(offsetof(User_BIsTwoFactorEnabled, ReturnValue) == 0x000000, "Member 'User_BIsTwoFactorEnabled::ReturnValue' has a wrong offset!");

// Function SteamCore.User.BLoggedOn
// 0x0001 (0x0001 - 0x0000)
struct User_BLoggedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_BLoggedOn) == 0x000001, "Wrong alignment on User_BLoggedOn");
static_assert(sizeof(User_BLoggedOn) == 0x000001, "Wrong size on User_BLoggedOn");
static_assert(offsetof(User_BLoggedOn, ReturnValue) == 0x000000, "Member 'User_BLoggedOn::ReturnValue' has a wrong offset!");

// Function SteamCore.User.CancelAuthTicket
// 0x0004 (0x0004 - 0x0000)
struct User_CancelAuthTicket final
{
public:
	struct FSteamTicketHandle                     TicketHandle;                                      // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_CancelAuthTicket) == 0x000004, "Wrong alignment on User_CancelAuthTicket");
static_assert(sizeof(User_CancelAuthTicket) == 0x000004, "Wrong size on User_CancelAuthTicket");
static_assert(offsetof(User_CancelAuthTicket, TicketHandle) == 0x000000, "Member 'User_CancelAuthTicket::TicketHandle' has a wrong offset!");

// Function SteamCore.User.DecompressVoice
// 0x0030 (0x0030 - 0x0000)
struct User_DecompressVoice final
{
public:
	TArray<uint8>                                 CompressedBuffer;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DesiredSampleRate;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 DestBuffer;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamVoiceResult                             ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_DecompressVoice) == 0x000008, "Wrong alignment on User_DecompressVoice");
static_assert(sizeof(User_DecompressVoice) == 0x000030, "Wrong size on User_DecompressVoice");
static_assert(offsetof(User_DecompressVoice, CompressedBuffer) == 0x000000, "Member 'User_DecompressVoice::CompressedBuffer' has a wrong offset!");
static_assert(offsetof(User_DecompressVoice, DesiredSampleRate) == 0x000010, "Member 'User_DecompressVoice::DesiredSampleRate' has a wrong offset!");
static_assert(offsetof(User_DecompressVoice, DestBuffer) == 0x000018, "Member 'User_DecompressVoice::DestBuffer' has a wrong offset!");
static_assert(offsetof(User_DecompressVoice, ReturnValue) == 0x000028, "Member 'User_DecompressVoice::ReturnValue' has a wrong offset!");

// Function SteamCore.User.EndAuthSession
// 0x0008 (0x0008 - 0x0000)
struct User_EndAuthSession final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_EndAuthSession) == 0x000008, "Wrong alignment on User_EndAuthSession");
static_assert(sizeof(User_EndAuthSession) == 0x000008, "Wrong size on User_EndAuthSession");
static_assert(offsetof(User_EndAuthSession, SteamID) == 0x000000, "Member 'User_EndAuthSession::SteamID' has a wrong offset!");

// Function SteamCore.User.GetAuthSessionTicket
// 0x0018 (0x0018 - 0x0000)
struct User_GetAuthSessionTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamTicketHandle                     ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_GetAuthSessionTicket) == 0x000008, "Wrong alignment on User_GetAuthSessionTicket");
static_assert(sizeof(User_GetAuthSessionTicket) == 0x000018, "Wrong size on User_GetAuthSessionTicket");
static_assert(offsetof(User_GetAuthSessionTicket, Ticket) == 0x000000, "Member 'User_GetAuthSessionTicket::Ticket' has a wrong offset!");
static_assert(offsetof(User_GetAuthSessionTicket, ReturnValue) == 0x000010, "Member 'User_GetAuthSessionTicket::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetAvailableVoice
// 0x0010 (0x0010 - 0x0000)
struct User_GetAvailableVoice final
{
public:
	int32                                         CompressedBytes;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedBytes;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedVoiceDesiredSampleRate;                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamVoiceResult                             ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_GetAvailableVoice) == 0x000004, "Wrong alignment on User_GetAvailableVoice");
static_assert(sizeof(User_GetAvailableVoice) == 0x000010, "Wrong size on User_GetAvailableVoice");
static_assert(offsetof(User_GetAvailableVoice, CompressedBytes) == 0x000000, "Member 'User_GetAvailableVoice::CompressedBytes' has a wrong offset!");
static_assert(offsetof(User_GetAvailableVoice, UncompressedBytes) == 0x000004, "Member 'User_GetAvailableVoice::UncompressedBytes' has a wrong offset!");
static_assert(offsetof(User_GetAvailableVoice, UncompressedVoiceDesiredSampleRate) == 0x000008, "Member 'User_GetAvailableVoice::UncompressedVoiceDesiredSampleRate' has a wrong offset!");
static_assert(offsetof(User_GetAvailableVoice, ReturnValue) == 0x00000C, "Member 'User_GetAvailableVoice::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetEncryptedAppTicket
// 0x0018 (0x0018 - 0x0000)
struct User_GetEncryptedAppTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_GetEncryptedAppTicket) == 0x000008, "Wrong alignment on User_GetEncryptedAppTicket");
static_assert(sizeof(User_GetEncryptedAppTicket) == 0x000018, "Wrong size on User_GetEncryptedAppTicket");
static_assert(offsetof(User_GetEncryptedAppTicket, Ticket) == 0x000000, "Member 'User_GetEncryptedAppTicket::Ticket' has a wrong offset!");
static_assert(offsetof(User_GetEncryptedAppTicket, ReturnValue) == 0x000010, "Member 'User_GetEncryptedAppTicket::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetGameBadgeLevel
// 0x000C (0x000C - 0x0000)
struct User_GetGameBadgeLevel final
{
public:
	int32                                         Series;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoil;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_GetGameBadgeLevel) == 0x000004, "Wrong alignment on User_GetGameBadgeLevel");
static_assert(sizeof(User_GetGameBadgeLevel) == 0x00000C, "Wrong size on User_GetGameBadgeLevel");
static_assert(offsetof(User_GetGameBadgeLevel, Series) == 0x000000, "Member 'User_GetGameBadgeLevel::Series' has a wrong offset!");
static_assert(offsetof(User_GetGameBadgeLevel, bFoil) == 0x000004, "Member 'User_GetGameBadgeLevel::bFoil' has a wrong offset!");
static_assert(offsetof(User_GetGameBadgeLevel, ReturnValue) == 0x000008, "Member 'User_GetGameBadgeLevel::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetPlayerSteamLevel
// 0x0004 (0x0004 - 0x0000)
struct User_GetPlayerSteamLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_GetPlayerSteamLevel) == 0x000004, "Wrong alignment on User_GetPlayerSteamLevel");
static_assert(sizeof(User_GetPlayerSteamLevel) == 0x000004, "Wrong size on User_GetPlayerSteamLevel");
static_assert(offsetof(User_GetPlayerSteamLevel, ReturnValue) == 0x000000, "Member 'User_GetPlayerSteamLevel::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetSteamID
// 0x0008 (0x0008 - 0x0000)
struct User_GetSteamID final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_GetSteamID) == 0x000008, "Wrong alignment on User_GetSteamID");
static_assert(sizeof(User_GetSteamID) == 0x000008, "Wrong size on User_GetSteamID");
static_assert(offsetof(User_GetSteamID, ReturnValue) == 0x000000, "Member 'User_GetSteamID::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetSteamID_Pure
// 0x0008 (0x0008 - 0x0000)
struct User_GetSteamID_Pure final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_GetSteamID_Pure) == 0x000008, "Wrong alignment on User_GetSteamID_Pure");
static_assert(sizeof(User_GetSteamID_Pure) == 0x000008, "Wrong size on User_GetSteamID_Pure");
static_assert(offsetof(User_GetSteamID_Pure, ReturnValue) == 0x000000, "Member 'User_GetSteamID_Pure::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetVoice
// 0x0018 (0x0018 - 0x0000)
struct User_GetVoice final
{
public:
	TArray<uint8>                                 DestBuffer;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BytesWritten;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamVoiceResult                             ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_GetVoice) == 0x000008, "Wrong alignment on User_GetVoice");
static_assert(sizeof(User_GetVoice) == 0x000018, "Wrong size on User_GetVoice");
static_assert(offsetof(User_GetVoice, DestBuffer) == 0x000000, "Member 'User_GetVoice::DestBuffer' has a wrong offset!");
static_assert(offsetof(User_GetVoice, BytesWritten) == 0x000010, "Member 'User_GetVoice::BytesWritten' has a wrong offset!");
static_assert(offsetof(User_GetVoice, ReturnValue) == 0x000014, "Member 'User_GetVoice::ReturnValue' has a wrong offset!");

// Function SteamCore.User.GetVoiceOptimalSampleRate
// 0x0004 (0x0004 - 0x0000)
struct User_GetVoiceOptimalSampleRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_GetVoiceOptimalSampleRate) == 0x000004, "Wrong alignment on User_GetVoiceOptimalSampleRate");
static_assert(sizeof(User_GetVoiceOptimalSampleRate) == 0x000004, "Wrong size on User_GetVoiceOptimalSampleRate");
static_assert(offsetof(User_GetVoiceOptimalSampleRate, ReturnValue) == 0x000000, "Member 'User_GetVoiceOptimalSampleRate::ReturnValue' has a wrong offset!");

// Function SteamCore.User.UserHasLicenseForApp
// 0x0010 (0x0010 - 0x0000)
struct User_UserHasLicenseForApp final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUserHasLicenseForAppResult              ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(User_UserHasLicenseForApp) == 0x000008, "Wrong alignment on User_UserHasLicenseForApp");
static_assert(sizeof(User_UserHasLicenseForApp) == 0x000010, "Wrong size on User_UserHasLicenseForApp");
static_assert(offsetof(User_UserHasLicenseForApp, SteamID) == 0x000000, "Member 'User_UserHasLicenseForApp::SteamID' has a wrong offset!");
static_assert(offsetof(User_UserHasLicenseForApp, AppID) == 0x000008, "Member 'User_UserHasLicenseForApp::AppID' has a wrong offset!");
static_assert(offsetof(User_UserHasLicenseForApp, ReturnValue) == 0x00000C, "Member 'User_UserHasLicenseForApp::ReturnValue' has a wrong offset!");

// Function SteamCore.User.RequestEncryptedAppTicket
// 0x0020 (0x0020 - 0x0000)
struct User_RequestEncryptedAppTicket final
{
public:
	TDelegate<void(struct FEncryptedAppTicketResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataToInclude;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_RequestEncryptedAppTicket) == 0x000008, "Wrong alignment on User_RequestEncryptedAppTicket");
static_assert(sizeof(User_RequestEncryptedAppTicket) == 0x000020, "Wrong size on User_RequestEncryptedAppTicket");
static_assert(offsetof(User_RequestEncryptedAppTicket, Callback) == 0x000000, "Member 'User_RequestEncryptedAppTicket::Callback' has a wrong offset!");
static_assert(offsetof(User_RequestEncryptedAppTicket, DataToInclude) == 0x000010, "Member 'User_RequestEncryptedAppTicket::DataToInclude' has a wrong offset!");

// Function SteamCore.User.RequestStoreAuthURL
// 0x0020 (0x0020 - 0x0000)
struct User_RequestStoreAuthURL final
{
public:
	TDelegate<void(struct FStoreAuthURLResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 RedirectURL;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(User_RequestStoreAuthURL) == 0x000008, "Wrong alignment on User_RequestStoreAuthURL");
static_assert(sizeof(User_RequestStoreAuthURL) == 0x000020, "Wrong size on User_RequestStoreAuthURL");
static_assert(offsetof(User_RequestStoreAuthURL, Callback) == 0x000000, "Member 'User_RequestStoreAuthURL::Callback' has a wrong offset!");
static_assert(offsetof(User_RequestStoreAuthURL, RedirectURL) == 0x000010, "Member 'User_RequestStoreAuthURL::RedirectURL' has a wrong offset!");

// Function SteamCore.SteamCoreUserAsyncActionRequestEncryptedAppTicket.RequestEncryptedAppTicketAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataToInclude;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserAsyncActionRequestEncryptedAppTicket* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync) == 0x000008, "Wrong alignment on SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync");
static_assert(sizeof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync) == 0x000028, "Wrong size on SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync");
static_assert(offsetof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, DataToInclude) == 0x000008, "Member 'SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::DataToInclude' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, Timeout) == 0x000018, "Member 'SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserAsyncActionRequestEncryptedAppTicket.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback final
{
public:
	struct FEncryptedAppTicketResponse            Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback");
static_assert(sizeof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback) == 0x000002, "Wrong size on SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback");
static_assert(offsetof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreUserAsyncActionRequestEncryptedAppTicket_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserAsyncActionRequestStoreAuthURL.RequestStoreAuthURLAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectURL;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserAsyncActionRequestStoreAuthURL* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync) == 0x000008, "Wrong alignment on SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync");
static_assert(sizeof(SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync) == 0x000028, "Wrong size on SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync");
static_assert(offsetof(SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, RedirectURL) == 0x000008, "Member 'SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::RedirectURL' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, Timeout) == 0x000018, "Member 'SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserAsyncActionRequestStoreAuthURL.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback final
{
public:
	struct FStoreAuthURLResponse                  Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback");
static_assert(sizeof(SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback) == 0x000018, "Wrong size on SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback");
static_assert(offsetof(SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUserAsyncActionRequestStoreAuthURL_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.UserStats.ClearAchievement
// 0x0018 (0x0018 - 0x0000)
struct UserStats_ClearAchievement final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_ClearAchievement) == 0x000008, "Wrong alignment on UserStats_ClearAchievement");
static_assert(sizeof(UserStats_ClearAchievement) == 0x000018, "Wrong size on UserStats_ClearAchievement");
static_assert(offsetof(UserStats_ClearAchievement, Name_0) == 0x000000, "Member 'UserStats_ClearAchievement::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_ClearAchievement, ReturnValue) == 0x000010, "Member 'UserStats_ClearAchievement::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievement
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetAchievement final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetAchievement) == 0x000008, "Wrong alignment on UserStats_GetAchievement");
static_assert(sizeof(UserStats_GetAchievement) == 0x000018, "Wrong size on UserStats_GetAchievement");
static_assert(offsetof(UserStats_GetAchievement, Name_0) == 0x000000, "Member 'UserStats_GetAchievement::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievement, bAchieved) == 0x000010, "Member 'UserStats_GetAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievement, ReturnValue) == 0x000011, "Member 'UserStats_GetAchievement::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievementAchievedPercent
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetAchievementAchievedPercent final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetAchievementAchievedPercent) == 0x000008, "Wrong alignment on UserStats_GetAchievementAchievedPercent");
static_assert(sizeof(UserStats_GetAchievementAchievedPercent) == 0x000018, "Wrong size on UserStats_GetAchievementAchievedPercent");
static_assert(offsetof(UserStats_GetAchievementAchievedPercent, Name_0) == 0x000000, "Member 'UserStats_GetAchievementAchievedPercent::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementAchievedPercent, Percent) == 0x000010, "Member 'UserStats_GetAchievementAchievedPercent::Percent' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementAchievedPercent, ReturnValue) == 0x000014, "Member 'UserStats_GetAchievementAchievedPercent::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievementAndUnlockTime
// 0x0020 (0x0020 - 0x0000)
struct UserStats_GetAchievementAndUnlockTime final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockTime;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetAchievementAndUnlockTime) == 0x000008, "Wrong alignment on UserStats_GetAchievementAndUnlockTime");
static_assert(sizeof(UserStats_GetAchievementAndUnlockTime) == 0x000020, "Wrong size on UserStats_GetAchievementAndUnlockTime");
static_assert(offsetof(UserStats_GetAchievementAndUnlockTime, Name_0) == 0x000000, "Member 'UserStats_GetAchievementAndUnlockTime::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementAndUnlockTime, bAchieved) == 0x000010, "Member 'UserStats_GetAchievementAndUnlockTime::bAchieved' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementAndUnlockTime, UnlockTime) == 0x000014, "Member 'UserStats_GetAchievementAndUnlockTime::UnlockTime' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementAndUnlockTime, ReturnValue) == 0x000018, "Member 'UserStats_GetAchievementAndUnlockTime::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievementDisplayAttribute
// 0x0030 (0x0030 - 0x0000)
struct UserStats_GetAchievementDisplayAttribute final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_GetAchievementDisplayAttribute) == 0x000008, "Wrong alignment on UserStats_GetAchievementDisplayAttribute");
static_assert(sizeof(UserStats_GetAchievementDisplayAttribute) == 0x000030, "Wrong size on UserStats_GetAchievementDisplayAttribute");
static_assert(offsetof(UserStats_GetAchievementDisplayAttribute, Name_0) == 0x000000, "Member 'UserStats_GetAchievementDisplayAttribute::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementDisplayAttribute, Key) == 0x000010, "Member 'UserStats_GetAchievementDisplayAttribute::Key' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementDisplayAttribute, ReturnValue) == 0x000020, "Member 'UserStats_GetAchievementDisplayAttribute::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievementIcon
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetAchievementIcon final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_GetAchievementIcon) == 0x000008, "Wrong alignment on UserStats_GetAchievementIcon");
static_assert(sizeof(UserStats_GetAchievementIcon) == 0x000018, "Wrong size on UserStats_GetAchievementIcon");
static_assert(offsetof(UserStats_GetAchievementIcon, Name_0) == 0x000000, "Member 'UserStats_GetAchievementIcon::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementIcon, ReturnValue) == 0x000010, "Member 'UserStats_GetAchievementIcon::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievementName
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetAchievementName final
{
public:
	int32                                         Achievement;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_GetAchievementName) == 0x000008, "Wrong alignment on UserStats_GetAchievementName");
static_assert(sizeof(UserStats_GetAchievementName) == 0x000018, "Wrong size on UserStats_GetAchievementName");
static_assert(offsetof(UserStats_GetAchievementName, Achievement) == 0x000000, "Member 'UserStats_GetAchievementName::Achievement' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementName, ReturnValue) == 0x000008, "Member 'UserStats_GetAchievementName::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievementProgressLimits
// 0x0020 (0x0020 - 0x0000)
struct UserStats_GetAchievementProgressLimits final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinProgress;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetAchievementProgressLimits) == 0x000008, "Wrong alignment on UserStats_GetAchievementProgressLimits");
static_assert(sizeof(UserStats_GetAchievementProgressLimits) == 0x000020, "Wrong size on UserStats_GetAchievementProgressLimits");
static_assert(offsetof(UserStats_GetAchievementProgressLimits, Name_0) == 0x000000, "Member 'UserStats_GetAchievementProgressLimits::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementProgressLimits, MinProgress) == 0x000010, "Member 'UserStats_GetAchievementProgressLimits::MinProgress' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementProgressLimits, MaxProgress) == 0x000014, "Member 'UserStats_GetAchievementProgressLimits::MaxProgress' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementProgressLimits, ReturnValue) == 0x000018, "Member 'UserStats_GetAchievementProgressLimits::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetAchievementProgressLimitsFloat
// 0x0020 (0x0020 - 0x0000)
struct UserStats_GetAchievementProgressLimitsFloat final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProgress;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxProgress;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetAchievementProgressLimitsFloat) == 0x000008, "Wrong alignment on UserStats_GetAchievementProgressLimitsFloat");
static_assert(sizeof(UserStats_GetAchievementProgressLimitsFloat) == 0x000020, "Wrong size on UserStats_GetAchievementProgressLimitsFloat");
static_assert(offsetof(UserStats_GetAchievementProgressLimitsFloat, Name_0) == 0x000000, "Member 'UserStats_GetAchievementProgressLimitsFloat::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementProgressLimitsFloat, MinProgress) == 0x000010, "Member 'UserStats_GetAchievementProgressLimitsFloat::MinProgress' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementProgressLimitsFloat, MaxProgress) == 0x000014, "Member 'UserStats_GetAchievementProgressLimitsFloat::MaxProgress' has a wrong offset!");
static_assert(offsetof(UserStats_GetAchievementProgressLimitsFloat, ReturnValue) == 0x000018, "Member 'UserStats_GetAchievementProgressLimitsFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetDownloadedLeaderboardEntry
// 0x0058 (0x0058 - 0x0000)
struct UserStats_GetDownloadedLeaderboardEntry final
{
public:
	struct FSteamLeaderboardEntries               LeaderboardEntries;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamLeaderboardEntry                 LeaderboardEntry;                                  // 0x0010(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Details;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutDetails;                                        // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetDownloadedLeaderboardEntry) == 0x000008, "Wrong alignment on UserStats_GetDownloadedLeaderboardEntry");
static_assert(sizeof(UserStats_GetDownloadedLeaderboardEntry) == 0x000058, "Wrong size on UserStats_GetDownloadedLeaderboardEntry");
static_assert(offsetof(UserStats_GetDownloadedLeaderboardEntry, LeaderboardEntries) == 0x000000, "Member 'UserStats_GetDownloadedLeaderboardEntry::LeaderboardEntries' has a wrong offset!");
static_assert(offsetof(UserStats_GetDownloadedLeaderboardEntry, Index_0) == 0x000008, "Member 'UserStats_GetDownloadedLeaderboardEntry::Index_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetDownloadedLeaderboardEntry, LeaderboardEntry) == 0x000010, "Member 'UserStats_GetDownloadedLeaderboardEntry::LeaderboardEntry' has a wrong offset!");
static_assert(offsetof(UserStats_GetDownloadedLeaderboardEntry, Details) == 0x000030, "Member 'UserStats_GetDownloadedLeaderboardEntry::Details' has a wrong offset!");
static_assert(offsetof(UserStats_GetDownloadedLeaderboardEntry, OutDetails) == 0x000040, "Member 'UserStats_GetDownloadedLeaderboardEntry::OutDetails' has a wrong offset!");
static_assert(offsetof(UserStats_GetDownloadedLeaderboardEntry, ReturnValue) == 0x000050, "Member 'UserStats_GetDownloadedLeaderboardEntry::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetGlobalStatFloat
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetGlobalStatFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetGlobalStatFloat) == 0x000008, "Wrong alignment on UserStats_GetGlobalStatFloat");
static_assert(sizeof(UserStats_GetGlobalStatFloat) == 0x000018, "Wrong size on UserStats_GetGlobalStatFloat");
static_assert(offsetof(UserStats_GetGlobalStatFloat, StatName) == 0x000000, "Member 'UserStats_GetGlobalStatFloat::StatName' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatFloat, Data) == 0x000010, "Member 'UserStats_GetGlobalStatFloat::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatFloat, ReturnValue) == 0x000014, "Member 'UserStats_GetGlobalStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetGlobalStatHistoryFloat
// 0x0030 (0x0030 - 0x0000)
struct UserStats_GetGlobalStatHistoryFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Data;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetGlobalStatHistoryFloat) == 0x000008, "Wrong alignment on UserStats_GetGlobalStatHistoryFloat");
static_assert(sizeof(UserStats_GetGlobalStatHistoryFloat) == 0x000030, "Wrong size on UserStats_GetGlobalStatHistoryFloat");
static_assert(offsetof(UserStats_GetGlobalStatHistoryFloat, StatName) == 0x000000, "Member 'UserStats_GetGlobalStatHistoryFloat::StatName' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatHistoryFloat, HistoryDays) == 0x000010, "Member 'UserStats_GetGlobalStatHistoryFloat::HistoryDays' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatHistoryFloat, Data) == 0x000018, "Member 'UserStats_GetGlobalStatHistoryFloat::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatHistoryFloat, ReturnValue) == 0x000028, "Member 'UserStats_GetGlobalStatHistoryFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetGlobalStatHistoryInt
// 0x0030 (0x0030 - 0x0000)
struct UserStats_GetGlobalStatHistoryInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Data;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetGlobalStatHistoryInt) == 0x000008, "Wrong alignment on UserStats_GetGlobalStatHistoryInt");
static_assert(sizeof(UserStats_GetGlobalStatHistoryInt) == 0x000030, "Wrong size on UserStats_GetGlobalStatHistoryInt");
static_assert(offsetof(UserStats_GetGlobalStatHistoryInt, StatName) == 0x000000, "Member 'UserStats_GetGlobalStatHistoryInt::StatName' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatHistoryInt, HistoryDays) == 0x000010, "Member 'UserStats_GetGlobalStatHistoryInt::HistoryDays' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatHistoryInt, Data) == 0x000018, "Member 'UserStats_GetGlobalStatHistoryInt::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatHistoryInt, ReturnValue) == 0x000028, "Member 'UserStats_GetGlobalStatHistoryInt::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetGlobalStatInt
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetGlobalStatInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetGlobalStatInt) == 0x000008, "Wrong alignment on UserStats_GetGlobalStatInt");
static_assert(sizeof(UserStats_GetGlobalStatInt) == 0x000018, "Wrong size on UserStats_GetGlobalStatInt");
static_assert(offsetof(UserStats_GetGlobalStatInt, StatName) == 0x000000, "Member 'UserStats_GetGlobalStatInt::StatName' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatInt, Data) == 0x000010, "Member 'UserStats_GetGlobalStatInt::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetGlobalStatInt, ReturnValue) == 0x000014, "Member 'UserStats_GetGlobalStatInt::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetLeaderboardDisplayType
// 0x0010 (0x0010 - 0x0000)
struct UserStats_GetLeaderboardDisplayType final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardDisplayType                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetLeaderboardDisplayType) == 0x000008, "Wrong alignment on UserStats_GetLeaderboardDisplayType");
static_assert(sizeof(UserStats_GetLeaderboardDisplayType) == 0x000010, "Wrong size on UserStats_GetLeaderboardDisplayType");
static_assert(offsetof(UserStats_GetLeaderboardDisplayType, SteamLeaderboard) == 0x000000, "Member 'UserStats_GetLeaderboardDisplayType::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_GetLeaderboardDisplayType, ReturnValue) == 0x000008, "Member 'UserStats_GetLeaderboardDisplayType::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetLeaderboardEntryCount
// 0x0010 (0x0010 - 0x0000)
struct UserStats_GetLeaderboardEntryCount final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetLeaderboardEntryCount) == 0x000008, "Wrong alignment on UserStats_GetLeaderboardEntryCount");
static_assert(sizeof(UserStats_GetLeaderboardEntryCount) == 0x000010, "Wrong size on UserStats_GetLeaderboardEntryCount");
static_assert(offsetof(UserStats_GetLeaderboardEntryCount, SteamLeaderboard) == 0x000000, "Member 'UserStats_GetLeaderboardEntryCount::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_GetLeaderboardEntryCount, ReturnValue) == 0x000008, "Member 'UserStats_GetLeaderboardEntryCount::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetLeaderboardName
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetLeaderboardName final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_GetLeaderboardName) == 0x000008, "Wrong alignment on UserStats_GetLeaderboardName");
static_assert(sizeof(UserStats_GetLeaderboardName) == 0x000018, "Wrong size on UserStats_GetLeaderboardName");
static_assert(offsetof(UserStats_GetLeaderboardName, SteamLeaderboard) == 0x000000, "Member 'UserStats_GetLeaderboardName::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_GetLeaderboardName, ReturnValue) == 0x000008, "Member 'UserStats_GetLeaderboardName::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetLeaderboardSortMethod
// 0x0010 (0x0010 - 0x0000)
struct UserStats_GetLeaderboardSortMethod final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardSortMethod                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetLeaderboardSortMethod) == 0x000008, "Wrong alignment on UserStats_GetLeaderboardSortMethod");
static_assert(sizeof(UserStats_GetLeaderboardSortMethod) == 0x000010, "Wrong size on UserStats_GetLeaderboardSortMethod");
static_assert(offsetof(UserStats_GetLeaderboardSortMethod, SteamLeaderboard) == 0x000000, "Member 'UserStats_GetLeaderboardSortMethod::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_GetLeaderboardSortMethod, ReturnValue) == 0x000008, "Member 'UserStats_GetLeaderboardSortMethod::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetMostAchievedAchievementInfo
// 0x0020 (0x0020 - 0x0000)
struct UserStats_GetMostAchievedAchievementInfo final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetMostAchievedAchievementInfo) == 0x000008, "Wrong alignment on UserStats_GetMostAchievedAchievementInfo");
static_assert(sizeof(UserStats_GetMostAchievedAchievementInfo) == 0x000020, "Wrong size on UserStats_GetMostAchievedAchievementInfo");
static_assert(offsetof(UserStats_GetMostAchievedAchievementInfo, Name_0) == 0x000000, "Member 'UserStats_GetMostAchievedAchievementInfo::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetMostAchievedAchievementInfo, Percent) == 0x000010, "Member 'UserStats_GetMostAchievedAchievementInfo::Percent' has a wrong offset!");
static_assert(offsetof(UserStats_GetMostAchievedAchievementInfo, bAchieved) == 0x000014, "Member 'UserStats_GetMostAchievedAchievementInfo::bAchieved' has a wrong offset!");
static_assert(offsetof(UserStats_GetMostAchievedAchievementInfo, ReturnValue) == 0x000018, "Member 'UserStats_GetMostAchievedAchievementInfo::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetNextMostAchievedAchievementInfo
// 0x0028 (0x0028 - 0x0000)
struct UserStats_GetNextMostAchievedAchievementInfo final
{
public:
	int32                                         IteratorPrevious;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetNextMostAchievedAchievementInfo) == 0x000008, "Wrong alignment on UserStats_GetNextMostAchievedAchievementInfo");
static_assert(sizeof(UserStats_GetNextMostAchievedAchievementInfo) == 0x000028, "Wrong size on UserStats_GetNextMostAchievedAchievementInfo");
static_assert(offsetof(UserStats_GetNextMostAchievedAchievementInfo, IteratorPrevious) == 0x000000, "Member 'UserStats_GetNextMostAchievedAchievementInfo::IteratorPrevious' has a wrong offset!");
static_assert(offsetof(UserStats_GetNextMostAchievedAchievementInfo, Name_0) == 0x000008, "Member 'UserStats_GetNextMostAchievedAchievementInfo::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetNextMostAchievedAchievementInfo, Percent) == 0x000018, "Member 'UserStats_GetNextMostAchievedAchievementInfo::Percent' has a wrong offset!");
static_assert(offsetof(UserStats_GetNextMostAchievedAchievementInfo, bAchieved) == 0x00001C, "Member 'UserStats_GetNextMostAchievedAchievementInfo::bAchieved' has a wrong offset!");
static_assert(offsetof(UserStats_GetNextMostAchievedAchievementInfo, ReturnValue) == 0x000020, "Member 'UserStats_GetNextMostAchievedAchievementInfo::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetNumAchievements
// 0x0004 (0x0004 - 0x0000)
struct UserStats_GetNumAchievements final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_GetNumAchievements) == 0x000004, "Wrong alignment on UserStats_GetNumAchievements");
static_assert(sizeof(UserStats_GetNumAchievements) == 0x000004, "Wrong size on UserStats_GetNumAchievements");
static_assert(offsetof(UserStats_GetNumAchievements, ReturnValue) == 0x000000, "Member 'UserStats_GetNumAchievements::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetStatFloat
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetStatFloat final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetStatFloat) == 0x000008, "Wrong alignment on UserStats_GetStatFloat");
static_assert(sizeof(UserStats_GetStatFloat) == 0x000018, "Wrong size on UserStats_GetStatFloat");
static_assert(offsetof(UserStats_GetStatFloat, Name_0) == 0x000000, "Member 'UserStats_GetStatFloat::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetStatFloat, Data) == 0x000010, "Member 'UserStats_GetStatFloat::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetStatFloat, ReturnValue) == 0x000014, "Member 'UserStats_GetStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetStatInt
// 0x0018 (0x0018 - 0x0000)
struct UserStats_GetStatInt final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetStatInt) == 0x000008, "Wrong alignment on UserStats_GetStatInt");
static_assert(sizeof(UserStats_GetStatInt) == 0x000018, "Wrong size on UserStats_GetStatInt");
static_assert(offsetof(UserStats_GetStatInt, Name_0) == 0x000000, "Member 'UserStats_GetStatInt::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetStatInt, Data) == 0x000010, "Member 'UserStats_GetStatInt::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetStatInt, ReturnValue) == 0x000014, "Member 'UserStats_GetStatInt::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct UserStats_GetUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetUserAchievement) == 0x000008, "Wrong alignment on UserStats_GetUserAchievement");
static_assert(sizeof(UserStats_GetUserAchievement) == 0x000020, "Wrong size on UserStats_GetUserAchievement");
static_assert(offsetof(UserStats_GetUserAchievement, SteamIDUser) == 0x000000, "Member 'UserStats_GetUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserAchievement, Name_0) == 0x000008, "Member 'UserStats_GetUserAchievement::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserAchievement, bAchieved) == 0x000018, "Member 'UserStats_GetUserAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserAchievement, ReturnValue) == 0x000019, "Member 'UserStats_GetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetUserAchievementAndUnlockTime
// 0x0028 (0x0028 - 0x0000)
struct UserStats_GetUserAchievementAndUnlockTime final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockTime;                                        // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetUserAchievementAndUnlockTime) == 0x000008, "Wrong alignment on UserStats_GetUserAchievementAndUnlockTime");
static_assert(sizeof(UserStats_GetUserAchievementAndUnlockTime) == 0x000028, "Wrong size on UserStats_GetUserAchievementAndUnlockTime");
static_assert(offsetof(UserStats_GetUserAchievementAndUnlockTime, SteamIDUser) == 0x000000, "Member 'UserStats_GetUserAchievementAndUnlockTime::SteamIDUser' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserAchievementAndUnlockTime, Name_0) == 0x000008, "Member 'UserStats_GetUserAchievementAndUnlockTime::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserAchievementAndUnlockTime, bAchieved) == 0x000018, "Member 'UserStats_GetUserAchievementAndUnlockTime::bAchieved' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserAchievementAndUnlockTime, UnlockTime) == 0x00001C, "Member 'UserStats_GetUserAchievementAndUnlockTime::UnlockTime' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserAchievementAndUnlockTime, ReturnValue) == 0x000020, "Member 'UserStats_GetUserAchievementAndUnlockTime::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetUserStatFloat
// 0x0020 (0x0020 - 0x0000)
struct UserStats_GetUserStatFloat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetUserStatFloat) == 0x000008, "Wrong alignment on UserStats_GetUserStatFloat");
static_assert(sizeof(UserStats_GetUserStatFloat) == 0x000020, "Wrong size on UserStats_GetUserStatFloat");
static_assert(offsetof(UserStats_GetUserStatFloat, SteamIDUser) == 0x000000, "Member 'UserStats_GetUserStatFloat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserStatFloat, Name_0) == 0x000008, "Member 'UserStats_GetUserStatFloat::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserStatFloat, Data) == 0x000018, "Member 'UserStats_GetUserStatFloat::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserStatFloat, ReturnValue) == 0x00001C, "Member 'UserStats_GetUserStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.GetUserStatInteger
// 0x0020 (0x0020 - 0x0000)
struct UserStats_GetUserStatInteger final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_GetUserStatInteger) == 0x000008, "Wrong alignment on UserStats_GetUserStatInteger");
static_assert(sizeof(UserStats_GetUserStatInteger) == 0x000020, "Wrong size on UserStats_GetUserStatInteger");
static_assert(offsetof(UserStats_GetUserStatInteger, SteamIDUser) == 0x000000, "Member 'UserStats_GetUserStatInteger::SteamIDUser' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserStatInteger, Name_0) == 0x000008, "Member 'UserStats_GetUserStatInteger::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserStatInteger, Data) == 0x000018, "Member 'UserStats_GetUserStatInteger::Data' has a wrong offset!");
static_assert(offsetof(UserStats_GetUserStatInteger, ReturnValue) == 0x00001C, "Member 'UserStats_GetUserStatInteger::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.IndicateAchievementProgress
// 0x0020 (0x0020 - 0x0000)
struct UserStats_IndicateAchievementProgress final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_IndicateAchievementProgress) == 0x000008, "Wrong alignment on UserStats_IndicateAchievementProgress");
static_assert(sizeof(UserStats_IndicateAchievementProgress) == 0x000020, "Wrong size on UserStats_IndicateAchievementProgress");
static_assert(offsetof(UserStats_IndicateAchievementProgress, Name_0) == 0x000000, "Member 'UserStats_IndicateAchievementProgress::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_IndicateAchievementProgress, CurrentProgress) == 0x000010, "Member 'UserStats_IndicateAchievementProgress::CurrentProgress' has a wrong offset!");
static_assert(offsetof(UserStats_IndicateAchievementProgress, MaxProgress) == 0x000014, "Member 'UserStats_IndicateAchievementProgress::MaxProgress' has a wrong offset!");
static_assert(offsetof(UserStats_IndicateAchievementProgress, ReturnValue) == 0x000018, "Member 'UserStats_IndicateAchievementProgress::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.RequestCurrentStats
// 0x0001 (0x0001 - 0x0000)
struct UserStats_RequestCurrentStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_RequestCurrentStats) == 0x000001, "Wrong alignment on UserStats_RequestCurrentStats");
static_assert(sizeof(UserStats_RequestCurrentStats) == 0x000001, "Wrong size on UserStats_RequestCurrentStats");
static_assert(offsetof(UserStats_RequestCurrentStats, ReturnValue) == 0x000000, "Member 'UserStats_RequestCurrentStats::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.ResetAllStats
// 0x0002 (0x0002 - 0x0000)
struct UserStats_ResetAllStats final
{
public:
	bool                                          bAchievementsToo;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_ResetAllStats) == 0x000001, "Wrong alignment on UserStats_ResetAllStats");
static_assert(sizeof(UserStats_ResetAllStats) == 0x000002, "Wrong size on UserStats_ResetAllStats");
static_assert(offsetof(UserStats_ResetAllStats, bAchievementsToo) == 0x000000, "Member 'UserStats_ResetAllStats::bAchievementsToo' has a wrong offset!");
static_assert(offsetof(UserStats_ResetAllStats, ReturnValue) == 0x000001, "Member 'UserStats_ResetAllStats::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.SetAchievement
// 0x0018 (0x0018 - 0x0000)
struct UserStats_SetAchievement final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_SetAchievement) == 0x000008, "Wrong alignment on UserStats_SetAchievement");
static_assert(sizeof(UserStats_SetAchievement) == 0x000018, "Wrong size on UserStats_SetAchievement");
static_assert(offsetof(UserStats_SetAchievement, Name_0) == 0x000000, "Member 'UserStats_SetAchievement::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_SetAchievement, ReturnValue) == 0x000010, "Member 'UserStats_SetAchievement::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.SetStatFloat
// 0x0018 (0x0018 - 0x0000)
struct UserStats_SetStatFloat final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_SetStatFloat) == 0x000008, "Wrong alignment on UserStats_SetStatFloat");
static_assert(sizeof(UserStats_SetStatFloat) == 0x000018, "Wrong size on UserStats_SetStatFloat");
static_assert(offsetof(UserStats_SetStatFloat, Name_0) == 0x000000, "Member 'UserStats_SetStatFloat::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_SetStatFloat, Data) == 0x000010, "Member 'UserStats_SetStatFloat::Data' has a wrong offset!");
static_assert(offsetof(UserStats_SetStatFloat, ReturnValue) == 0x000014, "Member 'UserStats_SetStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.SetStatInt
// 0x0018 (0x0018 - 0x0000)
struct UserStats_SetStatInt final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_SetStatInt) == 0x000008, "Wrong alignment on UserStats_SetStatInt");
static_assert(sizeof(UserStats_SetStatInt) == 0x000018, "Wrong size on UserStats_SetStatInt");
static_assert(offsetof(UserStats_SetStatInt, Name_0) == 0x000000, "Member 'UserStats_SetStatInt::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_SetStatInt, Data) == 0x000010, "Member 'UserStats_SetStatInt::Data' has a wrong offset!");
static_assert(offsetof(UserStats_SetStatInt, ReturnValue) == 0x000014, "Member 'UserStats_SetStatInt::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.StoreStats
// 0x0001 (0x0001 - 0x0000)
struct UserStats_StoreStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_StoreStats) == 0x000001, "Wrong alignment on UserStats_StoreStats");
static_assert(sizeof(UserStats_StoreStats) == 0x000001, "Wrong size on UserStats_StoreStats");
static_assert(offsetof(UserStats_StoreStats, ReturnValue) == 0x000000, "Member 'UserStats_StoreStats::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.UpdateAvgRateStat
// 0x0020 (0x0020 - 0x0000)
struct UserStats_UpdateAvgRateStat final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CountThisSession;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SessionLength;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_UpdateAvgRateStat) == 0x000008, "Wrong alignment on UserStats_UpdateAvgRateStat");
static_assert(sizeof(UserStats_UpdateAvgRateStat) == 0x000020, "Wrong size on UserStats_UpdateAvgRateStat");
static_assert(offsetof(UserStats_UpdateAvgRateStat, Name_0) == 0x000000, "Member 'UserStats_UpdateAvgRateStat::Name_0' has a wrong offset!");
static_assert(offsetof(UserStats_UpdateAvgRateStat, CountThisSession) == 0x000010, "Member 'UserStats_UpdateAvgRateStat::CountThisSession' has a wrong offset!");
static_assert(offsetof(UserStats_UpdateAvgRateStat, SessionLength) == 0x000014, "Member 'UserStats_UpdateAvgRateStat::SessionLength' has a wrong offset!");
static_assert(offsetof(UserStats_UpdateAvgRateStat, ReturnValue) == 0x000018, "Member 'UserStats_UpdateAvgRateStat::ReturnValue' has a wrong offset!");

// Function SteamCore.UserStats.AttachLeaderboardUGC
// 0x0020 (0x0020 - 0x0000)
struct UserStats_AttachLeaderboardUGC final
{
public:
	TDelegate<void(struct FAttachLeaderboardUGCData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Handle;                                            // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_AttachLeaderboardUGC) == 0x000008, "Wrong alignment on UserStats_AttachLeaderboardUGC");
static_assert(sizeof(UserStats_AttachLeaderboardUGC) == 0x000020, "Wrong size on UserStats_AttachLeaderboardUGC");
static_assert(offsetof(UserStats_AttachLeaderboardUGC, Callback) == 0x000000, "Member 'UserStats_AttachLeaderboardUGC::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_AttachLeaderboardUGC, SteamLeaderboard) == 0x000010, "Member 'UserStats_AttachLeaderboardUGC::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_AttachLeaderboardUGC, Handle) == 0x000018, "Member 'UserStats_AttachLeaderboardUGC::Handle' has a wrong offset!");

// Function SteamCore.UserStats.DownloadLeaderboardEntries
// 0x0028 (0x0028 - 0x0000)
struct UserStats_DownloadLeaderboardEntries final
{
public:
	TDelegate<void(struct FLeaderboardScoresDownloaded& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardDataRequest                  DataRequest;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RangeStart;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeEnd;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_DownloadLeaderboardEntries) == 0x000008, "Wrong alignment on UserStats_DownloadLeaderboardEntries");
static_assert(sizeof(UserStats_DownloadLeaderboardEntries) == 0x000028, "Wrong size on UserStats_DownloadLeaderboardEntries");
static_assert(offsetof(UserStats_DownloadLeaderboardEntries, Callback) == 0x000000, "Member 'UserStats_DownloadLeaderboardEntries::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_DownloadLeaderboardEntries, SteamLeaderboard) == 0x000010, "Member 'UserStats_DownloadLeaderboardEntries::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_DownloadLeaderboardEntries, DataRequest) == 0x000018, "Member 'UserStats_DownloadLeaderboardEntries::DataRequest' has a wrong offset!");
static_assert(offsetof(UserStats_DownloadLeaderboardEntries, RangeStart) == 0x00001C, "Member 'UserStats_DownloadLeaderboardEntries::RangeStart' has a wrong offset!");
static_assert(offsetof(UserStats_DownloadLeaderboardEntries, RangeEnd) == 0x000020, "Member 'UserStats_DownloadLeaderboardEntries::RangeEnd' has a wrong offset!");

// Function SteamCore.UserStats.DownloadLeaderboardEntriesForUsers
// 0x0028 (0x0028 - 0x0000)
struct UserStats_DownloadLeaderboardEntriesForUsers final
{
public:
	TDelegate<void(struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       Users;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_DownloadLeaderboardEntriesForUsers) == 0x000008, "Wrong alignment on UserStats_DownloadLeaderboardEntriesForUsers");
static_assert(sizeof(UserStats_DownloadLeaderboardEntriesForUsers) == 0x000028, "Wrong size on UserStats_DownloadLeaderboardEntriesForUsers");
static_assert(offsetof(UserStats_DownloadLeaderboardEntriesForUsers, Callback) == 0x000000, "Member 'UserStats_DownloadLeaderboardEntriesForUsers::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_DownloadLeaderboardEntriesForUsers, SteamLeaderboard) == 0x000010, "Member 'UserStats_DownloadLeaderboardEntriesForUsers::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_DownloadLeaderboardEntriesForUsers, Users) == 0x000018, "Member 'UserStats_DownloadLeaderboardEntriesForUsers::Users' has a wrong offset!");

// Function SteamCore.UserStats.FindLeaderboard
// 0x0020 (0x0020 - 0x0000)
struct UserStats_FindLeaderboard final
{
public:
	TDelegate<void(struct FLeaderboardFindResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_FindLeaderboard) == 0x000008, "Wrong alignment on UserStats_FindLeaderboard");
static_assert(sizeof(UserStats_FindLeaderboard) == 0x000020, "Wrong size on UserStats_FindLeaderboard");
static_assert(offsetof(UserStats_FindLeaderboard, Callback) == 0x000000, "Member 'UserStats_FindLeaderboard::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_FindLeaderboard, LeaderboardName) == 0x000010, "Member 'UserStats_FindLeaderboard::LeaderboardName' has a wrong offset!");

// Function SteamCore.UserStats.FindOrCreateLeaderboard
// 0x0028 (0x0028 - 0x0000)
struct UserStats_FindOrCreateLeaderboard final
{
public:
	TDelegate<void(struct FFindOrCreateLeaderboardData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardSortMethod                   SortMethod;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardDisplayType                  DisplayType;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserStats_FindOrCreateLeaderboard) == 0x000008, "Wrong alignment on UserStats_FindOrCreateLeaderboard");
static_assert(sizeof(UserStats_FindOrCreateLeaderboard) == 0x000028, "Wrong size on UserStats_FindOrCreateLeaderboard");
static_assert(offsetof(UserStats_FindOrCreateLeaderboard, Callback) == 0x000000, "Member 'UserStats_FindOrCreateLeaderboard::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_FindOrCreateLeaderboard, LeaderboardName) == 0x000010, "Member 'UserStats_FindOrCreateLeaderboard::LeaderboardName' has a wrong offset!");
static_assert(offsetof(UserStats_FindOrCreateLeaderboard, SortMethod) == 0x000020, "Member 'UserStats_FindOrCreateLeaderboard::SortMethod' has a wrong offset!");
static_assert(offsetof(UserStats_FindOrCreateLeaderboard, DisplayType) == 0x000021, "Member 'UserStats_FindOrCreateLeaderboard::DisplayType' has a wrong offset!");

// Function SteamCore.UserStats.GetNumberOfCurrentPlayers
// 0x0010 (0x0010 - 0x0000)
struct UserStats_GetNumberOfCurrentPlayers final
{
public:
	TDelegate<void(struct FNumberOfCurrentPlayers& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_GetNumberOfCurrentPlayers) == 0x000004, "Wrong alignment on UserStats_GetNumberOfCurrentPlayers");
static_assert(sizeof(UserStats_GetNumberOfCurrentPlayers) == 0x000010, "Wrong size on UserStats_GetNumberOfCurrentPlayers");
static_assert(offsetof(UserStats_GetNumberOfCurrentPlayers, Callback) == 0x000000, "Member 'UserStats_GetNumberOfCurrentPlayers::Callback' has a wrong offset!");

// Function SteamCore.UserStats.RequestGlobalAchievementPercentages
// 0x0010 (0x0010 - 0x0000)
struct UserStats_RequestGlobalAchievementPercentages final
{
public:
	TDelegate<void(struct FGlobalAchievementPercentagesReady& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_RequestGlobalAchievementPercentages) == 0x000004, "Wrong alignment on UserStats_RequestGlobalAchievementPercentages");
static_assert(sizeof(UserStats_RequestGlobalAchievementPercentages) == 0x000010, "Wrong size on UserStats_RequestGlobalAchievementPercentages");
static_assert(offsetof(UserStats_RequestGlobalAchievementPercentages, Callback) == 0x000000, "Member 'UserStats_RequestGlobalAchievementPercentages::Callback' has a wrong offset!");

// Function SteamCore.UserStats.RequestGlobalStats
// 0x0014 (0x0014 - 0x0000)
struct UserStats_RequestGlobalStats final
{
public:
	TDelegate<void(struct FGlobalStatsReceived& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_RequestGlobalStats) == 0x000004, "Wrong alignment on UserStats_RequestGlobalStats");
static_assert(sizeof(UserStats_RequestGlobalStats) == 0x000014, "Wrong size on UserStats_RequestGlobalStats");
static_assert(offsetof(UserStats_RequestGlobalStats, Callback) == 0x000000, "Member 'UserStats_RequestGlobalStats::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_RequestGlobalStats, HistoryDays) == 0x000010, "Member 'UserStats_RequestGlobalStats::HistoryDays' has a wrong offset!");

// Function SteamCore.UserStats.RequestUserStats
// 0x0018 (0x0018 - 0x0000)
struct UserStats_RequestUserStats final
{
public:
	TDelegate<void(struct FRequestUserStatsData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_RequestUserStats) == 0x000008, "Wrong alignment on UserStats_RequestUserStats");
static_assert(sizeof(UserStats_RequestUserStats) == 0x000018, "Wrong size on UserStats_RequestUserStats");
static_assert(offsetof(UserStats_RequestUserStats, Callback) == 0x000000, "Member 'UserStats_RequestUserStats::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_RequestUserStats, SteamID) == 0x000010, "Member 'UserStats_RequestUserStats::SteamID' has a wrong offset!");

// Function SteamCore.UserStats.UploadLeaderboardScore
// 0x0030 (0x0030 - 0x0000)
struct UserStats_UploadLeaderboardScore final
{
public:
	TDelegate<void(struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardUploadScoreMethod            UploadScoreMethod;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScoreDetails;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserStats_UploadLeaderboardScore) == 0x000008, "Wrong alignment on UserStats_UploadLeaderboardScore");
static_assert(sizeof(UserStats_UploadLeaderboardScore) == 0x000030, "Wrong size on UserStats_UploadLeaderboardScore");
static_assert(offsetof(UserStats_UploadLeaderboardScore, Callback) == 0x000000, "Member 'UserStats_UploadLeaderboardScore::Callback' has a wrong offset!");
static_assert(offsetof(UserStats_UploadLeaderboardScore, SteamLeaderboard) == 0x000010, "Member 'UserStats_UploadLeaderboardScore::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(UserStats_UploadLeaderboardScore, UploadScoreMethod) == 0x000018, "Member 'UserStats_UploadLeaderboardScore::UploadScoreMethod' has a wrong offset!");
static_assert(offsetof(UserStats_UploadLeaderboardScore, Score) == 0x00001C, "Member 'UserStats_UploadLeaderboardScore::Score' has a wrong offset!");
static_assert(offsetof(UserStats_UploadLeaderboardScore, ScoreDetails) == 0x000020, "Member 'UserStats_UploadLeaderboardScore::ScoreDetails' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionFindLeaderboard.FindLeaderboardAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserStatsAsyncActionFindLeaderboard* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync) == 0x000028, "Wrong size on SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, LeaderboardName) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::LeaderboardName' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, Timeout) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionFindLeaderboard.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback final
{
public:
	struct FLeaderboardFindResult                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionFindLeaderboard_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries.DownloadLeaderboardEntriesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardDataRequest                  Request;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RangeStart;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeEnd;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreUserStatsAsyncActionDownloadLeaderboardEntries* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync) == 0x000028, "Wrong size on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, Request) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::Request' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, RangeStart) == 0x000014, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::RangeStart' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, RangeEnd) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::RangeEnd' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, Timeout) == 0x00001C, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback final
{
public:
	struct FLeaderboardScoresDownloaded           Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback) == 0x000020, "Wrong size on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats.RequestGlobalStatsAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreUserStatsAsyncActionDownloadRequestGlobalStats* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, HistoryDays) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::HistoryDays' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, Timeout) == 0x00000C, "Member 'SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, ReturnValue) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback final
{
public:
	struct FGlobalStatsReceived                   Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages.RequestGlobalAchievementPercentagesAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync, Timeout) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync, ReturnValue) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback final
{
public:
	struct FGlobalAchievementPercentagesReady     Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers.GetNumberOfCurrentPlayersAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, Timeout) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, ReturnValue) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers.HandleCallback
// 0x000C (0x000C - 0x0000)
struct SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback final
{
public:
	struct FNumberOfCurrentPlayers                Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback) == 0x000004, "Wrong alignment on SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback) == 0x00000C, "Wrong size on SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback, bWasSuccessful) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionUploadLeaderboardScore.UploadLeaderboardScoreAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardUploadScoreMethod            UploadScoreMethod;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScoreDetails;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserStatsAsyncActionUploadLeaderboardScore* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync) == 0x000038, "Wrong size on SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, UploadScoreMethod) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::UploadScoreMethod' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, Score) == 0x000014, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::Score' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, ScoreDetails) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::ScoreDetails' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, Timeout) == 0x000028, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, ReturnValue) == 0x000030, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionUploadLeaderboardScore.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback final
{
public:
	struct FLeaderboardScoreUploaded              Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback) == 0x000028, "Wrong size on SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback, bWasSuccessful) == 0x000020, "Member 'SteamCoreUserStatsAsyncActionUploadLeaderboardScore_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard.FindOrCreateLeaderboardAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardSortMethod                   SortMethod;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardDisplayType                  DisplayType;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreUserStatsAsyncActionFindOrCreateLeaderboard* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync) == 0x000028, "Wrong size on SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, LeaderboardName) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::LeaderboardName' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, SortMethod) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::SortMethod' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, DisplayType) == 0x000019, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::DisplayType' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, Timeout) == 0x00001C, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback final
{
public:
	struct FFindOrCreateLeaderboardData           Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionRequestUserStats.RequestUserStatsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserStatsAsyncActionRequestUserStats* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync) == 0x000020, "Wrong size on SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, SteamID) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, Timeout) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionRequestUserStats.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback final
{
public:
	struct FRequestUserStatsData                  Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback) == 0x000020, "Wrong size on SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionRequestUserStats_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers.DownloadLeaderboardEntriesForUsersAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       Users;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync) == 0x000030, "Wrong size on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, Users) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::Users' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, Timeout) == 0x000020, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, ReturnValue) == 0x000028, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback final
{
public:
	struct FLeaderboardScoresDownloadedForUsers   Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback) == 0x000020, "Wrong size on SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionAttachLeaderboardUGC.AttachLeaderboardUGCAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Handle;                                            // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreUserStatsAsyncActionAttachLeaderboardUGC* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync");
static_assert(sizeof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync) == 0x000028, "Wrong size on SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync");
static_assert(offsetof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, Handle) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::Handle' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, Timeout) == 0x000018, "Member 'SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, ReturnValue) == 0x000020, "Member 'SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreUserStatsAsyncActionAttachLeaderboardUGC.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback final
{
public:
	struct FAttachLeaderboardUGCData              Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback");
static_assert(sizeof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback) == 0x000018, "Wrong size on SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback");
static_assert(offsetof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback, Data) == 0x000000, "Member 'SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCore.SteamCoreVoice.ConstructSteamCoreVoice
// 0x0010 (0x0010 - 0x0000)
struct SteamCoreVoice_ConstructSteamCoreVoice final
{
public:
	int32                                         AudioSampleRate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreVoice*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreVoice_ConstructSteamCoreVoice) == 0x000008, "Wrong alignment on SteamCoreVoice_ConstructSteamCoreVoice");
static_assert(sizeof(SteamCoreVoice_ConstructSteamCoreVoice) == 0x000010, "Wrong size on SteamCoreVoice_ConstructSteamCoreVoice");
static_assert(offsetof(SteamCoreVoice_ConstructSteamCoreVoice, AudioSampleRate) == 0x000000, "Member 'SteamCoreVoice_ConstructSteamCoreVoice::AudioSampleRate' has a wrong offset!");
static_assert(offsetof(SteamCoreVoice_ConstructSteamCoreVoice, ReturnValue) == 0x000008, "Member 'SteamCoreVoice_ConstructSteamCoreVoice::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreVoice.DestroySteamCoreVoice
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreVoice_DestroySteamCoreVoice final
{
public:
	class USteamCoreVoice*                        Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreVoice_DestroySteamCoreVoice) == 0x000008, "Wrong alignment on SteamCoreVoice_DestroySteamCoreVoice");
static_assert(sizeof(SteamCoreVoice_DestroySteamCoreVoice) == 0x000008, "Wrong size on SteamCoreVoice_DestroySteamCoreVoice");
static_assert(offsetof(SteamCoreVoice_DestroySteamCoreVoice, Obj) == 0x000000, "Member 'SteamCoreVoice_DestroySteamCoreVoice::Obj' has a wrong offset!");

// Function SteamCore.SteamCoreVoice.AddAudioBuffer
// 0x0010 (0x0010 - 0x0000)
struct SteamCoreVoice_AddAudioBuffer final
{
public:
	TArray<uint8>                                 Buffer;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreVoice_AddAudioBuffer) == 0x000008, "Wrong alignment on SteamCoreVoice_AddAudioBuffer");
static_assert(sizeof(SteamCoreVoice_AddAudioBuffer) == 0x000010, "Wrong size on SteamCoreVoice_AddAudioBuffer");
static_assert(offsetof(SteamCoreVoice_AddAudioBuffer, Buffer) == 0x000000, "Member 'SteamCoreVoice_AddAudioBuffer::Buffer' has a wrong offset!");

// Function SteamCore.SteamCoreAsyncActionListenForControllerChange.ListenForControllerChange
// 0x0010 (0x0010 - 0x0000)
struct SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreAsyncActionListenForControllerChange* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange) == 0x000008, "Wrong alignment on SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange");
static_assert(sizeof(SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange) == 0x000010, "Wrong size on SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange");
static_assert(offsetof(SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange, WorldContextObject) == 0x000000, "Member 'SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange, ReturnValue) == 0x000008, "Member 'SteamCoreAsyncActionListenForControllerChange_ListenForControllerChange::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamCoreAsyncActionListenForControllerChange.HandleCallback
// 0x000C (0x000C - 0x0000)
struct SteamCoreAsyncActionListenForControllerChange_HandleCallback final
{
public:
	bool                                          bIsConnected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAsyncActionListenForControllerChange_HandleCallback) == 0x000004, "Wrong alignment on SteamCoreAsyncActionListenForControllerChange_HandleCallback");
static_assert(sizeof(SteamCoreAsyncActionListenForControllerChange_HandleCallback) == 0x00000C, "Wrong size on SteamCoreAsyncActionListenForControllerChange_HandleCallback");
static_assert(offsetof(SteamCoreAsyncActionListenForControllerChange_HandleCallback, bIsConnected) == 0x000000, "Member 'SteamCoreAsyncActionListenForControllerChange_HandleCallback::bIsConnected' has a wrong offset!");
static_assert(offsetof(SteamCoreAsyncActionListenForControllerChange_HandleCallback, PlatformUserId) == 0x000004, "Member 'SteamCoreAsyncActionListenForControllerChange_HandleCallback::PlatformUserId' has a wrong offset!");
static_assert(offsetof(SteamCoreAsyncActionListenForControllerChange_HandleCallback, UserId) == 0x000008, "Member 'SteamCoreAsyncActionListenForControllerChange_HandleCallback::UserId' has a wrong offset!");

// Function SteamCore.SteamUtilities.BP_BytesToString
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_BP_BytesToString final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BP_BytesToString) == 0x000008, "Wrong alignment on SteamUtilities_BP_BytesToString");
static_assert(sizeof(SteamUtilities_BP_BytesToString) == 0x000020, "Wrong size on SteamUtilities_BP_BytesToString");
static_assert(offsetof(SteamUtilities_BP_BytesToString, Array) == 0x000000, "Member 'SteamUtilities_BP_BytesToString::Array' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BP_BytesToString, ReturnValue) == 0x000010, "Member 'SteamUtilities_BP_BytesToString::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.BP_StringToBytes
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_BP_StringToBytes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BP_StringToBytes) == 0x000008, "Wrong alignment on SteamUtilities_BP_StringToBytes");
static_assert(sizeof(SteamUtilities_BP_StringToBytes) == 0x000020, "Wrong size on SteamUtilities_BP_StringToBytes");
static_assert(offsetof(SteamUtilities_BP_StringToBytes, String) == 0x000000, "Member 'SteamUtilities_BP_StringToBytes::String' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BP_StringToBytes, ReturnValue) == 0x000010, "Member 'SteamUtilities_BP_StringToBytes::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.BreakInventoryUpdateHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakInventoryUpdateHandle final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakInventoryUpdateHandle) == 0x000008, "Wrong alignment on SteamUtilities_BreakInventoryUpdateHandle");
static_assert(sizeof(SteamUtilities_BreakInventoryUpdateHandle) == 0x000018, "Wrong size on SteamUtilities_BreakInventoryUpdateHandle");
static_assert(offsetof(SteamUtilities_BreakInventoryUpdateHandle, Handle) == 0x000000, "Member 'SteamUtilities_BreakInventoryUpdateHandle::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakInventoryUpdateHandle, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakInventoryUpdateHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.BreakPublishedFileID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakPublishedFileID final
{
public:
	struct FPublishedFileID                       FileID;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakPublishedFileID) == 0x000008, "Wrong alignment on SteamUtilities_BreakPublishedFileID");
static_assert(sizeof(SteamUtilities_BreakPublishedFileID) == 0x000018, "Wrong size on SteamUtilities_BreakPublishedFileID");
static_assert(offsetof(SteamUtilities_BreakPublishedFileID, FileID) == 0x000000, "Member 'SteamUtilities_BreakPublishedFileID::FileID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakPublishedFileID, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakPublishedFileID::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.BreakSteamGameID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakSteamGameID final
{
public:
	struct FSteamGameID                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakSteamGameID) == 0x000008, "Wrong alignment on SteamUtilities_BreakSteamGameID");
static_assert(sizeof(SteamUtilities_BreakSteamGameID) == 0x000018, "Wrong size on SteamUtilities_BreakSteamGameID");
static_assert(offsetof(SteamUtilities_BreakSteamGameID, SteamID) == 0x000000, "Member 'SteamUtilities_BreakSteamGameID::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakSteamGameID, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakSteamGameID::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.BreakSteamID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakSteamID final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakSteamID) == 0x000008, "Wrong alignment on SteamUtilities_BreakSteamID");
static_assert(sizeof(SteamUtilities_BreakSteamID) == 0x000018, "Wrong size on SteamUtilities_BreakSteamID");
static_assert(offsetof(SteamUtilities_BreakSteamID, SteamID) == 0x000000, "Member 'SteamUtilities_BreakSteamID::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakSteamID, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakSteamID::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.BreakTicketHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakTicketHandle final
{
public:
	struct FSteamTicketHandle                     Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakTicketHandle) == 0x000008, "Wrong alignment on SteamUtilities_BreakTicketHandle");
static_assert(sizeof(SteamUtilities_BreakTicketHandle) == 0x000018, "Wrong size on SteamUtilities_BreakTicketHandle");
static_assert(offsetof(SteamUtilities_BreakTicketHandle, Handle) == 0x000000, "Member 'SteamUtilities_BreakTicketHandle::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakTicketHandle, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakTicketHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.BreakUGCHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakUGCHandle final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakUGCHandle) == 0x000008, "Wrong alignment on SteamUtilities_BreakUGCHandle");
static_assert(sizeof(SteamUtilities_BreakUGCHandle) == 0x000018, "Wrong size on SteamUtilities_BreakUGCHandle");
static_assert(offsetof(SteamUtilities_BreakUGCHandle, Handle) == 0x000000, "Member 'SteamUtilities_BreakUGCHandle::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakUGCHandle, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakUGCHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.ConstructServerFilter
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_ConstructServerFilter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UServerFilter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_ConstructServerFilter) == 0x000008, "Wrong alignment on SteamUtilities_ConstructServerFilter");
static_assert(sizeof(SteamUtilities_ConstructServerFilter) == 0x000010, "Wrong size on SteamUtilities_ConstructServerFilter");
static_assert(offsetof(SteamUtilities_ConstructServerFilter, WorldContextObject) == 0x000000, "Member 'SteamUtilities_ConstructServerFilter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_ConstructServerFilter, ReturnValue) == 0x000008, "Member 'SteamUtilities_ConstructServerFilter::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.EncryptString
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_EncryptString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_EncryptString) == 0x000008, "Wrong alignment on SteamUtilities_EncryptString");
static_assert(sizeof(SteamUtilities_EncryptString) == 0x000020, "Wrong size on SteamUtilities_EncryptString");
static_assert(offsetof(SteamUtilities_EncryptString, String) == 0x000000, "Member 'SteamUtilities_EncryptString::String' has a wrong offset!");
static_assert(offsetof(SteamUtilities_EncryptString, ReturnValue) == 0x000010, "Member 'SteamUtilities_EncryptString::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.Equal
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_Equal final
{
public:
	struct FSteamID                               A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_Equal) == 0x000008, "Wrong alignment on SteamUtilities_Equal");
static_assert(sizeof(SteamUtilities_Equal) == 0x000018, "Wrong size on SteamUtilities_Equal");
static_assert(offsetof(SteamUtilities_Equal, A) == 0x000000, "Member 'SteamUtilities_Equal::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal, B) == 0x000008, "Member 'SteamUtilities_Equal::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal, ReturnValue) == 0x000010, "Member 'SteamUtilities_Equal::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.Equal_Exec
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_Equal_Exec final
{
public:
	struct FSteamID                               A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               B;                                                 // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreIdentical                           Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_Equal_Exec) == 0x000008, "Wrong alignment on SteamUtilities_Equal_Exec");
static_assert(sizeof(SteamUtilities_Equal_Exec) == 0x000018, "Wrong size on SteamUtilities_Equal_Exec");
static_assert(offsetof(SteamUtilities_Equal_Exec, A) == 0x000000, "Member 'SteamUtilities_Equal_Exec::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal_Exec, B) == 0x000008, "Member 'SteamUtilities_Equal_Exec::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal_Exec, Result) == 0x000010, "Member 'SteamUtilities_Equal_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.FromUnixTimestamp
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_FromUnixTimestamp final
{
public:
	class FString                                 Timestamp;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_FromUnixTimestamp) == 0x000008, "Wrong alignment on SteamUtilities_FromUnixTimestamp");
static_assert(sizeof(SteamUtilities_FromUnixTimestamp) == 0x000018, "Wrong size on SteamUtilities_FromUnixTimestamp");
static_assert(offsetof(SteamUtilities_FromUnixTimestamp, Timestamp) == 0x000000, "Member 'SteamUtilities_FromUnixTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(SteamUtilities_FromUnixTimestamp, ReturnValue) == 0x000010, "Member 'SteamUtilities_FromUnixTimestamp::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetAccountType
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetAccountType final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamAccountType                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetAccountType) == 0x000008, "Wrong alignment on SteamUtilities_GetAccountType");
static_assert(sizeof(SteamUtilities_GetAccountType) == 0x000010, "Wrong size on SteamUtilities_GetAccountType");
static_assert(offsetof(SteamUtilities_GetAccountType, SteamID) == 0x000000, "Member 'SteamUtilities_GetAccountType::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetAccountType, ReturnValue) == 0x000008, "Member 'SteamUtilities_GetAccountType::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetBool
// 0x0040 (0x0040 - 0x0000)
struct SteamUtilities_GetBool final
{
public:
	struct FSteamSessionSetting                   Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutValue;                                          // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetBool) == 0x000008, "Wrong alignment on SteamUtilities_GetBool");
static_assert(sizeof(SteamUtilities_GetBool) == 0x000040, "Wrong size on SteamUtilities_GetBool");
static_assert(offsetof(SteamUtilities_GetBool, Settings) == 0x000000, "Member 'SteamUtilities_GetBool::Settings' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetBool, Key) == 0x000028, "Member 'SteamUtilities_GetBool::Key' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetBool, OutValue) == 0x000038, "Member 'SteamUtilities_GetBool::OutValue' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetBool, ReturnValue) == 0x000039, "Member 'SteamUtilities_GetBool::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetGameEngineInitialized
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_GetGameEngineInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetGameEngineInitialized) == 0x000001, "Wrong alignment on SteamUtilities_GetGameEngineInitialized");
static_assert(sizeof(SteamUtilities_GetGameEngineInitialized) == 0x000001, "Wrong size on SteamUtilities_GetGameEngineInitialized");
static_assert(offsetof(SteamUtilities_GetGameEngineInitialized, ReturnValue) == 0x000000, "Member 'SteamUtilities_GetGameEngineInitialized::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetHostPingData
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetHostPingData final
{
public:
	struct FHostPingData                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetHostPingData) == 0x000008, "Wrong alignment on SteamUtilities_GetHostPingData");
static_assert(sizeof(SteamUtilities_GetHostPingData) == 0x000010, "Wrong size on SteamUtilities_GetHostPingData");
static_assert(offsetof(SteamUtilities_GetHostPingData, ReturnValue) == 0x000000, "Member 'SteamUtilities_GetHostPingData::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetInteger
// 0x0040 (0x0040 - 0x0000)
struct SteamUtilities_GetInteger final
{
public:
	struct FSteamSessionSetting                   Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetInteger) == 0x000008, "Wrong alignment on SteamUtilities_GetInteger");
static_assert(sizeof(SteamUtilities_GetInteger) == 0x000040, "Wrong size on SteamUtilities_GetInteger");
static_assert(offsetof(SteamUtilities_GetInteger, Settings) == 0x000000, "Member 'SteamUtilities_GetInteger::Settings' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetInteger, Key) == 0x000028, "Member 'SteamUtilities_GetInteger::Key' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetInteger, OutValue) == 0x000038, "Member 'SteamUtilities_GetInteger::OutValue' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetInteger, ReturnValue) == 0x00003C, "Member 'SteamUtilities_GetInteger::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetPingFromHostData
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_GetPingFromHostData final
{
public:
	struct FHostPingData                          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetPingFromHostData) == 0x000008, "Wrong alignment on SteamUtilities_GetPingFromHostData");
static_assert(sizeof(SteamUtilities_GetPingFromHostData) == 0x000018, "Wrong size on SteamUtilities_GetPingFromHostData");
static_assert(offsetof(SteamUtilities_GetPingFromHostData, Data) == 0x000000, "Member 'SteamUtilities_GetPingFromHostData::Data' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetPingFromHostData, ReturnValue) == 0x000010, "Member 'SteamUtilities_GetPingFromHostData::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetPublicIp
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetPublicIp final
{
public:
	TDelegate<void(const class FString& Response)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetPublicIp) == 0x000004, "Wrong alignment on SteamUtilities_GetPublicIp");
static_assert(sizeof(SteamUtilities_GetPublicIp) == 0x000010, "Wrong size on SteamUtilities_GetPublicIp");
static_assert(offsetof(SteamUtilities_GetPublicIp, Callback) == 0x000000, "Member 'SteamUtilities_GetPublicIp::Callback' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetSteamIdFromPlayerState
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetSteamIdFromPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetSteamIdFromPlayerState) == 0x000008, "Wrong alignment on SteamUtilities_GetSteamIdFromPlayerState");
static_assert(sizeof(SteamUtilities_GetSteamIdFromPlayerState) == 0x000010, "Wrong size on SteamUtilities_GetSteamIdFromPlayerState");
static_assert(offsetof(SteamUtilities_GetSteamIdFromPlayerState, PlayerState) == 0x000000, "Member 'SteamUtilities_GetSteamIdFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetSteamIdFromPlayerState, ReturnValue) == 0x000008, "Member 'SteamUtilities_GetSteamIdFromPlayerState::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetString
// 0x0050 (0x0050 - 0x0000)
struct SteamUtilities_GetString final
{
public:
	struct FSteamSessionSetting                   Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutValue;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetString) == 0x000008, "Wrong alignment on SteamUtilities_GetString");
static_assert(sizeof(SteamUtilities_GetString) == 0x000050, "Wrong size on SteamUtilities_GetString");
static_assert(offsetof(SteamUtilities_GetString, Settings) == 0x000000, "Member 'SteamUtilities_GetString::Settings' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetString, Key) == 0x000028, "Member 'SteamUtilities_GetString::Key' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetString, OutValue) == 0x000038, "Member 'SteamUtilities_GetString::OutValue' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetString, ReturnValue) == 0x000048, "Member 'SteamUtilities_GetString::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.GetType
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_GetType final
{
public:
	struct FSteamSessionSetting                   Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	ESteamAttributeType                           ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetType) == 0x000008, "Wrong alignment on SteamUtilities_GetType");
static_assert(sizeof(SteamUtilities_GetType) == 0x000030, "Wrong size on SteamUtilities_GetType");
static_assert(offsetof(SteamUtilities_GetType, Settings) == 0x000000, "Member 'SteamUtilities_GetType::Settings' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetType, ReturnValue) == 0x000028, "Member 'SteamUtilities_GetType::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsGameIDValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsGameIDValid final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsGameIDValid) == 0x000008, "Wrong alignment on SteamUtilities_IsGameIDValid");
static_assert(sizeof(SteamUtilities_IsGameIDValid) == 0x000010, "Wrong size on SteamUtilities_IsGameIDValid");
static_assert(offsetof(SteamUtilities_IsGameIDValid, GameID) == 0x000000, "Member 'SteamUtilities_IsGameIDValid::GameID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsGameIDValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsGameIDValid::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsGameIDValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsGameIDValid_Exec final
{
public:
	struct FSteamGameID                           GameID;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreValid                               Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsGameIDValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsGameIDValid_Exec");
static_assert(sizeof(SteamUtilities_IsGameIDValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsGameIDValid_Exec");
static_assert(offsetof(SteamUtilities_IsGameIDValid_Exec, GameID) == 0x000000, "Member 'SteamUtilities_IsGameIDValid_Exec::GameID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsGameIDValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsGameIDValid_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsLobby
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsLobby final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsLobby) == 0x000008, "Wrong alignment on SteamUtilities_IsLobby");
static_assert(sizeof(SteamUtilities_IsLobby) == 0x000010, "Wrong size on SteamUtilities_IsLobby");
static_assert(offsetof(SteamUtilities_IsLobby, SteamID) == 0x000000, "Member 'SteamUtilities_IsLobby::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsLobby, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsLobby::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsPublishedFileIDValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsPublishedFileIDValid final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsPublishedFileIDValid) == 0x000008, "Wrong alignment on SteamUtilities_IsPublishedFileIDValid");
static_assert(sizeof(SteamUtilities_IsPublishedFileIDValid) == 0x000010, "Wrong size on SteamUtilities_IsPublishedFileIDValid");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid, PublishedFileID) == 0x000000, "Member 'SteamUtilities_IsPublishedFileIDValid::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsPublishedFileIDValid::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsPublishedFileIDValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsPublishedFileIDValid_Exec final
{
public:
	struct FPublishedFileID                       Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreValid                               Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsPublishedFileIDValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsPublishedFileIDValid_Exec");
static_assert(sizeof(SteamUtilities_IsPublishedFileIDValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsPublishedFileIDValid_Exec");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsPublishedFileIDValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsPublishedFileIDValid_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsRecalculatingPing
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsRecalculatingPing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsRecalculatingPing) == 0x000001, "Wrong alignment on SteamUtilities_IsRecalculatingPing");
static_assert(sizeof(SteamUtilities_IsRecalculatingPing) == 0x000001, "Wrong size on SteamUtilities_IsRecalculatingPing");
static_assert(offsetof(SteamUtilities_IsRecalculatingPing, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsRecalculatingPing::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsSteamAvailable
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsSteamAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsSteamAvailable) == 0x000001, "Wrong alignment on SteamUtilities_IsSteamAvailable");
static_assert(sizeof(SteamUtilities_IsSteamAvailable) == 0x000001, "Wrong size on SteamUtilities_IsSteamAvailable");
static_assert(offsetof(SteamUtilities_IsSteamAvailable, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsSteamAvailable::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsSteamIDValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsSteamIDValid_Exec final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreValid                               Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamIDValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsSteamIDValid_Exec");
static_assert(sizeof(SteamUtilities_IsSteamIDValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsSteamIDValid_Exec");
static_assert(offsetof(SteamUtilities_IsSteamIDValid_Exec, SteamID) == 0x000000, "Member 'SteamUtilities_IsSteamIDValid_Exec::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamIDValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsSteamIDValid_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsSteamInventoryUpdateHandleValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsSteamInventoryUpdateHandleValid final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamInventoryUpdateHandleValid) == 0x000008, "Wrong alignment on SteamUtilities_IsSteamInventoryUpdateHandleValid");
static_assert(sizeof(SteamUtilities_IsSteamInventoryUpdateHandleValid) == 0x000010, "Wrong size on SteamUtilities_IsSteamInventoryUpdateHandleValid");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsSteamInventoryUpdateHandleValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreValid                               Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec");
static_assert(sizeof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsSteamServerInitialized
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsSteamServerInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsSteamServerInitialized) == 0x000001, "Wrong alignment on SteamUtilities_IsSteamServerInitialized");
static_assert(sizeof(SteamUtilities_IsSteamServerInitialized) == 0x000001, "Wrong size on SteamUtilities_IsSteamServerInitialized");
static_assert(offsetof(SteamUtilities_IsSteamServerInitialized, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsSteamServerInitialized::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsSteamTicketHandleValid
// 0x0008 (0x0008 - 0x0000)
struct SteamUtilities_IsSteamTicketHandleValid final
{
public:
	struct FSteamTicketHandle                     Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamTicketHandleValid) == 0x000004, "Wrong alignment on SteamUtilities_IsSteamTicketHandleValid");
static_assert(sizeof(SteamUtilities_IsSteamTicketHandleValid) == 0x000008, "Wrong size on SteamUtilities_IsSteamTicketHandleValid");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamTicketHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid, ReturnValue) == 0x000004, "Member 'SteamUtilities_IsSteamTicketHandleValid::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsSteamTicketHandleValid_Exec
// 0x0008 (0x0008 - 0x0000)
struct SteamUtilities_IsSteamTicketHandleValid_Exec final
{
public:
	struct FSteamTicketHandle                     Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreValid                               Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamTicketHandleValid_Exec) == 0x000004, "Wrong alignment on SteamUtilities_IsSteamTicketHandleValid_Exec");
static_assert(sizeof(SteamUtilities_IsSteamTicketHandleValid_Exec) == 0x000008, "Wrong size on SteamUtilities_IsSteamTicketHandleValid_Exec");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamTicketHandleValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid_Exec, Result) == 0x000004, "Member 'SteamUtilities_IsSteamTicketHandleValid_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsUGCHandleValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsUGCHandleValid final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsUGCHandleValid) == 0x000008, "Wrong alignment on SteamUtilities_IsUGCHandleValid");
static_assert(sizeof(SteamUtilities_IsUGCHandleValid) == 0x000010, "Wrong size on SteamUtilities_IsUGCHandleValid");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid, Handle) == 0x000000, "Member 'SteamUtilities_IsUGCHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsUGCHandleValid::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsUGCHandleValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsUGCHandleValid_Exec final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreValid                               Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsUGCHandleValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsUGCHandleValid_Exec");
static_assert(sizeof(SteamUtilities_IsUGCHandleValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsUGCHandleValid_Exec");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsUGCHandleValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsUGCHandleValid_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsUsingP2PRelays
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsUsingP2PRelays final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsUsingP2PRelays) == 0x000001, "Wrong alignment on SteamUtilities_IsUsingP2PRelays");
static_assert(sizeof(SteamUtilities_IsUsingP2PRelays) == 0x000001, "Wrong size on SteamUtilities_IsUsingP2PRelays");
static_assert(offsetof(SteamUtilities_IsUsingP2PRelays, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsUsingP2PRelays::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.IsValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsValid final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsValid) == 0x000008, "Wrong alignment on SteamUtilities_IsValid");
static_assert(sizeof(SteamUtilities_IsValid) == 0x000010, "Wrong size on SteamUtilities_IsValid");
static_assert(offsetof(SteamUtilities_IsValid, SteamID) == 0x000000, "Member 'SteamUtilities_IsValid::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsValid::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.K2_HexToBytes
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_K2_HexToBytes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_K2_HexToBytes) == 0x000008, "Wrong alignment on SteamUtilities_K2_HexToBytes");
static_assert(sizeof(SteamUtilities_K2_HexToBytes) == 0x000020, "Wrong size on SteamUtilities_K2_HexToBytes");
static_assert(offsetof(SteamUtilities_K2_HexToBytes, String) == 0x000000, "Member 'SteamUtilities_K2_HexToBytes::String' has a wrong offset!");
static_assert(offsetof(SteamUtilities_K2_HexToBytes, ReturnValue) == 0x000010, "Member 'SteamUtilities_K2_HexToBytes::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.K2_HexToString
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_K2_HexToString final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_K2_HexToString) == 0x000008, "Wrong alignment on SteamUtilities_K2_HexToString");
static_assert(sizeof(SteamUtilities_K2_HexToString) == 0x000020, "Wrong size on SteamUtilities_K2_HexToString");
static_assert(offsetof(SteamUtilities_K2_HexToString, Array) == 0x000000, "Member 'SteamUtilities_K2_HexToString::Array' has a wrong offset!");
static_assert(offsetof(SteamUtilities_K2_HexToString, ReturnValue) == 0x000010, "Member 'SteamUtilities_K2_HexToString::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.K2_IsPlayerInSession
// 0x0008 (0x0008 - 0x0000)
struct SteamUtilities_K2_IsPlayerInSession final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_K2_IsPlayerInSession) == 0x000004, "Wrong alignment on SteamUtilities_K2_IsPlayerInSession");
static_assert(sizeof(SteamUtilities_K2_IsPlayerInSession) == 0x000008, "Wrong size on SteamUtilities_K2_IsPlayerInSession");
static_assert(offsetof(SteamUtilities_K2_IsPlayerInSession, LocalUserNum) == 0x000000, "Member 'SteamUtilities_K2_IsPlayerInSession::LocalUserNum' has a wrong offset!");
static_assert(offsetof(SteamUtilities_K2_IsPlayerInSession, ReturnValue) == 0x000004, "Member 'SteamUtilities_K2_IsPlayerInSession::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.ListenForSteamMessages
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_ListenForSteamMessages final
{
public:
	TDelegate<void(ESteamMessageType Type, const class FString& Message)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_ListenForSteamMessages) == 0x000004, "Wrong alignment on SteamUtilities_ListenForSteamMessages");
static_assert(sizeof(SteamUtilities_ListenForSteamMessages) == 0x000010, "Wrong size on SteamUtilities_ListenForSteamMessages");
static_assert(offsetof(SteamUtilities_ListenForSteamMessages, Callback) == 0x000000, "Member 'SteamUtilities_ListenForSteamMessages::Callback' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeBool
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_MakeBool final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamSessionSetting                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeBool) == 0x000008, "Wrong alignment on SteamUtilities_MakeBool");
static_assert(sizeof(SteamUtilities_MakeBool) == 0x000030, "Wrong size on SteamUtilities_MakeBool");
static_assert(offsetof(SteamUtilities_MakeBool, bValue) == 0x000000, "Member 'SteamUtilities_MakeBool::bValue' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeBool, ReturnValue) == 0x000008, "Member 'SteamUtilities_MakeBool::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeInteger
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_MakeInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamSessionSetting                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeInteger) == 0x000008, "Wrong alignment on SteamUtilities_MakeInteger");
static_assert(sizeof(SteamUtilities_MakeInteger) == 0x000030, "Wrong size on SteamUtilities_MakeInteger");
static_assert(offsetof(SteamUtilities_MakeInteger, Value) == 0x000000, "Member 'SteamUtilities_MakeInteger::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeInteger, ReturnValue) == 0x000008, "Member 'SteamUtilities_MakeInteger::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeInventoryUpdateHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeInventoryUpdateHandle final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamInventoryUpdateHandle            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeInventoryUpdateHandle) == 0x000008, "Wrong alignment on SteamUtilities_MakeInventoryUpdateHandle");
static_assert(sizeof(SteamUtilities_MakeInventoryUpdateHandle) == 0x000018, "Wrong size on SteamUtilities_MakeInventoryUpdateHandle");
static_assert(offsetof(SteamUtilities_MakeInventoryUpdateHandle, Value) == 0x000000, "Member 'SteamUtilities_MakeInventoryUpdateHandle::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeInventoryUpdateHandle, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeInventoryUpdateHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakePublishedFileID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakePublishedFileID final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakePublishedFileID) == 0x000008, "Wrong alignment on SteamUtilities_MakePublishedFileID");
static_assert(sizeof(SteamUtilities_MakePublishedFileID) == 0x000018, "Wrong size on SteamUtilities_MakePublishedFileID");
static_assert(offsetof(SteamUtilities_MakePublishedFileID, Value) == 0x000000, "Member 'SteamUtilities_MakePublishedFileID::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakePublishedFileID, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakePublishedFileID::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeSearchBool
// 0x0028 (0x0028 - 0x0000)
struct SteamUtilities_MakeSearchBool final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamSessionSearchSetting             ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSearchBool) == 0x000008, "Wrong alignment on SteamUtilities_MakeSearchBool");
static_assert(sizeof(SteamUtilities_MakeSearchBool) == 0x000028, "Wrong size on SteamUtilities_MakeSearchBool");
static_assert(offsetof(SteamUtilities_MakeSearchBool, bValue) == 0x000000, "Member 'SteamUtilities_MakeSearchBool::bValue' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSearchBool, ReturnValue) == 0x000008, "Member 'SteamUtilities_MakeSearchBool::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeSearchInteger
// 0x0028 (0x0028 - 0x0000)
struct SteamUtilities_MakeSearchInteger final
{
public:
	ESteamComparisonOp                            ComparisonOperator;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamSessionSearchSetting             ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSearchInteger) == 0x000008, "Wrong alignment on SteamUtilities_MakeSearchInteger");
static_assert(sizeof(SteamUtilities_MakeSearchInteger) == 0x000028, "Wrong size on SteamUtilities_MakeSearchInteger");
static_assert(offsetof(SteamUtilities_MakeSearchInteger, ComparisonOperator) == 0x000000, "Member 'SteamUtilities_MakeSearchInteger::ComparisonOperator' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSearchInteger, Value) == 0x000004, "Member 'SteamUtilities_MakeSearchInteger::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSearchInteger, ReturnValue) == 0x000008, "Member 'SteamUtilities_MakeSearchInteger::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeSearchString
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_MakeSearchString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamSessionSearchSetting             ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSearchString) == 0x000008, "Wrong alignment on SteamUtilities_MakeSearchString");
static_assert(sizeof(SteamUtilities_MakeSearchString) == 0x000030, "Wrong size on SteamUtilities_MakeSearchString");
static_assert(offsetof(SteamUtilities_MakeSearchString, Value) == 0x000000, "Member 'SteamUtilities_MakeSearchString::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSearchString, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeSearchString::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeSteamGameID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeSteamGameID final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamGameID                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSteamGameID) == 0x000008, "Wrong alignment on SteamUtilities_MakeSteamGameID");
static_assert(sizeof(SteamUtilities_MakeSteamGameID) == 0x000018, "Wrong size on SteamUtilities_MakeSteamGameID");
static_assert(offsetof(SteamUtilities_MakeSteamGameID, Value) == 0x000000, "Member 'SteamUtilities_MakeSteamGameID::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSteamGameID, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeSteamGameID::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeSteamID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeSteamID final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSteamID) == 0x000008, "Wrong alignment on SteamUtilities_MakeSteamID");
static_assert(sizeof(SteamUtilities_MakeSteamID) == 0x000018, "Wrong size on SteamUtilities_MakeSteamID");
static_assert(offsetof(SteamUtilities_MakeSteamID, Value) == 0x000000, "Member 'SteamUtilities_MakeSteamID::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSteamID, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeSteamID::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeString
// 0x0038 (0x0038 - 0x0000)
struct SteamUtilities_MakeString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamSessionSetting                   ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeString) == 0x000008, "Wrong alignment on SteamUtilities_MakeString");
static_assert(sizeof(SteamUtilities_MakeString) == 0x000038, "Wrong size on SteamUtilities_MakeString");
static_assert(offsetof(SteamUtilities_MakeString, Value) == 0x000000, "Member 'SteamUtilities_MakeString::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeString, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeString::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeTicketHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeTicketHandle final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamTicketHandle                     ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_MakeTicketHandle) == 0x000008, "Wrong alignment on SteamUtilities_MakeTicketHandle");
static_assert(sizeof(SteamUtilities_MakeTicketHandle) == 0x000018, "Wrong size on SteamUtilities_MakeTicketHandle");
static_assert(offsetof(SteamUtilities_MakeTicketHandle, Value) == 0x000000, "Member 'SteamUtilities_MakeTicketHandle::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeTicketHandle, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeTicketHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.MakeUGCHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeUGCHandle final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeUGCHandle) == 0x000008, "Wrong alignment on SteamUtilities_MakeUGCHandle");
static_assert(sizeof(SteamUtilities_MakeUGCHandle) == 0x000018, "Wrong size on SteamUtilities_MakeUGCHandle");
static_assert(offsetof(SteamUtilities_MakeUGCHandle, Value) == 0x000000, "Member 'SteamUtilities_MakeUGCHandle::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeUGCHandle, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeUGCHandle::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.NotEqual
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_NotEqual final
{
public:
	struct FSteamID                               A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_NotEqual) == 0x000008, "Wrong alignment on SteamUtilities_NotEqual");
static_assert(sizeof(SteamUtilities_NotEqual) == 0x000018, "Wrong size on SteamUtilities_NotEqual");
static_assert(offsetof(SteamUtilities_NotEqual, A) == 0x000000, "Member 'SteamUtilities_NotEqual::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_NotEqual, B) == 0x000008, "Member 'SteamUtilities_NotEqual::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_NotEqual, ReturnValue) == 0x000010, "Member 'SteamUtilities_NotEqual::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.PublishedFileID_Equals
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_PublishedFileID_Equals final
{
public:
	struct FPublishedFileID                       A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_PublishedFileID_Equals) == 0x000008, "Wrong alignment on SteamUtilities_PublishedFileID_Equals");
static_assert(sizeof(SteamUtilities_PublishedFileID_Equals) == 0x000018, "Wrong size on SteamUtilities_PublishedFileID_Equals");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals, A) == 0x000000, "Member 'SteamUtilities_PublishedFileID_Equals::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals, B) == 0x000008, "Member 'SteamUtilities_PublishedFileID_Equals::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals, ReturnValue) == 0x000010, "Member 'SteamUtilities_PublishedFileID_Equals::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.PublishedFileID_Equals_Exec
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_PublishedFileID_Equals_Exec final
{
public:
	struct FPublishedFileID                       A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreIdentical                           Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_PublishedFileID_Equals_Exec) == 0x000008, "Wrong alignment on SteamUtilities_PublishedFileID_Equals_Exec");
static_assert(sizeof(SteamUtilities_PublishedFileID_Equals_Exec) == 0x000018, "Wrong size on SteamUtilities_PublishedFileID_Equals_Exec");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals_Exec, A) == 0x000000, "Member 'SteamUtilities_PublishedFileID_Equals_Exec::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals_Exec, B) == 0x000008, "Member 'SteamUtilities_PublishedFileID_Equals_Exec::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals_Exec, Result) == 0x000010, "Member 'SteamUtilities_PublishedFileID_Equals_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.PublishedFileID_NotEquals
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_PublishedFileID_NotEquals final
{
public:
	struct FPublishedFileID                       A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_PublishedFileID_NotEquals) == 0x000008, "Wrong alignment on SteamUtilities_PublishedFileID_NotEquals");
static_assert(sizeof(SteamUtilities_PublishedFileID_NotEquals) == 0x000018, "Wrong size on SteamUtilities_PublishedFileID_NotEquals");
static_assert(offsetof(SteamUtilities_PublishedFileID_NotEquals, A) == 0x000000, "Member 'SteamUtilities_PublishedFileID_NotEquals::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_NotEquals, B) == 0x000008, "Member 'SteamUtilities_PublishedFileID_NotEquals::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_NotEquals, ReturnValue) == 0x000010, "Member 'SteamUtilities_PublishedFileID_NotEquals::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.ReadFileToBytes
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_ReadFileToBytes final
{
public:
	class FString                                 AbsoluteFilePath;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_ReadFileToBytes) == 0x000008, "Wrong alignment on SteamUtilities_ReadFileToBytes");
static_assert(sizeof(SteamUtilities_ReadFileToBytes) == 0x000020, "Wrong size on SteamUtilities_ReadFileToBytes");
static_assert(offsetof(SteamUtilities_ReadFileToBytes, AbsoluteFilePath) == 0x000000, "Member 'SteamUtilities_ReadFileToBytes::AbsoluteFilePath' has a wrong offset!");
static_assert(offsetof(SteamUtilities_ReadFileToBytes, ReturnValue) == 0x000010, "Member 'SteamUtilities_ReadFileToBytes::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.SteamItemInstanceID_Equals
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_SteamItemInstanceID_Equals final
{
public:
	struct FSteamItemInstanceID                   A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_SteamItemInstanceID_Equals) == 0x000008, "Wrong alignment on SteamUtilities_SteamItemInstanceID_Equals");
static_assert(sizeof(SteamUtilities_SteamItemInstanceID_Equals) == 0x000018, "Wrong size on SteamUtilities_SteamItemInstanceID_Equals");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals, A) == 0x000000, "Member 'SteamUtilities_SteamItemInstanceID_Equals::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals, B) == 0x000008, "Member 'SteamUtilities_SteamItemInstanceID_Equals::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals, ReturnValue) == 0x000010, "Member 'SteamUtilities_SteamItemInstanceID_Equals::ReturnValue' has a wrong offset!");

// Function SteamCore.SteamUtilities.SteamItemInstanceID_Equals_Exec
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_SteamItemInstanceID_Equals_Exec final
{
public:
	struct FSteamItemInstanceID                   A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreIdentical                           Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_SteamItemInstanceID_Equals_Exec) == 0x000008, "Wrong alignment on SteamUtilities_SteamItemInstanceID_Equals_Exec");
static_assert(sizeof(SteamUtilities_SteamItemInstanceID_Equals_Exec) == 0x000018, "Wrong size on SteamUtilities_SteamItemInstanceID_Equals_Exec");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals_Exec, A) == 0x000000, "Member 'SteamUtilities_SteamItemInstanceID_Equals_Exec::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals_Exec, B) == 0x000008, "Member 'SteamUtilities_SteamItemInstanceID_Equals_Exec::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals_Exec, Result) == 0x000010, "Member 'SteamUtilities_SteamItemInstanceID_Equals_Exec::Result' has a wrong offset!");

// Function SteamCore.SteamUtilities.WriteBytesToFile
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_WriteBytesToFile final
{
public:
	bool                                          bOverwriteIfExists;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbsoluteFilePath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataBuffer;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_WriteBytesToFile) == 0x000008, "Wrong alignment on SteamUtilities_WriteBytesToFile");
static_assert(sizeof(SteamUtilities_WriteBytesToFile) == 0x000030, "Wrong size on SteamUtilities_WriteBytesToFile");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, bOverwriteIfExists) == 0x000000, "Member 'SteamUtilities_WriteBytesToFile::bOverwriteIfExists' has a wrong offset!");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, AbsoluteFilePath) == 0x000008, "Member 'SteamUtilities_WriteBytesToFile::AbsoluteFilePath' has a wrong offset!");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, DataBuffer) == 0x000018, "Member 'SteamUtilities_WriteBytesToFile::DataBuffer' has a wrong offset!");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, ReturnValue) == 0x000028, "Member 'SteamUtilities_WriteBytesToFile::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.BOverlayNeedsPresent
// 0x0001 (0x0001 - 0x0000)
struct Utils_BOverlayNeedsPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_BOverlayNeedsPresent) == 0x000001, "Wrong alignment on Utils_BOverlayNeedsPresent");
static_assert(sizeof(Utils_BOverlayNeedsPresent) == 0x000001, "Wrong size on Utils_BOverlayNeedsPresent");
static_assert(offsetof(Utils_BOverlayNeedsPresent, ReturnValue) == 0x000000, "Member 'Utils_BOverlayNeedsPresent::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetAppID
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetAppID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetAppID) == 0x000004, "Wrong alignment on Utils_GetAppID");
static_assert(sizeof(Utils_GetAppID) == 0x000004, "Wrong size on Utils_GetAppID");
static_assert(offsetof(Utils_GetAppID, ReturnValue) == 0x000000, "Member 'Utils_GetAppID::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetAppID_Pure
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetAppID_Pure final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetAppID_Pure) == 0x000004, "Wrong alignment on Utils_GetAppID_Pure");
static_assert(sizeof(Utils_GetAppID_Pure) == 0x000004, "Wrong size on Utils_GetAppID_Pure");
static_assert(offsetof(Utils_GetAppID_Pure, ReturnValue) == 0x000000, "Member 'Utils_GetAppID_Pure::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetConnectedUniverse
// 0x0001 (0x0001 - 0x0000)
struct Utils_GetConnectedUniverse final
{
public:
	ESteamUniverse                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetConnectedUniverse) == 0x000001, "Wrong alignment on Utils_GetConnectedUniverse");
static_assert(sizeof(Utils_GetConnectedUniverse) == 0x000001, "Wrong size on Utils_GetConnectedUniverse");
static_assert(offsetof(Utils_GetConnectedUniverse, ReturnValue) == 0x000000, "Member 'Utils_GetConnectedUniverse::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetCurrentBatteryPower
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetCurrentBatteryPower final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetCurrentBatteryPower) == 0x000004, "Wrong alignment on Utils_GetCurrentBatteryPower");
static_assert(sizeof(Utils_GetCurrentBatteryPower) == 0x000004, "Wrong size on Utils_GetCurrentBatteryPower");
static_assert(offsetof(Utils_GetCurrentBatteryPower, ReturnValue) == 0x000000, "Member 'Utils_GetCurrentBatteryPower::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetEnteredGamepadTextInput
// 0x0018 (0x0018 - 0x0000)
struct Utils_GetEnteredGamepadTextInput final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Utils_GetEnteredGamepadTextInput) == 0x000008, "Wrong alignment on Utils_GetEnteredGamepadTextInput");
static_assert(sizeof(Utils_GetEnteredGamepadTextInput) == 0x000018, "Wrong size on Utils_GetEnteredGamepadTextInput");
static_assert(offsetof(Utils_GetEnteredGamepadTextInput, Text) == 0x000000, "Member 'Utils_GetEnteredGamepadTextInput::Text' has a wrong offset!");
static_assert(offsetof(Utils_GetEnteredGamepadTextInput, ReturnValue) == 0x000010, "Member 'Utils_GetEnteredGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetEnteredGamepadTextLength
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetEnteredGamepadTextLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetEnteredGamepadTextLength) == 0x000004, "Wrong alignment on Utils_GetEnteredGamepadTextLength");
static_assert(sizeof(Utils_GetEnteredGamepadTextLength) == 0x000004, "Wrong size on Utils_GetEnteredGamepadTextLength");
static_assert(offsetof(Utils_GetEnteredGamepadTextLength, ReturnValue) == 0x000000, "Member 'Utils_GetEnteredGamepadTextLength::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetImageRGBA
// 0x0020 (0x0020 - 0x0000)
struct Utils_GetImageRGBA final
{
public:
	int32                                         IImage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OutBuffer;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Utils_GetImageRGBA) == 0x000008, "Wrong alignment on Utils_GetImageRGBA");
static_assert(sizeof(Utils_GetImageRGBA) == 0x000020, "Wrong size on Utils_GetImageRGBA");
static_assert(offsetof(Utils_GetImageRGBA, IImage) == 0x000000, "Member 'Utils_GetImageRGBA::IImage' has a wrong offset!");
static_assert(offsetof(Utils_GetImageRGBA, OutBuffer) == 0x000008, "Member 'Utils_GetImageRGBA::OutBuffer' has a wrong offset!");
static_assert(offsetof(Utils_GetImageRGBA, ReturnValue) == 0x000018, "Member 'Utils_GetImageRGBA::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetImageSize
// 0x0010 (0x0010 - 0x0000)
struct Utils_GetImageSize final
{
public:
	int32                                         IImage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Utils_GetImageSize) == 0x000004, "Wrong alignment on Utils_GetImageSize");
static_assert(sizeof(Utils_GetImageSize) == 0x000010, "Wrong size on Utils_GetImageSize");
static_assert(offsetof(Utils_GetImageSize, IImage) == 0x000000, "Member 'Utils_GetImageSize::IImage' has a wrong offset!");
static_assert(offsetof(Utils_GetImageSize, Width) == 0x000004, "Member 'Utils_GetImageSize::Width' has a wrong offset!");
static_assert(offsetof(Utils_GetImageSize, Height) == 0x000008, "Member 'Utils_GetImageSize::Height' has a wrong offset!");
static_assert(offsetof(Utils_GetImageSize, ReturnValue) == 0x00000C, "Member 'Utils_GetImageSize::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetIPCCallCount
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetIPCCallCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetIPCCallCount) == 0x000004, "Wrong alignment on Utils_GetIPCCallCount");
static_assert(sizeof(Utils_GetIPCCallCount) == 0x000004, "Wrong size on Utils_GetIPCCallCount");
static_assert(offsetof(Utils_GetIPCCallCount, ReturnValue) == 0x000000, "Member 'Utils_GetIPCCallCount::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetIPCountry
// 0x0010 (0x0010 - 0x0000)
struct Utils_GetIPCountry final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetIPCountry) == 0x000008, "Wrong alignment on Utils_GetIPCountry");
static_assert(sizeof(Utils_GetIPCountry) == 0x000010, "Wrong size on Utils_GetIPCountry");
static_assert(offsetof(Utils_GetIPCountry, ReturnValue) == 0x000000, "Member 'Utils_GetIPCountry::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetSecondsSinceAppActive
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetSecondsSinceAppActive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetSecondsSinceAppActive) == 0x000004, "Wrong alignment on Utils_GetSecondsSinceAppActive");
static_assert(sizeof(Utils_GetSecondsSinceAppActive) == 0x000004, "Wrong size on Utils_GetSecondsSinceAppActive");
static_assert(offsetof(Utils_GetSecondsSinceAppActive, ReturnValue) == 0x000000, "Member 'Utils_GetSecondsSinceAppActive::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetSecondsSinceComputerActive
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetSecondsSinceComputerActive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetSecondsSinceComputerActive) == 0x000004, "Wrong alignment on Utils_GetSecondsSinceComputerActive");
static_assert(sizeof(Utils_GetSecondsSinceComputerActive) == 0x000004, "Wrong size on Utils_GetSecondsSinceComputerActive");
static_assert(offsetof(Utils_GetSecondsSinceComputerActive, ReturnValue) == 0x000000, "Member 'Utils_GetSecondsSinceComputerActive::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetServerRealTime
// 0x0004 (0x0004 - 0x0000)
struct Utils_GetServerRealTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetServerRealTime) == 0x000004, "Wrong alignment on Utils_GetServerRealTime");
static_assert(sizeof(Utils_GetServerRealTime) == 0x000004, "Wrong size on Utils_GetServerRealTime");
static_assert(offsetof(Utils_GetServerRealTime, ReturnValue) == 0x000000, "Member 'Utils_GetServerRealTime::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.GetSteamUILanguage
// 0x0010 (0x0010 - 0x0000)
struct Utils_GetSteamUILanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_GetSteamUILanguage) == 0x000008, "Wrong alignment on Utils_GetSteamUILanguage");
static_assert(sizeof(Utils_GetSteamUILanguage) == 0x000010, "Wrong size on Utils_GetSteamUILanguage");
static_assert(offsetof(Utils_GetSteamUILanguage, ReturnValue) == 0x000000, "Member 'Utils_GetSteamUILanguage::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.InitFilterText
// 0x0001 (0x0001 - 0x0000)
struct Utils_InitFilterText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_InitFilterText) == 0x000001, "Wrong alignment on Utils_InitFilterText");
static_assert(sizeof(Utils_InitFilterText) == 0x000001, "Wrong size on Utils_InitFilterText");
static_assert(offsetof(Utils_InitFilterText, ReturnValue) == 0x000000, "Member 'Utils_InitFilterText::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.IsOverlayEnabled
// 0x0001 (0x0001 - 0x0000)
struct Utils_IsOverlayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_IsOverlayEnabled) == 0x000001, "Wrong alignment on Utils_IsOverlayEnabled");
static_assert(sizeof(Utils_IsOverlayEnabled) == 0x000001, "Wrong size on Utils_IsOverlayEnabled");
static_assert(offsetof(Utils_IsOverlayEnabled, ReturnValue) == 0x000000, "Member 'Utils_IsOverlayEnabled::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.IsSteamChinaLauncher
// 0x0001 (0x0001 - 0x0000)
struct Utils_IsSteamChinaLauncher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_IsSteamChinaLauncher) == 0x000001, "Wrong alignment on Utils_IsSteamChinaLauncher");
static_assert(sizeof(Utils_IsSteamChinaLauncher) == 0x000001, "Wrong size on Utils_IsSteamChinaLauncher");
static_assert(offsetof(Utils_IsSteamChinaLauncher, ReturnValue) == 0x000000, "Member 'Utils_IsSteamChinaLauncher::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.IsSteamInBigPictureMode
// 0x0001 (0x0001 - 0x0000)
struct Utils_IsSteamInBigPictureMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_IsSteamInBigPictureMode) == 0x000001, "Wrong alignment on Utils_IsSteamInBigPictureMode");
static_assert(sizeof(Utils_IsSteamInBigPictureMode) == 0x000001, "Wrong size on Utils_IsSteamInBigPictureMode");
static_assert(offsetof(Utils_IsSteamInBigPictureMode, ReturnValue) == 0x000000, "Member 'Utils_IsSteamInBigPictureMode::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.IsSteamRunningInVR
// 0x0001 (0x0001 - 0x0000)
struct Utils_IsSteamRunningInVR final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_IsSteamRunningInVR) == 0x000001, "Wrong alignment on Utils_IsSteamRunningInVR");
static_assert(sizeof(Utils_IsSteamRunningInVR) == 0x000001, "Wrong size on Utils_IsSteamRunningInVR");
static_assert(offsetof(Utils_IsSteamRunningInVR, ReturnValue) == 0x000000, "Member 'Utils_IsSteamRunningInVR::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.IsVRHeadsetStreamingEnabled
// 0x0001 (0x0001 - 0x0000)
struct Utils_IsVRHeadsetStreamingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_IsVRHeadsetStreamingEnabled) == 0x000001, "Wrong alignment on Utils_IsVRHeadsetStreamingEnabled");
static_assert(sizeof(Utils_IsVRHeadsetStreamingEnabled) == 0x000001, "Wrong size on Utils_IsVRHeadsetStreamingEnabled");
static_assert(offsetof(Utils_IsVRHeadsetStreamingEnabled, ReturnValue) == 0x000000, "Member 'Utils_IsVRHeadsetStreamingEnabled::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.SetOverlayNotificationInset
// 0x0008 (0x0008 - 0x0000)
struct Utils_SetOverlayNotificationInset final
{
public:
	int32                                         HorizontalInset;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerticalInset;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_SetOverlayNotificationInset) == 0x000004, "Wrong alignment on Utils_SetOverlayNotificationInset");
static_assert(sizeof(Utils_SetOverlayNotificationInset) == 0x000008, "Wrong size on Utils_SetOverlayNotificationInset");
static_assert(offsetof(Utils_SetOverlayNotificationInset, HorizontalInset) == 0x000000, "Member 'Utils_SetOverlayNotificationInset::HorizontalInset' has a wrong offset!");
static_assert(offsetof(Utils_SetOverlayNotificationInset, VerticalInset) == 0x000004, "Member 'Utils_SetOverlayNotificationInset::VerticalInset' has a wrong offset!");

// Function SteamCore.Utils.SetOverlayNotificationPosition
// 0x0001 (0x0001 - 0x0000)
struct Utils_SetOverlayNotificationPosition final
{
public:
	ESteamNotificationPosition                    NotificationPosition;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_SetOverlayNotificationPosition) == 0x000001, "Wrong alignment on Utils_SetOverlayNotificationPosition");
static_assert(sizeof(Utils_SetOverlayNotificationPosition) == 0x000001, "Wrong size on Utils_SetOverlayNotificationPosition");
static_assert(offsetof(Utils_SetOverlayNotificationPosition, NotificationPosition) == 0x000000, "Member 'Utils_SetOverlayNotificationPosition::NotificationPosition' has a wrong offset!");

// Function SteamCore.Utils.SetVRHeadsetStreamingEnabled
// 0x0001 (0x0001 - 0x0000)
struct Utils_SetVRHeadsetStreamingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_SetVRHeadsetStreamingEnabled) == 0x000001, "Wrong alignment on Utils_SetVRHeadsetStreamingEnabled");
static_assert(sizeof(Utils_SetVRHeadsetStreamingEnabled) == 0x000001, "Wrong size on Utils_SetVRHeadsetStreamingEnabled");
static_assert(offsetof(Utils_SetVRHeadsetStreamingEnabled, bEnabled) == 0x000000, "Member 'Utils_SetVRHeadsetStreamingEnabled::bEnabled' has a wrong offset!");

// Function SteamCore.Utils.ShowGamepadTextInput
// 0x0038 (0x0038 - 0x0000)
struct Utils_ShowGamepadTextInput final
{
public:
	ESteamGamepadTextInputMode                    InputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGamepadTextInputLineMode                LineInputMode;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharMax;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExistingText;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Utils_ShowGamepadTextInput) == 0x000008, "Wrong alignment on Utils_ShowGamepadTextInput");
static_assert(sizeof(Utils_ShowGamepadTextInput) == 0x000038, "Wrong size on Utils_ShowGamepadTextInput");
static_assert(offsetof(Utils_ShowGamepadTextInput, InputMode) == 0x000000, "Member 'Utils_ShowGamepadTextInput::InputMode' has a wrong offset!");
static_assert(offsetof(Utils_ShowGamepadTextInput, LineInputMode) == 0x000001, "Member 'Utils_ShowGamepadTextInput::LineInputMode' has a wrong offset!");
static_assert(offsetof(Utils_ShowGamepadTextInput, Description) == 0x000008, "Member 'Utils_ShowGamepadTextInput::Description' has a wrong offset!");
static_assert(offsetof(Utils_ShowGamepadTextInput, CharMax) == 0x000018, "Member 'Utils_ShowGamepadTextInput::CharMax' has a wrong offset!");
static_assert(offsetof(Utils_ShowGamepadTextInput, ExistingText) == 0x000020, "Member 'Utils_ShowGamepadTextInput::ExistingText' has a wrong offset!");
static_assert(offsetof(Utils_ShowGamepadTextInput, ReturnValue) == 0x000030, "Member 'Utils_ShowGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamCore.Utils.IsSteamRunningOnSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct Utils_IsSteamRunningOnSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Utils_IsSteamRunningOnSteamDeck) == 0x000001, "Wrong alignment on Utils_IsSteamRunningOnSteamDeck");
static_assert(sizeof(Utils_IsSteamRunningOnSteamDeck) == 0x000001, "Wrong size on Utils_IsSteamRunningOnSteamDeck");
static_assert(offsetof(Utils_IsSteamRunningOnSteamDeck, ReturnValue) == 0x000000, "Member 'Utils_IsSteamRunningOnSteamDeck::ReturnValue' has a wrong offset!");

// Function SteamCore.Video.GetOPFSettings
// 0x0004 (0x0004 - 0x0000)
struct Video_GetOPFSettings final
{
public:
	int32                                         VideoAppID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Video_GetOPFSettings) == 0x000004, "Wrong alignment on Video_GetOPFSettings");
static_assert(sizeof(Video_GetOPFSettings) == 0x000004, "Wrong size on Video_GetOPFSettings");
static_assert(offsetof(Video_GetOPFSettings, VideoAppID) == 0x000000, "Member 'Video_GetOPFSettings::VideoAppID' has a wrong offset!");

// Function SteamCore.Video.GetOPFStringForApp
// 0x0020 (0x0020 - 0x0000)
struct Video_GetOPFStringForApp final
{
public:
	int32                                         VideoAppID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutBuffer;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Video_GetOPFStringForApp) == 0x000008, "Wrong alignment on Video_GetOPFStringForApp");
static_assert(sizeof(Video_GetOPFStringForApp) == 0x000020, "Wrong size on Video_GetOPFStringForApp");
static_assert(offsetof(Video_GetOPFStringForApp, VideoAppID) == 0x000000, "Member 'Video_GetOPFStringForApp::VideoAppID' has a wrong offset!");
static_assert(offsetof(Video_GetOPFStringForApp, OutBuffer) == 0x000008, "Member 'Video_GetOPFStringForApp::OutBuffer' has a wrong offset!");
static_assert(offsetof(Video_GetOPFStringForApp, ReturnValue) == 0x000018, "Member 'Video_GetOPFStringForApp::ReturnValue' has a wrong offset!");

// Function SteamCore.Video.GetVideoURL
// 0x0004 (0x0004 - 0x0000)
struct Video_GetVideoURL final
{
public:
	int32                                         VideoAppID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Video_GetVideoURL) == 0x000004, "Wrong alignment on Video_GetVideoURL");
static_assert(sizeof(Video_GetVideoURL) == 0x000004, "Wrong size on Video_GetVideoURL");
static_assert(offsetof(Video_GetVideoURL, VideoAppID) == 0x000000, "Member 'Video_GetVideoURL::VideoAppID' has a wrong offset!");

// Function SteamCore.Video.IsBroadcasting
// 0x0008 (0x0008 - 0x0000)
struct Video_IsBroadcasting final
{
public:
	int32                                         NumViewers;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Video_IsBroadcasting) == 0x000004, "Wrong alignment on Video_IsBroadcasting");
static_assert(sizeof(Video_IsBroadcasting) == 0x000008, "Wrong size on Video_IsBroadcasting");
static_assert(offsetof(Video_IsBroadcasting, NumViewers) == 0x000000, "Member 'Video_IsBroadcasting::NumViewers' has a wrong offset!");
static_assert(offsetof(Video_IsBroadcasting, ReturnValue) == 0x000004, "Member 'Video_IsBroadcasting::ReturnValue' has a wrong offset!");

}

