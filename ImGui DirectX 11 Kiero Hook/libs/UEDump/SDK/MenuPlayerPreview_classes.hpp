#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MenuPlayerPreview

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ShopItemCategory_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MenuPlayerPreview.MenuPlayerPreview_C
// 0x00A8 (0x0328 - 0x0280)
class AMenuPlayerPreview_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   EmoteChildActor;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ArmorMesh;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Mask;                                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Name_location;                                     // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AMainMenuPlayer_C*                      OwnerPlayer;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ARobberController_C*                    As_Robber_Controller;                              // 0x02C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UClass*>                         Mask_Equipped;                                     // 0x02C8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          PlayerLoaded_;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Armor;                                             // 0x02E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class UClass*>                         Outfit;                                            // 0x02F0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class UPlayerNameInfo_C*                      InfoWidget;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Skin_ColorVar;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emoting_;                                          // 0x0310(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      EmoteAnim;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EmoteActor;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MenuPlayerPreview(int32 EntryPoint);
	void StartEmote();
	void AddWidget();
	void SetNotHidden();
	void RefreshInventory();
	void UpdatePlayerItems();
	void SetPlayerItems();
	void RefreshPlayer();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PreviewItem(class UClass* ItemInfo, int32 SalePrice);
	void CancelDrag();
	void DragItemFromCategory(EShopItemCategory Category);
	void ChangeCategory(EShopItemCategory Category);
	void RemoveloadoutCategory();
	void Remove();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MenuPlayerPreview_C">();
	}
	static class AMenuPlayerPreview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuPlayerPreview_C>();
	}
};
static_assert(alignof(AMenuPlayerPreview_C) == 0x000008, "Wrong alignment on AMenuPlayerPreview_C");
static_assert(sizeof(AMenuPlayerPreview_C) == 0x000328, "Wrong size on AMenuPlayerPreview_C");
static_assert(offsetof(AMenuPlayerPreview_C, UberGraphFrame) == 0x000280, "Member 'AMenuPlayerPreview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, EmoteChildActor) == 0x000288, "Member 'AMenuPlayerPreview_C::EmoteChildActor' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, ArmorMesh) == 0x000290, "Member 'AMenuPlayerPreview_C::ArmorMesh' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, Mask) == 0x000298, "Member 'AMenuPlayerPreview_C::Mask' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, Name_location) == 0x0002A0, "Member 'AMenuPlayerPreview_C::Name_location' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, SkeletalMesh) == 0x0002A8, "Member 'AMenuPlayerPreview_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, DefaultSceneRoot) == 0x0002B0, "Member 'AMenuPlayerPreview_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, OwnerPlayer) == 0x0002B8, "Member 'AMenuPlayerPreview_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, As_Robber_Controller) == 0x0002C0, "Member 'AMenuPlayerPreview_C::As_Robber_Controller' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, Mask_Equipped) == 0x0002C8, "Member 'AMenuPlayerPreview_C::Mask_Equipped' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, PlayerLoaded_) == 0x0002D8, "Member 'AMenuPlayerPreview_C::PlayerLoaded_' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, Armor) == 0x0002E0, "Member 'AMenuPlayerPreview_C::Armor' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, Outfit) == 0x0002F0, "Member 'AMenuPlayerPreview_C::Outfit' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, InfoWidget) == 0x000300, "Member 'AMenuPlayerPreview_C::InfoWidget' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, Skin_ColorVar) == 0x000308, "Member 'AMenuPlayerPreview_C::Skin_ColorVar' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, Emoting_) == 0x000310, "Member 'AMenuPlayerPreview_C::Emoting_' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, EmoteAnim) == 0x000318, "Member 'AMenuPlayerPreview_C::EmoteAnim' has a wrong offset!");
static_assert(offsetof(AMenuPlayerPreview_C, EmoteActor) == 0x000320, "Member 'AMenuPlayerPreview_C::EmoteActor' has a wrong offset!");

}

