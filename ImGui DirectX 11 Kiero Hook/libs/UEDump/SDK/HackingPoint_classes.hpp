#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HackingPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass HackingPoint.HackingPoint_C
// 0x0090 (0x02B0 - 0x0220)
class AHackingPoint_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAlertComponent_C*                      AlertComponent;                                    // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       KeycardOverlapper;                                 // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpottedHighlightcomponent_C*           SpottedHighlightcomponent;                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHoldingInteractComponent_C*            HoldingInteractComponent;                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HackedActors;                                      // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	bool                                          CanOnlyHackOnce_;                                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HackCooldown;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 HackingMinigame;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HasHacked_;                                        // 0x0288(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            HighlightedMesh;                                   // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         KeycardNumber;                                     // 0x0298(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem_Keycard_C*                        As_Item_Keycard;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disabled_;                                         // 0x02A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanUseAfterAlarm_;                                 // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_HackingPoint(int32 EntryPoint);
	void BndEvt__HackingPoint_AlertComponent_K2Node_ComponentBoundEvent_0_OnAlarmtriggered__DelegateSignature();
	void BndEvt__HackingPoint_KeycardOverlapper_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void KeycardLight(bool Correct_);
	void CheckKeycard(class AActor* Actor);
	void HackItem();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HackingPoint_C">();
	}
	static class AHackingPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHackingPoint_C>();
	}
};
static_assert(alignof(AHackingPoint_C) == 0x000008, "Wrong alignment on AHackingPoint_C");
static_assert(sizeof(AHackingPoint_C) == 0x0002B0, "Wrong size on AHackingPoint_C");
static_assert(offsetof(AHackingPoint_C, UberGraphFrame) == 0x000220, "Member 'AHackingPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, AlertComponent) == 0x000228, "Member 'AHackingPoint_C::AlertComponent' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, KeycardOverlapper) == 0x000230, "Member 'AHackingPoint_C::KeycardOverlapper' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, PointLight) == 0x000238, "Member 'AHackingPoint_C::PointLight' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, SpottedHighlightcomponent) == 0x000240, "Member 'AHackingPoint_C::SpottedHighlightcomponent' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, StaticMesh) == 0x000248, "Member 'AHackingPoint_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, Sphere) == 0x000250, "Member 'AHackingPoint_C::Sphere' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, HoldingInteractComponent) == 0x000258, "Member 'AHackingPoint_C::HoldingInteractComponent' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, DefaultSceneRoot) == 0x000260, "Member 'AHackingPoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, HackedActors) == 0x000268, "Member 'AHackingPoint_C::HackedActors' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, CanOnlyHackOnce_) == 0x000278, "Member 'AHackingPoint_C::CanOnlyHackOnce_' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, HackCooldown) == 0x00027C, "Member 'AHackingPoint_C::HackCooldown' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, HackingMinigame) == 0x000280, "Member 'AHackingPoint_C::HackingMinigame' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, HasHacked_) == 0x000288, "Member 'AHackingPoint_C::HasHacked_' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, HighlightedMesh) == 0x000290, "Member 'AHackingPoint_C::HighlightedMesh' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, KeycardNumber) == 0x000298, "Member 'AHackingPoint_C::KeycardNumber' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, As_Item_Keycard) == 0x0002A0, "Member 'AHackingPoint_C::As_Item_Keycard' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, Disabled_) == 0x0002A8, "Member 'AHackingPoint_C::Disabled_' has a wrong offset!");
static_assert(offsetof(AHackingPoint_C, CanUseAfterAlarm_) == 0x0002A9, "Member 'AHackingPoint_C::CanUseAfterAlarm_' has a wrong offset!");

}

