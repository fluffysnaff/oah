#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GuardPatrolPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GuardPatrolPoint.GuardPatrolPoint_C
// 0x0060 (0x0280 - 0x0220)
class AGuardPatrolPoint_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ANPC_Guard_C*                           PatrollingGuard;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         PointNumber;                                       // 0x0248(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x024C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Stream;                                            // 0x025C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	struct FRotator                               Rotation;                                          // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequenceBase*                      PointAnimation;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AnimDelay;                                         // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Stop_time;                                         // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GuardPatrolPoint(int32 EntryPoint);
	void Play_animation();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GuardPatrolPoint_C">();
	}
	static class AGuardPatrolPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGuardPatrolPoint_C>();
	}
};
static_assert(alignof(AGuardPatrolPoint_C) == 0x000008, "Wrong alignment on AGuardPatrolPoint_C");
static_assert(sizeof(AGuardPatrolPoint_C) == 0x000280, "Wrong size on AGuardPatrolPoint_C");
static_assert(offsetof(AGuardPatrolPoint_C, UberGraphFrame) == 0x000220, "Member 'AGuardPatrolPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, Arrow) == 0x000228, "Member 'AGuardPatrolPoint_C::Arrow' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, Sphere) == 0x000230, "Member 'AGuardPatrolPoint_C::Sphere' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, DefaultSceneRoot) == 0x000238, "Member 'AGuardPatrolPoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, PatrollingGuard) == 0x000240, "Member 'AGuardPatrolPoint_C::PatrollingGuard' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, PointNumber) == 0x000248, "Member 'AGuardPatrolPoint_C::PointNumber' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, Color) == 0x00024C, "Member 'AGuardPatrolPoint_C::Color' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, Stream) == 0x00025C, "Member 'AGuardPatrolPoint_C::Stream' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, Rotation) == 0x000264, "Member 'AGuardPatrolPoint_C::Rotation' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, PointAnimation) == 0x000270, "Member 'AGuardPatrolPoint_C::PointAnimation' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, AnimDelay) == 0x000278, "Member 'AGuardPatrolPoint_C::AnimDelay' has a wrong offset!");
static_assert(offsetof(AGuardPatrolPoint_C, Stop_time) == 0x00027C, "Member 'AGuardPatrolPoint_C::Stop_time' has a wrong offset!");

}

