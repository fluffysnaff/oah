#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerCharacter

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SettingsStruct_structs.hpp"
#include "AttachmentArrayStructure_structs.hpp"
#include "SteamCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerCharacter.PlayerCharacter_C
// 0x03A0 (0x0860 - 0x04C0)
class APlayerCharacter_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USteamAchievementComponent_C*           SteamAchievementComponent;                         // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EmoteChildActor;                                   // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpottedHighlightcomponent_C*           SpottedHighlightcomponent;                         // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VoiceComponent;                                    // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        HeadArrow;                                         // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle;                                     // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USmoothSync*                            SmoothSync;                                        // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ArmorChildActor;                                   // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        CamDefaultLocation;                                // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   MaskBP;                                            // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent_C*                     DamageComponent;                                   // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractComponent_C*                   InteractComponent;                                 // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnNoiseEmitterComponent*             PawnNoiseEmitter;                                  // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PickupConstraint;                                  // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            HipConstraint;                                     // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            BackConstraint;                                    // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            GunConstraint;                                     // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaRecoil_Alpha_3D9F04844465BEA1882C02A3FE74F206; // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AlphaRecoil__Direction_3D9F04844465BEA1882C02A3FE74F206; // 0x056C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56D[0x3];                                      // 0x056D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AlphaRecoil;                                       // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpRagdoll_Alpha_AB6FC0D041E17D5C68A457A22ACD5368; // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            InterpRagdoll__Direction_AB6FC0D041E17D5C68A457A22ACD5368; // 0x057C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57D[0x3];                                      // 0x057D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     InterpRagdoll;                                     // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LocalRotation;                                     // 0x0588(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CameraRotation;                                    // 0x0594(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AGunBase_C*                             HoldingGun;                                        // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FHitResult                             ShootHit;                                          // 0x05A8(0x0088)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, ContainsInstancedReference)
	bool                                          Shooting_;                                         // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Reloading_;                                        // 0x0631(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         EquippedGuns;                                      // 0x0638(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         EquippedSlot;                                      // 0x0648(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchingGun_;                                     // 0x064C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64D[0x3];                                      // 0x064D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAttachedBackGun_base_C*>        StoredGuns;                                        // 0x0650(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         StartFOV;                                          // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aimed_;                                            // 0x0664(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Sprinting_;                                        // 0x0665(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_666[0x2];                                      // 0x0666(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 GunAmmos;                                          // 0x0668(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ReserveAmmo;                                       // 0x0678(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Unarmed_;                                          // 0x0688(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HoldingActor;                                      // 0x0690(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Hitmarker;                                         // 0x0698(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Health;                                            // 0x06A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loaded;                                            // 0x06AC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Downed_;                                           // 0x06AD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6AE[0x2];                                      // 0x06AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LookingAtName;                                     // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          LeftMouseDown_;                                    // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             MouseButton;                                       // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Reviving_;                                         // 0x06D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9[0x7];                                      // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAttachmentArrayStructure>      GunAttachments;                                    // 0x06E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class UClass*                                 Mask;                                              // 0x06F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ToggleFlash;                                       // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         BurstAmount;                                       // 0x0708(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InWarning_;                                        // 0x070C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSpotted_;                                        // 0x070D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70E[0x2];                                      // 0x070E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentWarningTime;                                // 0x0710(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Armor;                                             // 0x0718(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDUI_C*                               HUDUI;                                             // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crouching_;                                        // 0x0728(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARobberController_C*                    PCController;                                      // 0x0730(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 InteractDescription;                               // 0x0738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Sus_;                                              // 0x0748(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CopsAlerted_;                                      // 0x0749(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Vaulting_;                                         // 0x074A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AllConnected_;                                     // 0x074B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DragginBody_;                                      // 0x074C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74D[0x3];                                      // 0x074D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             WarningAreaDisp;                                   // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Dancing_;                                          // 0x0760(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_761[0x3];                                      // 0x0761(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GainedEXP;                                         // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasLoaded_;                                        // 0x0768(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_769[0x7];                                      // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPauseMenu_C*                           PauseWidget;                                       // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameChat_C*                            ChatWidget;                                        // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SwitchedGun;                                       // 0x0780(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UClass*>                         EquippedTools;                                     // 0x0790(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	bool                                          Escorted_;                                         // 0x07A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ArrestWarning_;                                    // 0x07A1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A2[0x2];                                      // 0x07A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSettingsStruct                        Settings_Struct;                                   // 0x07A4(0x002C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USteamCoreVoice*                        VoiceObj;                                          // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SampleRate;                                        // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7DC[0x4];                                      // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Outfit;                                            // 0x07E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     SkinColorPlayer;                                   // 0x07E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Emote;                                             // 0x07F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerState*>                   NameTaggedPlayerstates;                            // 0x07F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class APlayerCharacter_C*                     Assisting_Player;                                  // 0x0808(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emoting_;                                          // 0x0810(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LoadedWeapons_;                                    // 0x0811(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Slowed_;                                           // 0x0812(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_813[0x1];                                      // 0x0813(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraAmmo_;                                        // 0x0814(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedAccuracy;                                     // 0x0818(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedAimDamage_;                                   // 0x081C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastBulletsExtraDamage;                            // 0x0820(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedLoader_;                                      // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReviveTime;                                        // 0x0828(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxHealth;                                         // 0x082C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedHealSpeed_;                                   // 0x0830(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedArmorHP_;                                     // 0x0834(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedPowerboxSpeed_;                               // 0x0838(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarbedWireAddedSpeed_;                             // 0x083C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageImmunity;                                    // 0x0840(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrillImmunityTime;                                 // 0x0844(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddedGuardPhoneTime;                               // 0x0848(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedCamSpotTime_;                                 // 0x084C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedGuardSpotTime_;                               // 0x0850(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedHacking_;                                     // 0x0854(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReducedReviveDamage_;                              // 0x0858(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void HitMarker__DelegateSignature(const struct FLinearColor& Color);
	void MouseButton__DelegateSignature(bool Clicked_);
	void ToggleFlash__DelegateSignature();
	void WarningAreaDisp__DelegateSignature(class ARestrictedAreaVolume_C* Area, bool Exit_);
	void SwitchedGun__DelegateSignature(int32 Number);
	void ExecuteUbergraph_PlayerCharacter(int32 EntryPoint);
	void GiveImmunityLevel(float Duration);
	void SetupStartStats();
	void SetupSkills();
	void AddCivDeath();
	void SetupUI();
	void OnClientLoaded();
	void FloppyArm();
	void DropItem();
	void SendStats();
	void SetSpeaking(bool Speaking_);
	void SetupVoiceComponent();
	void SetPoliceAlerted(bool Alerted_);
	void UpdateNameTag();
	void SetAppearanceServer();
	void FallDamage(int32 Damage);
	void CheckLose();
	void SendAudioData(const TArray<uint8>& CompressedBuffer);
	void GetAvailableVoice();
	void ReplicateAudio(const TArray<uint8>& Compressed_buffer, const int32 Desired_sample_rate);
	void ReceiveDestroyed();
	void SetInteractDescriptionInterfaceCall(const class FString& InteractDescription_0);
	void HitmarkerInterfaceCall(const struct FLinearColor& Color);
	void TakeDamageInterface(int32 DamageTaken, const struct FVector& Attacker_location, bool ShowDirection_);
	void SpawnToolsServer(const TArray<class UClass*>& Tools);
	void SetupTools();
	void SpawnTools();
	void SetupGunsServer();
	void LoadOnServer();
	void InteractCustom(const struct FHitResult& Hit_result);
	void AddEXP(float Amount);
	void WinGame();
	void OnLoaded();
	void StopDance();
	void Dance();
	void PickupItemMultiHost(const struct FHitResult& Hit);
	void Recoil();
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void VaultMulti();
	void ForceCrouchevent();
	void Vault();
	void CrouchEvent();
	void UnAimEvent();
	void StopSprintEvent();
	void UncrouchEvent();
	void SetReserveBulletsServer(int32 Slot, int32 Amount);
	void OnLanded(const struct FHitResult& Hit);
	void InterpolateRagdollToTarget(bool ShouldCrouch_, float Max_strength);
	void UpdateHandleLocation();
	void SetupWhenLoaded();
	void SetupGunMulti(int32 Slot);
	void SetupGunServer(int32 Slot);
	void SwitchGun_Server();
	void ReloadServer();
	void ReleaseItemEvent();
	void ServerCrouch(bool Crouch_);
	void ShootMulti(const struct FHitResult& Hit_result);
	void MakeFootstepNoise();
	void ReloadAction();
	void AttachArmor();
	void SetupArmor();
	void RemoveWarning(class UWarningDirectionIndicator_C* Widget);
	void RemoveWarningsForever();
	void ShowWarning(class AActor* Guard, float WarningTime);
	void ExitWarningArea(bool Arrest_);
	void EnterWarningArea(bool Arrest_);
	void ChangeMovementSpeed_Server(float Speed);
	void AimServer(bool Aim_);
	void Aim();
	void Burst();
	void ToggleFlashServer();
	void PutMaskOn();
	void SetPlayerLoaded();
	void ForceSwitch(int32 Slot);
	void InteractHolding();
	void BndEvt__PlayerCharacter_DamageComponent_K2Node_ComponentBoundEvent_1_Damage__DelegateSignature(int32 Amount, class FName Bone, const struct FVector& HitLocation, const struct FVector& StartLocation, class AActor* Instigator_0);
	void Temp();
	void StartRevive();
	void SetLeftMouse(bool Down_);
	void ReviveClient();
	void Mousestate(bool Clicked_);
	void StopReviveMulti();
	void LookatTrace();
	void PossesCamera();
	void BndEvt__PlayerCharacter_InteractComponent_K2Node_ComponentBoundEvent_0_Interact__DelegateSignature(class AActor* Player, class UPrimitiveComponent* HitComponent);
	void RevivePlayer(class APlayerCharacter_C* AssistingPlayer);
	void Heal();
	void DownedPlayer();
	void SwitchGunEvent(int32 Slot);
	void TakeDamage(int32 Damage, const struct FVector& AttackerLocation, bool Indicate_direction_, class AActor* Instigator_0);
	void FloppyarmMulti();
	void Rel_item_multi(class AActor* Actor);
	void Rel_Item_server(class AActor* Actor);
	void PickupItemClient(const struct FHitResult& Hit);
	void InteractServer(const struct FHitResult& Hit_result);
	void Interact();
	void Unaim();
	void ApplySettings();
	void SprintServer(bool Sprint_);
	void AttachUnequipped_Multi();
	void AttachUnequipped();
	void SwitchGunClient();
	void ReloadClient();
	void AttachGun();
	void Setup_gun(int32 Slot);
	void ShootServer(const struct FHitResult& Hit_result);
	void ShootClient();
	void ReceiveBeginPlay();
	void CameraRot(const struct FRotator& Rotation);
	void ReceiveTick(float DeltaSeconds);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_LookRight_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0(float AxisValue);
	void InpActEvt_PlayerInfo_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_PlayerInfo_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Emote_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Voice_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Voice_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Chat_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Pause_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Flashlight_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_SecondMouseAction_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_SecondMouseAction_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_SwitchDown_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_SwitchUp_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_MouseAction_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_MouseAction_K2Node_InputActionEvent_18(const struct FKey& Key);
	void AlphaRecoil__UpdateFunc();
	void AlphaRecoil__FinishedFunc();
	void InterpRagdoll__UpdateFunc();
	void InterpRagdoll__FinishedFunc();
	void UserConstructionScript();
	void Shootvisuals(const struct FHitResult& Hit);
	void OnRep_ShootHit();
	void ShootFunction(const struct FHitResult& Hit);
	void SwitchGun(int32 Number, bool* Willswitch_);
	void SpawnUnequippedGuns();
	void AttachUnequippedGuns();
	void SetupGunAmmo();
	void InteractFunction(const struct FHitResult& Hit_result);
	void Pick_up_item(const struct FHitResult& Hit_result);
	void Release_item(class AActor* Actor);
	void SetMeshCrouchLocation(bool Crouched_);
	void SetupGunFunc(int32 Slot);
	void CheckCanVault(bool* Can_vault_, bool* Vault_over_, struct FVector* VaultLocation, bool* WillCrouch_);
	void CanUncrouch_(bool* Can_);
	void Get_Any_Gun_Stats(const struct FAttachmentArrayStructure& AttachmentArrayStructure, class UClass* GunClass, float* Zoom, float* Recoil, float* Accuracy, float* Reload_time, float* Damage, int32* Bullets);
	float InaccuracyFunc();
	void SetupControllerGuns();
	void SetupControllerTools();
	void OnRep_EquippedTools();
	void CheckLoseFunc(bool* Game_over_);
	void SetupControllerAppearance();
	void OnRep_Outfit();
	void OnRep_SkinColorPlayer();
	void OnRep_Dancing_();
	void SetupControllerSkills();
	void CheckIfDowned_(bool* Downed__0);
	void AddAmmoInterfaceCall(int32 Amount, bool* DidAddAmmo_);
	void CheckHoldingItemInterfaceCall(class AActor** HoldingItem);
	void GetHoldingActor(class AActor** HoldingActor_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerCharacter_C">();
	}
	static class APlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerCharacter_C>();
	}
};
static_assert(alignof(APlayerCharacter_C) == 0x000010, "Wrong alignment on APlayerCharacter_C");
static_assert(sizeof(APlayerCharacter_C) == 0x000860, "Wrong size on APlayerCharacter_C");
static_assert(offsetof(APlayerCharacter_C, UberGraphFrame) == 0x0004C0, "Member 'APlayerCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SteamAchievementComponent) == 0x0004C8, "Member 'APlayerCharacter_C::SteamAchievementComponent' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, EmoteChildActor) == 0x0004D0, "Member 'APlayerCharacter_C::EmoteChildActor' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SpottedHighlightcomponent) == 0x0004D8, "Member 'APlayerCharacter_C::SpottedHighlightcomponent' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, VoiceComponent) == 0x0004E0, "Member 'APlayerCharacter_C::VoiceComponent' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, HeadArrow) == 0x0004E8, "Member 'APlayerCharacter_C::HeadArrow' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Arrow1) == 0x0004F0, "Member 'APlayerCharacter_C::Arrow1' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, PhysicsHandle) == 0x0004F8, "Member 'APlayerCharacter_C::PhysicsHandle' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SmoothSync) == 0x000500, "Member 'APlayerCharacter_C::SmoothSync' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ArmorChildActor) == 0x000508, "Member 'APlayerCharacter_C::ArmorChildActor' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, CamDefaultLocation) == 0x000510, "Member 'APlayerCharacter_C::CamDefaultLocation' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, MaskBP) == 0x000518, "Member 'APlayerCharacter_C::MaskBP' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, DamageComponent) == 0x000520, "Member 'APlayerCharacter_C::DamageComponent' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, InteractComponent) == 0x000528, "Member 'APlayerCharacter_C::InteractComponent' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, PawnNoiseEmitter) == 0x000530, "Member 'APlayerCharacter_C::PawnNoiseEmitter' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, PickupConstraint) == 0x000538, "Member 'APlayerCharacter_C::PickupConstraint' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, HipConstraint) == 0x000540, "Member 'APlayerCharacter_C::HipConstraint' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, BackConstraint) == 0x000548, "Member 'APlayerCharacter_C::BackConstraint' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, GunConstraint) == 0x000550, "Member 'APlayerCharacter_C::GunConstraint' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, PhysicalAnimation) == 0x000558, "Member 'APlayerCharacter_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Camera) == 0x000560, "Member 'APlayerCharacter_C::Camera' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AlphaRecoil_Alpha_3D9F04844465BEA1882C02A3FE74F206) == 0x000568, "Member 'APlayerCharacter_C::AlphaRecoil_Alpha_3D9F04844465BEA1882C02A3FE74F206' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AlphaRecoil__Direction_3D9F04844465BEA1882C02A3FE74F206) == 0x00056C, "Member 'APlayerCharacter_C::AlphaRecoil__Direction_3D9F04844465BEA1882C02A3FE74F206' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AlphaRecoil) == 0x000570, "Member 'APlayerCharacter_C::AlphaRecoil' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, InterpRagdoll_Alpha_AB6FC0D041E17D5C68A457A22ACD5368) == 0x000578, "Member 'APlayerCharacter_C::InterpRagdoll_Alpha_AB6FC0D041E17D5C68A457A22ACD5368' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, InterpRagdoll__Direction_AB6FC0D041E17D5C68A457A22ACD5368) == 0x00057C, "Member 'APlayerCharacter_C::InterpRagdoll__Direction_AB6FC0D041E17D5C68A457A22ACD5368' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, InterpRagdoll) == 0x000580, "Member 'APlayerCharacter_C::InterpRagdoll' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, LocalRotation) == 0x000588, "Member 'APlayerCharacter_C::LocalRotation' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, CameraRotation) == 0x000594, "Member 'APlayerCharacter_C::CameraRotation' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, HoldingGun) == 0x0005A0, "Member 'APlayerCharacter_C::HoldingGun' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ShootHit) == 0x0005A8, "Member 'APlayerCharacter_C::ShootHit' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Shooting_) == 0x000630, "Member 'APlayerCharacter_C::Shooting_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Reloading_) == 0x000631, "Member 'APlayerCharacter_C::Reloading_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, EquippedGuns) == 0x000638, "Member 'APlayerCharacter_C::EquippedGuns' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, EquippedSlot) == 0x000648, "Member 'APlayerCharacter_C::EquippedSlot' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SwitchingGun_) == 0x00064C, "Member 'APlayerCharacter_C::SwitchingGun_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, StoredGuns) == 0x000650, "Member 'APlayerCharacter_C::StoredGuns' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, StartFOV) == 0x000660, "Member 'APlayerCharacter_C::StartFOV' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Aimed_) == 0x000664, "Member 'APlayerCharacter_C::Aimed_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Sprinting_) == 0x000665, "Member 'APlayerCharacter_C::Sprinting_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, GunAmmos) == 0x000668, "Member 'APlayerCharacter_C::GunAmmos' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ReserveAmmo) == 0x000678, "Member 'APlayerCharacter_C::ReserveAmmo' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Unarmed_) == 0x000688, "Member 'APlayerCharacter_C::Unarmed_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, HoldingActor) == 0x000690, "Member 'APlayerCharacter_C::HoldingActor' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Hitmarker) == 0x000698, "Member 'APlayerCharacter_C::Hitmarker' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Health) == 0x0006A8, "Member 'APlayerCharacter_C::Health' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Loaded) == 0x0006AC, "Member 'APlayerCharacter_C::Loaded' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Downed_) == 0x0006AD, "Member 'APlayerCharacter_C::Downed_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, LookingAtName) == 0x0006B0, "Member 'APlayerCharacter_C::LookingAtName' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, LeftMouseDown_) == 0x0006C0, "Member 'APlayerCharacter_C::LeftMouseDown_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, MouseButton) == 0x0006C8, "Member 'APlayerCharacter_C::MouseButton' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Reviving_) == 0x0006D8, "Member 'APlayerCharacter_C::Reviving_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, GunAttachments) == 0x0006E0, "Member 'APlayerCharacter_C::GunAttachments' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Mask) == 0x0006F0, "Member 'APlayerCharacter_C::Mask' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ToggleFlash) == 0x0006F8, "Member 'APlayerCharacter_C::ToggleFlash' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, BurstAmount) == 0x000708, "Member 'APlayerCharacter_C::BurstAmount' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, InWarning_) == 0x00070C, "Member 'APlayerCharacter_C::InWarning_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, IsSpotted_) == 0x00070D, "Member 'APlayerCharacter_C::IsSpotted_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, CurrentWarningTime) == 0x000710, "Member 'APlayerCharacter_C::CurrentWarningTime' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Armor) == 0x000718, "Member 'APlayerCharacter_C::Armor' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, HUDUI) == 0x000720, "Member 'APlayerCharacter_C::HUDUI' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Crouching_) == 0x000728, "Member 'APlayerCharacter_C::Crouching_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, PCController) == 0x000730, "Member 'APlayerCharacter_C::PCController' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, InteractDescription) == 0x000738, "Member 'APlayerCharacter_C::InteractDescription' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Sus_) == 0x000748, "Member 'APlayerCharacter_C::Sus_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, CopsAlerted_) == 0x000749, "Member 'APlayerCharacter_C::CopsAlerted_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Vaulting_) == 0x00074A, "Member 'APlayerCharacter_C::Vaulting_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AllConnected_) == 0x00074B, "Member 'APlayerCharacter_C::AllConnected_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, DragginBody_) == 0x00074C, "Member 'APlayerCharacter_C::DragginBody_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, WarningAreaDisp) == 0x000750, "Member 'APlayerCharacter_C::WarningAreaDisp' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Dancing_) == 0x000760, "Member 'APlayerCharacter_C::Dancing_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, GainedEXP) == 0x000764, "Member 'APlayerCharacter_C::GainedEXP' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, HasLoaded_) == 0x000768, "Member 'APlayerCharacter_C::HasLoaded_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, PauseWidget) == 0x000770, "Member 'APlayerCharacter_C::PauseWidget' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ChatWidget) == 0x000778, "Member 'APlayerCharacter_C::ChatWidget' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SwitchedGun) == 0x000780, "Member 'APlayerCharacter_C::SwitchedGun' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, EquippedTools) == 0x000790, "Member 'APlayerCharacter_C::EquippedTools' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Escorted_) == 0x0007A0, "Member 'APlayerCharacter_C::Escorted_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ArrestWarning_) == 0x0007A1, "Member 'APlayerCharacter_C::ArrestWarning_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Settings_Struct) == 0x0007A4, "Member 'APlayerCharacter_C::Settings_Struct' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, VoiceObj) == 0x0007D0, "Member 'APlayerCharacter_C::VoiceObj' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SampleRate) == 0x0007D8, "Member 'APlayerCharacter_C::SampleRate' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Outfit) == 0x0007E0, "Member 'APlayerCharacter_C::Outfit' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SkinColorPlayer) == 0x0007E8, "Member 'APlayerCharacter_C::SkinColorPlayer' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Emote) == 0x0007F0, "Member 'APlayerCharacter_C::Emote' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, NameTaggedPlayerstates) == 0x0007F8, "Member 'APlayerCharacter_C::NameTaggedPlayerstates' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Assisting_Player) == 0x000808, "Member 'APlayerCharacter_C::Assisting_Player' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Emoting_) == 0x000810, "Member 'APlayerCharacter_C::Emoting_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, LoadedWeapons_) == 0x000811, "Member 'APlayerCharacter_C::LoadedWeapons_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, Slowed_) == 0x000812, "Member 'APlayerCharacter_C::Slowed_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ExtraAmmo_) == 0x000814, "Member 'APlayerCharacter_C::ExtraAmmo_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedAccuracy) == 0x000818, "Member 'APlayerCharacter_C::AddedAccuracy' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedAimDamage_) == 0x00081C, "Member 'APlayerCharacter_C::AddedAimDamage_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, LastBulletsExtraDamage) == 0x000820, "Member 'APlayerCharacter_C::LastBulletsExtraDamage' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, SpeedLoader_) == 0x000824, "Member 'APlayerCharacter_C::SpeedLoader_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ReviveTime) == 0x000828, "Member 'APlayerCharacter_C::ReviveTime' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, MaxHealth) == 0x00082C, "Member 'APlayerCharacter_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedHealSpeed_) == 0x000830, "Member 'APlayerCharacter_C::AddedHealSpeed_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedArmorHP_) == 0x000834, "Member 'APlayerCharacter_C::AddedArmorHP_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedPowerboxSpeed_) == 0x000838, "Member 'APlayerCharacter_C::AddedPowerboxSpeed_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, BarbedWireAddedSpeed_) == 0x00083C, "Member 'APlayerCharacter_C::BarbedWireAddedSpeed_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, DamageImmunity) == 0x000840, "Member 'APlayerCharacter_C::DamageImmunity' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, DrillImmunityTime) == 0x000844, "Member 'APlayerCharacter_C::DrillImmunityTime' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedGuardPhoneTime) == 0x000848, "Member 'APlayerCharacter_C::AddedGuardPhoneTime' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedCamSpotTime_) == 0x00084C, "Member 'APlayerCharacter_C::AddedCamSpotTime_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedGuardSpotTime_) == 0x000850, "Member 'APlayerCharacter_C::AddedGuardSpotTime_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, AddedHacking_) == 0x000854, "Member 'APlayerCharacter_C::AddedHacking_' has a wrong offset!");
static_assert(offsetof(APlayerCharacter_C, ReducedReviveDamage_) == 0x000858, "Member 'APlayerCharacter_C::ReducedReviveDamage_' has a wrong offset!");

}

