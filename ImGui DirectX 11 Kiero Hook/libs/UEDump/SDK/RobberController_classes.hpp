#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RobberController

#include "Basic.hpp"

#include "InputSettingStruct_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SkillSaveStruct_structs.hpp"
#include "SettingsStruct_structs.hpp"
#include "ShopItemCategory_structs.hpp"
#include "AttachmentArrayStructure_structs.hpp"
#include "SkillProgressStruct_structs.hpp"
#include "SteamCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass RobberController.RobberController_C
// 0x02C8 (0x0838 - 0x0570)
class ARobberController_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UClass*>                         ItemInventory;                                     // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Tools_Equipped;                                    // 0x0588(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class UClass*>                         Weapons_Equipped;                                  // 0x0598(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FAttachmentArrayStructure>      WeaponMods_Equipped;                               // 0x05A8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         Level;                                             // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exp;                                               // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cash;                                              // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C4[0x4];                                      // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             LoadedAll;                                         // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UClass*>                         Mask_equipped;                                     // 0x05D8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class UClass*>                         OutfitEquipped;                                    // 0x05E8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class UClass*>                         EmoteEquipped;                                     // 0x05F8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class UClass*>                         ArmorEquipped;                                     // 0x0608(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             CashLoaded;                                        // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             WeaponsLoaded;                                     // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             AppearanceLoaded;                                  // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             AppearanceSetOnServer;                             // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             WeaponsSetOnServer;                                // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FString>                         ChatLog;                                           // 0x0668(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         ChatNameLog;                                       // 0x0678(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             ToolsSetOnServer;                                  // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FilterInititated_;                                 // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARobberController_C*>            RestartVotes;                                      // 0x06A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             ToolsLoaded;                                       // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSettingsStruct                        SettingsStruct;                                    // 0x06C0(0x002C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SettingsApplied;                                   // 0x06F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         GraphicsNum;                                       // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_704[0x4];                                      // 0x0704(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UploadedToCloud;                                   // 0x0708(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DownloadedFromCloud;                               // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInterface*                     SkinColor;                                         // 0x0728(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RedeemedRecently_;                                 // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_731[0x3];                                      // 0x0731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamInventoryResult                  InventoryHandle;                                   // 0x0734(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Coins;                                             // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocalCurrency;                                     // 0x0740(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FSteamItemDetails>              SteamInventoryResultItems;                         // 0x0750(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         UnlockedMaps;                                      // 0x0760(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Loadout_Equipped;                                  // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_774[0x4];                                      // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RandomMultiplier;                                  // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         MultipliedValue;                                   // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowSkinPopup;                                     // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_789[0x3];                                      // 0x0789(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CivCasualty;                                       // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         UnlockedSetups;                                    // 0x0790(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         CompletedSetups;                                   // 0x07A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FInputSettingStruct>            Input_Settings;                                    // 0x07B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             CoinsChanged;                                      // 0x07C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FSkillSaveStruct>               UnlockedSkills;                                    // 0x07D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSkillProgressStruct>           ResearchingSkills;                                 // 0x07E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             LevelLoaded;                                       // 0x07F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UClass*>                         PlaySetups;                                        // 0x0800(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             SetupsLoaded;                                      // 0x0810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         PlayerLoggedVersion;                               // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLogged_;                                         // 0x0824(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_825[0x3];                                      // 0x0825(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             LoadedAllFromCloud;                                // 0x0828(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void LoadedAll__DelegateSignature();
	void CashLoaded__DelegateSignature();
	void WeaponsLoaded__DelegateSignature();
	void AppearanceLoaded__DelegateSignature();
	void AppearanceSetOnServer__DelegateSignature();
	void WeaponsSetOnServer__DelegateSignature();
	void ToolsSetOnServer__DelegateSignature();
	void ToolsLoaded__DelegateSignature();
	void SettingsApplied__DelegateSignature();
	void UploadedToCloud__DelegateSignature();
	void DownloadedFromCloud__DelegateSignature(const class FString& Save_name);
	void CoinsChanged__DelegateSignature();
	void LevelLoaded__DelegateSignature();
	void SetupsLoaded__DelegateSignature();
	void LoadedAllFromCloud__DelegateSignature();
	void ExecuteUbergraph_RobberController(int32 EntryPoint);
	void OnBackupFileUploaded(const struct FRemoteStorageFileWriteAsyncComplete& Data, bool bWasSuccessful);
	void OnCloudFilesSaves(const struct FRemoteStorageFileWriteAsyncComplete& Data, bool bWasSuccessful);
	void LogPlayer();
	void CheckPlayerLogged();
	void LoadPlaySetups();
	void SavePlaySetups();
	void LoadInput();
	void SaveInput();
	void SetCompletedSetupsServer(const TArray<class UClass*>& Setups);
	void WeeklyRotationLoad();
	void WeeklyRotationSave();
	void GenerateSecureStream();
	void SaveLoadout();
	void SaveEquippedLoadoutSlot();
	void LoadLoadout();
	void LoadEquippedLoadoutSlot();
	void LoadMaps();
	void SaveMaps();
	void InventoryFullUpdate(const struct FSteamInventoryFullUpdate& Data);
	void ReceiveTick(float DeltaSeconds);
	void DefineCoinItem();
	void LoadSavefromCloud(const class FString& Save_name);
	void UploadToCloud(const class FString& Savename);
	void LoadSettings();
	void ApplySettings();
	void SaveSettings();
	void UpdateVotes(class ARobberController_C* Player_0);
	void VoteRestart(class ARobberController_C* Player_0);
	void SetToolsServer(const TArray<class UClass*>& Tools);
	void UpdateMessages(const class FString& ChatLog_0, const class FString& NameLog);
	void ChatMessageController(const class FString& Message, const class FString& Name_0);
	void SetWeaponsServer(const TArray<class UClass*>& Weapons, const TArray<struct FAttachmentArrayStructure>& Mods);
	void LoadLevel();
	void SaveLevel();
	void LoadCash();
	void SaveCash();
	void LoadAppearance();
	void SaveAppearance();
	void UpdateAppearance(const TArray<class UClass*>& Masks, const TArray<class UClass*>& Outfits, const TArray<class UClass*>& Emote, const TArray<class UClass*>& Armor, class UMaterialInterface* SkinColor_0);
	void LoadWeapons();
	void SaveWeapons();
	void LoadAll();
	void LoadToolsEquipped();
	void SaveToolsEquipped();
	void LoadInventoryItems();
	void SaveInventoryItems();
	void ReceiveBeginPlay();
	void OnCallback_AD45EEAC44D55B89E3CC16A1A002AE23(const class FString& Data, bool bWasSuccessful);
	void OnCallback_0D5D0EC4428E0E8C7A5C85ACACEA797E(const struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful);
	void Find_Equipped_Item_from_Category_Function(EShopItemCategory Category, int32 Index_0, class UClass** Item);
	void OverrideIndexFromCategory(EShopItemCategory Category, int32 Index_0, class UClass* Item);
	void RemoveInventoryItem(class UClass* Item, bool* Success_);
	void AddInventoryItem(class UClass* Item, int32* Index_0);
	void GetInventoryItemsInCategory(EShopItemCategory Category, bool Include_equipped_, TArray<class UClass*>* Inventory);
	void UpdateNewWeapon(int32 Index_0);
	void Update_Attachment(class UClass* Item_Info, int32 Weaponindex, struct FAttachmentArrayStructure* New_attachments_structure);
	void FindEquppedAttachmentFunc(EShopItemCategory Category, int32 Index_0, class UClass** Attachment);
	bool IsItemInInventory_(class UClass* Item);
	void Savecategory(EShopItemCategory Category);
	void SortItemsByUnlockLevel(TArray<class UClass*>& Items, TArray<class UClass*>* Sorted_items);
	void SpendCash(int32 Amount, bool* Success_);
	void AddEXP(float Amount, bool* LevelUp_);
	void GetRequiredEXP(int32 Level_0, float* EXP_required_for_levelup);
	void GetEXPForLevel(int32 Level_0, float* Exp_0);
	void RandomMaskOnBegin();
	void Load_All_Saved_From_Remote();
	void DownloadFromCloudFunc(const class FString& Save_name);
	void RandomSkinColorOnNewSave();
	void Update_Coins();
	void Consume_Coins(int32 Amount, bool* Success_);
	void AddMap(class UClass* Map);
	void Post_Coin_Analytics(int32 DefID, int32 Price);
	void SwitchLoadout(int32 Amount);
	void Set_Multiply_Value(int32 Integer);
	void Check_Multiplied_Value(int32 Check, bool* Can_purchase_);
	void FindEquippedArrayFromCategoryFunction(EShopItemCategory Category, TArray<class UClass*>* Array);
	struct FTimespan FindSkinTimeLeft(int32* RotationNumber);
	void CheckSteamID(class UOAR_Savegame_C* SaveGame, const class FString& Savename, TArray<uint8>& LoadedBytes);
	void LockUserSteamID();
	void SaveFileByName(const class FString& Savename);
	void AddSetup(class UClass* Setup);
	void ApplySavedInputSettings();
	void GetSkillTier(class UClass* Skill, int32* Tier);
	void FindResearchingSkill(class UClass* Skill, bool* Is_researching_, struct FSkillProgressStruct* Array_Element);
	void ProgressSkills(float XP);
	void GetCompletedSetupsForMap(class UClass* Map, int32* SetupsCompleted, bool* Completed_min_);
	void LoadFileFromBackup(const class FString& Savename, TArray<uint8>& LoadedBytes, bool* Success_);
	void Convert_Save_Info_To_Bytes(int32 IntIn, TArray<uint8>* Bytes);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RobberController_C">();
	}
	static class ARobberController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARobberController_C>();
	}
};
static_assert(alignof(ARobberController_C) == 0x000008, "Wrong alignment on ARobberController_C");
static_assert(sizeof(ARobberController_C) == 0x000838, "Wrong size on ARobberController_C");
static_assert(offsetof(ARobberController_C, UberGraphFrame) == 0x000570, "Member 'ARobberController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ItemInventory) == 0x000578, "Member 'ARobberController_C::ItemInventory' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Tools_Equipped) == 0x000588, "Member 'ARobberController_C::Tools_Equipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Weapons_Equipped) == 0x000598, "Member 'ARobberController_C::Weapons_Equipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, WeaponMods_Equipped) == 0x0005A8, "Member 'ARobberController_C::WeaponMods_Equipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Level) == 0x0005B8, "Member 'ARobberController_C::Level' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Exp) == 0x0005BC, "Member 'ARobberController_C::Exp' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Cash) == 0x0005C0, "Member 'ARobberController_C::Cash' has a wrong offset!");
static_assert(offsetof(ARobberController_C, LoadedAll) == 0x0005C8, "Member 'ARobberController_C::LoadedAll' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Mask_equipped) == 0x0005D8, "Member 'ARobberController_C::Mask_equipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, OutfitEquipped) == 0x0005E8, "Member 'ARobberController_C::OutfitEquipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, EmoteEquipped) == 0x0005F8, "Member 'ARobberController_C::EmoteEquipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ArmorEquipped) == 0x000608, "Member 'ARobberController_C::ArmorEquipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, CashLoaded) == 0x000618, "Member 'ARobberController_C::CashLoaded' has a wrong offset!");
static_assert(offsetof(ARobberController_C, WeaponsLoaded) == 0x000628, "Member 'ARobberController_C::WeaponsLoaded' has a wrong offset!");
static_assert(offsetof(ARobberController_C, AppearanceLoaded) == 0x000638, "Member 'ARobberController_C::AppearanceLoaded' has a wrong offset!");
static_assert(offsetof(ARobberController_C, AppearanceSetOnServer) == 0x000648, "Member 'ARobberController_C::AppearanceSetOnServer' has a wrong offset!");
static_assert(offsetof(ARobberController_C, WeaponsSetOnServer) == 0x000658, "Member 'ARobberController_C::WeaponsSetOnServer' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ChatLog) == 0x000668, "Member 'ARobberController_C::ChatLog' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ChatNameLog) == 0x000678, "Member 'ARobberController_C::ChatNameLog' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ToolsSetOnServer) == 0x000688, "Member 'ARobberController_C::ToolsSetOnServer' has a wrong offset!");
static_assert(offsetof(ARobberController_C, FilterInititated_) == 0x000698, "Member 'ARobberController_C::FilterInititated_' has a wrong offset!");
static_assert(offsetof(ARobberController_C, RestartVotes) == 0x0006A0, "Member 'ARobberController_C::RestartVotes' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ToolsLoaded) == 0x0006B0, "Member 'ARobberController_C::ToolsLoaded' has a wrong offset!");
static_assert(offsetof(ARobberController_C, SettingsStruct) == 0x0006C0, "Member 'ARobberController_C::SettingsStruct' has a wrong offset!");
static_assert(offsetof(ARobberController_C, SettingsApplied) == 0x0006F0, "Member 'ARobberController_C::SettingsApplied' has a wrong offset!");
static_assert(offsetof(ARobberController_C, GraphicsNum) == 0x000700, "Member 'ARobberController_C::GraphicsNum' has a wrong offset!");
static_assert(offsetof(ARobberController_C, UploadedToCloud) == 0x000708, "Member 'ARobberController_C::UploadedToCloud' has a wrong offset!");
static_assert(offsetof(ARobberController_C, DownloadedFromCloud) == 0x000718, "Member 'ARobberController_C::DownloadedFromCloud' has a wrong offset!");
static_assert(offsetof(ARobberController_C, SkinColor) == 0x000728, "Member 'ARobberController_C::SkinColor' has a wrong offset!");
static_assert(offsetof(ARobberController_C, RedeemedRecently_) == 0x000730, "Member 'ARobberController_C::RedeemedRecently_' has a wrong offset!");
static_assert(offsetof(ARobberController_C, InventoryHandle) == 0x000734, "Member 'ARobberController_C::InventoryHandle' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Coins) == 0x000738, "Member 'ARobberController_C::Coins' has a wrong offset!");
static_assert(offsetof(ARobberController_C, LocalCurrency) == 0x000740, "Member 'ARobberController_C::LocalCurrency' has a wrong offset!");
static_assert(offsetof(ARobberController_C, SteamInventoryResultItems) == 0x000750, "Member 'ARobberController_C::SteamInventoryResultItems' has a wrong offset!");
static_assert(offsetof(ARobberController_C, UnlockedMaps) == 0x000760, "Member 'ARobberController_C::UnlockedMaps' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Loadout_Equipped) == 0x000770, "Member 'ARobberController_C::Loadout_Equipped' has a wrong offset!");
static_assert(offsetof(ARobberController_C, RandomMultiplier) == 0x000778, "Member 'ARobberController_C::RandomMultiplier' has a wrong offset!");
static_assert(offsetof(ARobberController_C, MultipliedValue) == 0x000780, "Member 'ARobberController_C::MultipliedValue' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ShowSkinPopup) == 0x000788, "Member 'ARobberController_C::ShowSkinPopup' has a wrong offset!");
static_assert(offsetof(ARobberController_C, CivCasualty) == 0x00078C, "Member 'ARobberController_C::CivCasualty' has a wrong offset!");
static_assert(offsetof(ARobberController_C, UnlockedSetups) == 0x000790, "Member 'ARobberController_C::UnlockedSetups' has a wrong offset!");
static_assert(offsetof(ARobberController_C, CompletedSetups) == 0x0007A0, "Member 'ARobberController_C::CompletedSetups' has a wrong offset!");
static_assert(offsetof(ARobberController_C, Input_Settings) == 0x0007B0, "Member 'ARobberController_C::Input_Settings' has a wrong offset!");
static_assert(offsetof(ARobberController_C, CoinsChanged) == 0x0007C0, "Member 'ARobberController_C::CoinsChanged' has a wrong offset!");
static_assert(offsetof(ARobberController_C, UnlockedSkills) == 0x0007D0, "Member 'ARobberController_C::UnlockedSkills' has a wrong offset!");
static_assert(offsetof(ARobberController_C, ResearchingSkills) == 0x0007E0, "Member 'ARobberController_C::ResearchingSkills' has a wrong offset!");
static_assert(offsetof(ARobberController_C, LevelLoaded) == 0x0007F0, "Member 'ARobberController_C::LevelLoaded' has a wrong offset!");
static_assert(offsetof(ARobberController_C, PlaySetups) == 0x000800, "Member 'ARobberController_C::PlaySetups' has a wrong offset!");
static_assert(offsetof(ARobberController_C, SetupsLoaded) == 0x000810, "Member 'ARobberController_C::SetupsLoaded' has a wrong offset!");
static_assert(offsetof(ARobberController_C, PlayerLoggedVersion) == 0x000820, "Member 'ARobberController_C::PlayerLoggedVersion' has a wrong offset!");
static_assert(offsetof(ARobberController_C, IsLogged_) == 0x000824, "Member 'ARobberController_C::IsLogged_' has a wrong offset!");
static_assert(offsetof(ARobberController_C, LoadedAllFromCloud) == 0x000828, "Member 'ARobberController_C::LoadedAllFromCloud' has a wrong offset!");

}

