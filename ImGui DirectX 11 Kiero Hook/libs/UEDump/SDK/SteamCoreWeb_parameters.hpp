#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamCoreWeb

#include "Basic.hpp"

#include "SteamCoreWeb_structs.hpp"


namespace SDK::Params
{

// Function SteamCoreWeb.SteamCoreWebAsyncAction.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreWebAsyncAction_HandleCallback final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreWebAsyncAction_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreWebAsyncAction_HandleCallback");
static_assert(sizeof(SteamCoreWebAsyncAction_HandleCallback) == 0x000018, "Wrong size on SteamCoreWebAsyncAction_HandleCallback");
static_assert(offsetof(SteamCoreWebAsyncAction_HandleCallback, Data) == 0x000000, "Member 'SteamCoreWebAsyncAction_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncAction_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreWebAsyncAction_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.FindJsonBool
// 0x0028 (0x0028 - 0x0000)
struct SteamWebUtilities_FindJsonBool final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamJsonResult                              Result;                                            // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamWebUtilities_FindJsonBool) == 0x000008, "Wrong alignment on SteamWebUtilities_FindJsonBool");
static_assert(sizeof(SteamWebUtilities_FindJsonBool) == 0x000028, "Wrong size on SteamWebUtilities_FindJsonBool");
static_assert(offsetof(SteamWebUtilities_FindJsonBool, JsonString) == 0x000000, "Member 'SteamWebUtilities_FindJsonBool::JsonString' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonBool, Key) == 0x000010, "Member 'SteamWebUtilities_FindJsonBool::Key' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonBool, bValue) == 0x000020, "Member 'SteamWebUtilities_FindJsonBool::bValue' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonBool, Result) == 0x000021, "Member 'SteamWebUtilities_FindJsonBool::Result' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.FindJsonBools
// 0x0038 (0x0038 - 0x0000)
struct SteamWebUtilities_FindJsonBools final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  bValues;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamJsonResult                              Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamWebUtilities_FindJsonBools) == 0x000008, "Wrong alignment on SteamWebUtilities_FindJsonBools");
static_assert(sizeof(SteamWebUtilities_FindJsonBools) == 0x000038, "Wrong size on SteamWebUtilities_FindJsonBools");
static_assert(offsetof(SteamWebUtilities_FindJsonBools, JsonString) == 0x000000, "Member 'SteamWebUtilities_FindJsonBools::JsonString' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonBools, Key) == 0x000010, "Member 'SteamWebUtilities_FindJsonBools::Key' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonBools, bValues) == 0x000020, "Member 'SteamWebUtilities_FindJsonBools::bValues' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonBools, Result) == 0x000030, "Member 'SteamWebUtilities_FindJsonBools::Result' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.FindJsonNumber
// 0x0028 (0x0028 - 0x0000)
struct SteamWebUtilities_FindJsonNumber final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamJsonResult                              Result;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamWebUtilities_FindJsonNumber) == 0x000008, "Wrong alignment on SteamWebUtilities_FindJsonNumber");
static_assert(sizeof(SteamWebUtilities_FindJsonNumber) == 0x000028, "Wrong size on SteamWebUtilities_FindJsonNumber");
static_assert(offsetof(SteamWebUtilities_FindJsonNumber, JsonString) == 0x000000, "Member 'SteamWebUtilities_FindJsonNumber::JsonString' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonNumber, Key) == 0x000010, "Member 'SteamWebUtilities_FindJsonNumber::Key' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonNumber, Value) == 0x000020, "Member 'SteamWebUtilities_FindJsonNumber::Value' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonNumber, Result) == 0x000024, "Member 'SteamWebUtilities_FindJsonNumber::Result' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.FindJsonNumbers
// 0x0038 (0x0038 - 0x0000)
struct SteamWebUtilities_FindJsonNumbers final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Values;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamJsonResult                              Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamWebUtilities_FindJsonNumbers) == 0x000008, "Wrong alignment on SteamWebUtilities_FindJsonNumbers");
static_assert(sizeof(SteamWebUtilities_FindJsonNumbers) == 0x000038, "Wrong size on SteamWebUtilities_FindJsonNumbers");
static_assert(offsetof(SteamWebUtilities_FindJsonNumbers, JsonString) == 0x000000, "Member 'SteamWebUtilities_FindJsonNumbers::JsonString' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonNumbers, Key) == 0x000010, "Member 'SteamWebUtilities_FindJsonNumbers::Key' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonNumbers, Values) == 0x000020, "Member 'SteamWebUtilities_FindJsonNumbers::Values' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonNumbers, Result) == 0x000030, "Member 'SteamWebUtilities_FindJsonNumbers::Result' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.FindJsonString
// 0x0038 (0x0038 - 0x0000)
struct SteamWebUtilities_FindJsonString final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamJsonResult                              Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamWebUtilities_FindJsonString) == 0x000008, "Wrong alignment on SteamWebUtilities_FindJsonString");
static_assert(sizeof(SteamWebUtilities_FindJsonString) == 0x000038, "Wrong size on SteamWebUtilities_FindJsonString");
static_assert(offsetof(SteamWebUtilities_FindJsonString, JsonString) == 0x000000, "Member 'SteamWebUtilities_FindJsonString::JsonString' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonString, Key) == 0x000010, "Member 'SteamWebUtilities_FindJsonString::Key' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonString, Value) == 0x000020, "Member 'SteamWebUtilities_FindJsonString::Value' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonString, Result) == 0x000030, "Member 'SteamWebUtilities_FindJsonString::Result' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.FindJsonStrings
// 0x0038 (0x0038 - 0x0000)
struct SteamWebUtilities_FindJsonStrings final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamJsonResult                              Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamWebUtilities_FindJsonStrings) == 0x000008, "Wrong alignment on SteamWebUtilities_FindJsonStrings");
static_assert(sizeof(SteamWebUtilities_FindJsonStrings) == 0x000038, "Wrong size on SteamWebUtilities_FindJsonStrings");
static_assert(offsetof(SteamWebUtilities_FindJsonStrings, JsonString) == 0x000000, "Member 'SteamWebUtilities_FindJsonStrings::JsonString' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonStrings, Key) == 0x000010, "Member 'SteamWebUtilities_FindJsonStrings::Key' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonStrings, Values) == 0x000020, "Member 'SteamWebUtilities_FindJsonStrings::Values' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_FindJsonStrings, Result) == 0x000030, "Member 'SteamWebUtilities_FindJsonStrings::Result' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.GetDevSteamID
// 0x0010 (0x0010 - 0x0000)
struct SteamWebUtilities_GetDevSteamID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamWebUtilities_GetDevSteamID) == 0x000008, "Wrong alignment on SteamWebUtilities_GetDevSteamID");
static_assert(sizeof(SteamWebUtilities_GetDevSteamID) == 0x000010, "Wrong size on SteamWebUtilities_GetDevSteamID");
static_assert(offsetof(SteamWebUtilities_GetDevSteamID, ReturnValue) == 0x000000, "Member 'SteamWebUtilities_GetDevSteamID::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.GetProjectAppID
// 0x0004 (0x0004 - 0x0000)
struct SteamWebUtilities_GetProjectAppID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamWebUtilities_GetProjectAppID) == 0x000004, "Wrong alignment on SteamWebUtilities_GetProjectAppID");
static_assert(sizeof(SteamWebUtilities_GetProjectAppID) == 0x000004, "Wrong size on SteamWebUtilities_GetProjectAppID");
static_assert(offsetof(SteamWebUtilities_GetProjectAppID, ReturnValue) == 0x000000, "Member 'SteamWebUtilities_GetProjectAppID::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.GetProjectKey
// 0x0010 (0x0010 - 0x0000)
struct SteamWebUtilities_GetProjectKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamWebUtilities_GetProjectKey) == 0x000008, "Wrong alignment on SteamWebUtilities_GetProjectKey");
static_assert(sizeof(SteamWebUtilities_GetProjectKey) == 0x000010, "Wrong size on SteamWebUtilities_GetProjectKey");
static_assert(offsetof(SteamWebUtilities_GetProjectKey, ReturnValue) == 0x000000, "Member 'SteamWebUtilities_GetProjectKey::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamWebUtilities.ParseJson
// 0x0028 (0x0028 - 0x0000)
struct SteamWebUtilities_ParseJson final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamCoreJson>                 Data;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamWebUtilities_ParseJson) == 0x000008, "Wrong alignment on SteamWebUtilities_ParseJson");
static_assert(sizeof(SteamWebUtilities_ParseJson) == 0x000028, "Wrong size on SteamWebUtilities_ParseJson");
static_assert(offsetof(SteamWebUtilities_ParseJson, JsonString) == 0x000000, "Member 'SteamWebUtilities_ParseJson::JsonString' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_ParseJson, Data) == 0x000010, "Member 'SteamWebUtilities_ParseJson::Data' has a wrong offset!");
static_assert(offsetof(SteamWebUtilities_ParseJson, ReturnValue) == 0x000020, "Member 'SteamWebUtilities_ParseJson::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetAppBetas
// 0x0028 (0x0028 - 0x0000)
struct WebApps_GetAppBetas final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebApps_GetAppBetas) == 0x000008, "Wrong alignment on WebApps_GetAppBetas");
static_assert(sizeof(WebApps_GetAppBetas) == 0x000028, "Wrong size on WebApps_GetAppBetas");
static_assert(offsetof(WebApps_GetAppBetas, Callback) == 0x000000, "Member 'WebApps_GetAppBetas::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppBetas, Key) == 0x000010, "Member 'WebApps_GetAppBetas::Key' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppBetas, AppID) == 0x000020, "Member 'WebApps_GetAppBetas::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetAppBuilds
// 0x0028 (0x0028 - 0x0000)
struct WebApps_GetAppBuilds final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebApps_GetAppBuilds) == 0x000008, "Wrong alignment on WebApps_GetAppBuilds");
static_assert(sizeof(WebApps_GetAppBuilds) == 0x000028, "Wrong size on WebApps_GetAppBuilds");
static_assert(offsetof(WebApps_GetAppBuilds, Callback) == 0x000000, "Member 'WebApps_GetAppBuilds::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppBuilds, Key) == 0x000010, "Member 'WebApps_GetAppBuilds::Key' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppBuilds, AppID) == 0x000020, "Member 'WebApps_GetAppBuilds::AppID' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppBuilds, Count) == 0x000024, "Member 'WebApps_GetAppBuilds::Count' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetAppDepotVersions
// 0x0028 (0x0028 - 0x0000)
struct WebApps_GetAppDepotVersions final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebApps_GetAppDepotVersions) == 0x000008, "Wrong alignment on WebApps_GetAppDepotVersions");
static_assert(sizeof(WebApps_GetAppDepotVersions) == 0x000028, "Wrong size on WebApps_GetAppDepotVersions");
static_assert(offsetof(WebApps_GetAppDepotVersions, Callback) == 0x000000, "Member 'WebApps_GetAppDepotVersions::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppDepotVersions, Key) == 0x000010, "Member 'WebApps_GetAppDepotVersions::Key' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppDepotVersions, AppID) == 0x000020, "Member 'WebApps_GetAppDepotVersions::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetAppList
// 0x0020 (0x0020 - 0x0000)
struct WebApps_GetAppList final
{
public:
	TDelegate<void(TArray<struct FWebAppsGetAppList>& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebApps_GetAppList) == 0x000008, "Wrong alignment on WebApps_GetAppList");
static_assert(sizeof(WebApps_GetAppList) == 0x000020, "Wrong size on WebApps_GetAppList");
static_assert(offsetof(WebApps_GetAppList, Callback) == 0x000000, "Member 'WebApps_GetAppList::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetAppList, Key) == 0x000010, "Member 'WebApps_GetAppList::Key' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetCheatingReports
// 0x0038 (0x0038 - 0x0000)
struct WebApps_GetCheatingReports final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBegin;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeEnd;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReports;                                   // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeBans;                                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReportidMin;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebApps_GetCheatingReports) == 0x000008, "Wrong alignment on WebApps_GetCheatingReports");
static_assert(sizeof(WebApps_GetCheatingReports) == 0x000038, "Wrong size on WebApps_GetCheatingReports");
static_assert(offsetof(WebApps_GetCheatingReports, Callback) == 0x000000, "Member 'WebApps_GetCheatingReports::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetCheatingReports, Key) == 0x000010, "Member 'WebApps_GetCheatingReports::Key' has a wrong offset!");
static_assert(offsetof(WebApps_GetCheatingReports, AppID) == 0x000020, "Member 'WebApps_GetCheatingReports::AppID' has a wrong offset!");
static_assert(offsetof(WebApps_GetCheatingReports, TimeBegin) == 0x000024, "Member 'WebApps_GetCheatingReports::TimeBegin' has a wrong offset!");
static_assert(offsetof(WebApps_GetCheatingReports, TimeEnd) == 0x000028, "Member 'WebApps_GetCheatingReports::TimeEnd' has a wrong offset!");
static_assert(offsetof(WebApps_GetCheatingReports, bIncludeReports) == 0x00002C, "Member 'WebApps_GetCheatingReports::bIncludeReports' has a wrong offset!");
static_assert(offsetof(WebApps_GetCheatingReports, bIncludeBans) == 0x00002D, "Member 'WebApps_GetCheatingReports::bIncludeBans' has a wrong offset!");
static_assert(offsetof(WebApps_GetCheatingReports, ReportidMin) == 0x000030, "Member 'WebApps_GetCheatingReports::ReportidMin' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetPlayersBanned
// 0x0028 (0x0028 - 0x0000)
struct WebApps_GetPlayersBanned final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebApps_GetPlayersBanned) == 0x000008, "Wrong alignment on WebApps_GetPlayersBanned");
static_assert(sizeof(WebApps_GetPlayersBanned) == 0x000028, "Wrong size on WebApps_GetPlayersBanned");
static_assert(offsetof(WebApps_GetPlayersBanned, Callback) == 0x000000, "Member 'WebApps_GetPlayersBanned::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetPlayersBanned, Key) == 0x000010, "Member 'WebApps_GetPlayersBanned::Key' has a wrong offset!");
static_assert(offsetof(WebApps_GetPlayersBanned, AppID) == 0x000020, "Member 'WebApps_GetPlayersBanned::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetServerList
// 0x0038 (0x0038 - 0x0000)
struct WebApps_GetServerList final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebApps_GetServerList) == 0x000008, "Wrong alignment on WebApps_GetServerList");
static_assert(sizeof(WebApps_GetServerList) == 0x000038, "Wrong size on WebApps_GetServerList");
static_assert(offsetof(WebApps_GetServerList, Callback) == 0x000000, "Member 'WebApps_GetServerList::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetServerList, Key) == 0x000010, "Member 'WebApps_GetServerList::Key' has a wrong offset!");
static_assert(offsetof(WebApps_GetServerList, Filter) == 0x000020, "Member 'WebApps_GetServerList::Filter' has a wrong offset!");
static_assert(offsetof(WebApps_GetServerList, Limit) == 0x000030, "Member 'WebApps_GetServerList::Limit' has a wrong offset!");

// Function SteamCoreWeb.WebApps.GetServersAtAddress
// 0x0020 (0x0020 - 0x0000)
struct WebApps_GetServersAtAddress final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Addr;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebApps_GetServersAtAddress) == 0x000008, "Wrong alignment on WebApps_GetServersAtAddress");
static_assert(sizeof(WebApps_GetServersAtAddress) == 0x000020, "Wrong size on WebApps_GetServersAtAddress");
static_assert(offsetof(WebApps_GetServersAtAddress, Callback) == 0x000000, "Member 'WebApps_GetServersAtAddress::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_GetServersAtAddress, Addr) == 0x000010, "Member 'WebApps_GetServersAtAddress::Addr' has a wrong offset!");

// Function SteamCoreWeb.WebApps.SetAppBuildLive
// 0x0048 (0x0048 - 0x0000)
struct WebApps_SetAppBuildLive final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildID;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BetaKey;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebApps_SetAppBuildLive) == 0x000008, "Wrong alignment on WebApps_SetAppBuildLive");
static_assert(sizeof(WebApps_SetAppBuildLive) == 0x000048, "Wrong size on WebApps_SetAppBuildLive");
static_assert(offsetof(WebApps_SetAppBuildLive, Callback) == 0x000000, "Member 'WebApps_SetAppBuildLive::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_SetAppBuildLive, Key) == 0x000010, "Member 'WebApps_SetAppBuildLive::Key' has a wrong offset!");
static_assert(offsetof(WebApps_SetAppBuildLive, AppID) == 0x000020, "Member 'WebApps_SetAppBuildLive::AppID' has a wrong offset!");
static_assert(offsetof(WebApps_SetAppBuildLive, BuildID) == 0x000024, "Member 'WebApps_SetAppBuildLive::BuildID' has a wrong offset!");
static_assert(offsetof(WebApps_SetAppBuildLive, BetaKey) == 0x000028, "Member 'WebApps_SetAppBuildLive::BetaKey' has a wrong offset!");
static_assert(offsetof(WebApps_SetAppBuildLive, Description) == 0x000038, "Member 'WebApps_SetAppBuildLive::Description' has a wrong offset!");

// Function SteamCoreWeb.WebApps.UpToDateCheck
// 0x0018 (0x0018 - 0x0000)
struct WebApps_UpToDateCheck final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebApps_UpToDateCheck) == 0x000004, "Wrong alignment on WebApps_UpToDateCheck");
static_assert(sizeof(WebApps_UpToDateCheck) == 0x000018, "Wrong size on WebApps_UpToDateCheck");
static_assert(offsetof(WebApps_UpToDateCheck, Callback) == 0x000000, "Member 'WebApps_UpToDateCheck::Callback' has a wrong offset!");
static_assert(offsetof(WebApps_UpToDateCheck, AppID) == 0x000010, "Member 'WebApps_UpToDateCheck::AppID' has a wrong offset!");
static_assert(offsetof(WebApps_UpToDateCheck, Version) == 0x000014, "Member 'WebApps_UpToDateCheck::Version' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetAppBetas.GetAppBetasAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreAppsAsyncActionGetAppBetas*   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync) == 0x000028, "Wrong size on SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync, Key) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync, AppID) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync, ReturnValue) == 0x000020, "Member 'SteamCoreAppsAsyncActionGetAppBetas_GetAppBetasAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetAppBuilds.GetAppBuildsAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreAppsAsyncActionGetAppBuilds*  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync) == 0x000028, "Wrong size on SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync, Key) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync, AppID) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync, Count) == 0x00001C, "Member 'SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync::Count' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync, ReturnValue) == 0x000020, "Member 'SteamCoreAppsAsyncActionGetAppBuilds_GetAppBuildsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetAppDepotVersions.GetAppDepotVersionsAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreAppsAsyncActionGetAppDepotVersions* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync) == 0x000028, "Wrong size on SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync, Key) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync, AppID) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync, ReturnValue) == 0x000020, "Member 'SteamCoreAppsAsyncActionGetAppDepotVersions_GetAppDepotVersionsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetAppList.GetAppListAsync
// 0x0010 (0x0010 - 0x0000)
struct SteamCoreAppsAsyncActionGetAppList_GetAppListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreAppsAsyncActionGetAppList*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetAppList_GetAppListAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetAppList_GetAppListAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetAppList_GetAppListAsync) == 0x000010, "Wrong size on SteamCoreAppsAsyncActionGetAppList_GetAppListAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppList_GetAppListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetAppList_GetAppListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppList_GetAppListAsync, ReturnValue) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetAppList_GetAppListAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetAppList.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreAppsAsyncActionGetAppList_HandleCallback final
{
public:
	TArray<struct FWebAppsGetAppList>             Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreAppsAsyncActionGetAppList_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetAppList_HandleCallback");
static_assert(sizeof(SteamCoreAppsAsyncActionGetAppList_HandleCallback) == 0x000018, "Wrong size on SteamCoreAppsAsyncActionGetAppList_HandleCallback");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetAppList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetAppList_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreAppsAsyncActionGetAppList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetCheatingReports.GetCheatingReportsAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBegin;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeEnd;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReports;                                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeBans;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReportidMin;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreAppsAsyncActionGetCheatingReports* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync) == 0x000038, "Wrong size on SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, Key) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, AppID) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, TimeBegin) == 0x00001C, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::TimeBegin' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, TimeEnd) == 0x000020, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::TimeEnd' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, bIncludeReports) == 0x000024, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::bIncludeReports' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, bIncludeBans) == 0x000025, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::bIncludeBans' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, ReportidMin) == 0x000028, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::ReportidMin' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync, ReturnValue) == 0x000030, "Member 'SteamCoreAppsAsyncActionGetCheatingReports_GetCheatingReportsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetPlayersBanned.GetPlayersBannedAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreAppsAsyncActionGetPlayersBanned* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync) == 0x000028, "Wrong size on SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync, Key) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync, AppID) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync, ReturnValue) == 0x000020, "Member 'SteamCoreAppsAsyncActionGetPlayersBanned_GetPlayersBannedAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetServerList.GetServerListAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreAppsAsyncActionGetServerList_GetServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreAppsAsyncActionGetServerList* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetServerList_GetServerListAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetServerList_GetServerListAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetServerList_GetServerListAsync) == 0x000038, "Wrong size on SteamCoreAppsAsyncActionGetServerList_GetServerListAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServerList_GetServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetServerList_GetServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServerList_GetServerListAsync, Key) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetServerList_GetServerListAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServerList_GetServerListAsync, Filter) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetServerList_GetServerListAsync::Filter' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServerList_GetServerListAsync, Limit) == 0x000028, "Member 'SteamCoreAppsAsyncActionGetServerList_GetServerListAsync::Limit' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServerList_GetServerListAsync, ReturnValue) == 0x000030, "Member 'SteamCoreAppsAsyncActionGetServerList_GetServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionGetServersAtAddress.GetServersAtAddressAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Addr;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreAppsAsyncActionGetServersAtAddress* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync) == 0x000020, "Wrong size on SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync, Addr) == 0x000008, "Member 'SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync::Addr' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync, ReturnValue) == 0x000018, "Member 'SteamCoreAppsAsyncActionGetServersAtAddress_GetServersAtAddressAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionSetAppBuildLive.SetAppBuildLiveAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildID;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BetaKey;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreAppsAsyncActionSetAppBuildLive* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync) == 0x000048, "Wrong size on SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync, Key) == 0x000008, "Member 'SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync, AppID) == 0x000018, "Member 'SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync, BuildID) == 0x00001C, "Member 'SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync::BuildID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync, BetaKey) == 0x000020, "Member 'SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync::BetaKey' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync, Description) == 0x000030, "Member 'SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync::Description' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync, ReturnValue) == 0x000040, "Member 'SteamCoreAppsAsyncActionSetAppBuildLive_SetAppBuildLiveAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreAppsAsyncActionUpToDateCheck.UpToDateCheckAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreAppsAsyncActionUpToDateCheck* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync) == 0x000008, "Wrong alignment on SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync");
static_assert(sizeof(SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync) == 0x000018, "Wrong size on SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync");
static_assert(offsetof(SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync, AppID) == 0x000008, "Member 'SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync, Version) == 0x00000C, "Member 'SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync::Version' has a wrong offset!");
static_assert(offsetof(SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync, ReturnValue) == 0x000010, "Member 'SteamCoreAppsAsyncActionUpToDateCheck_UpToDateCheckAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebBroadcastService.PostGameDataFrame
// 0x0058 (0x0058 - 0x0000)
struct WebBroadcastService_PostGameDataFrame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BroadcastId;                                       // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FrameData;                                         // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebBroadcastService_PostGameDataFrame) == 0x000008, "Wrong alignment on WebBroadcastService_PostGameDataFrame");
static_assert(sizeof(WebBroadcastService_PostGameDataFrame) == 0x000058, "Wrong size on WebBroadcastService_PostGameDataFrame");
static_assert(offsetof(WebBroadcastService_PostGameDataFrame, Callback) == 0x000000, "Member 'WebBroadcastService_PostGameDataFrame::Callback' has a wrong offset!");
static_assert(offsetof(WebBroadcastService_PostGameDataFrame, Key) == 0x000010, "Member 'WebBroadcastService_PostGameDataFrame::Key' has a wrong offset!");
static_assert(offsetof(WebBroadcastService_PostGameDataFrame, AppID) == 0x000020, "Member 'WebBroadcastService_PostGameDataFrame::AppID' has a wrong offset!");
static_assert(offsetof(WebBroadcastService_PostGameDataFrame, SteamID) == 0x000028, "Member 'WebBroadcastService_PostGameDataFrame::SteamID' has a wrong offset!");
static_assert(offsetof(WebBroadcastService_PostGameDataFrame, BroadcastId) == 0x000038, "Member 'WebBroadcastService_PostGameDataFrame::BroadcastId' has a wrong offset!");
static_assert(offsetof(WebBroadcastService_PostGameDataFrame, FrameData) == 0x000048, "Member 'WebBroadcastService_PostGameDataFrame::FrameData' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionPostGameDataFrame.PostGameDataFrameAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BroadcastId;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FrameData;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionPostGameDataFrame* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync");
static_assert(sizeof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync) == 0x000058, "Wrong size on SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync");
static_assert(offsetof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync, BroadcastId) == 0x000030, "Member 'SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync::BroadcastId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync, FrameData) == 0x000040, "Member 'SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync::FrameData' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync, ReturnValue) == 0x000050, "Member 'SteamCoreWebAsyncActionPostGameDataFrame_PostGameDataFrameAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.EndSecureMultiplayerSession
// 0x0048 (0x0048 - 0x0000)
struct WebCheatReporting_EndSecureMultiplayerSession final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebCheatReporting_EndSecureMultiplayerSession) == 0x000008, "Wrong alignment on WebCheatReporting_EndSecureMultiplayerSession");
static_assert(sizeof(WebCheatReporting_EndSecureMultiplayerSession) == 0x000048, "Wrong size on WebCheatReporting_EndSecureMultiplayerSession");
static_assert(offsetof(WebCheatReporting_EndSecureMultiplayerSession, Callback) == 0x000000, "Member 'WebCheatReporting_EndSecureMultiplayerSession::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_EndSecureMultiplayerSession, Key) == 0x000010, "Member 'WebCheatReporting_EndSecureMultiplayerSession::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_EndSecureMultiplayerSession, SteamID) == 0x000020, "Member 'WebCheatReporting_EndSecureMultiplayerSession::SteamID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_EndSecureMultiplayerSession, AppID) == 0x000030, "Member 'WebCheatReporting_EndSecureMultiplayerSession::AppID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_EndSecureMultiplayerSession, SessionID) == 0x000038, "Member 'WebCheatReporting_EndSecureMultiplayerSession::SessionID' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.GetCheatingReports
// 0x0058 (0x0058 - 0x0000)
struct WebCheatReporting_GetCheatingReports final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeEnd;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBegin;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReportidMin;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReports;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeBans;                                      // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebCheatReporting_GetCheatingReports) == 0x000008, "Wrong alignment on WebCheatReporting_GetCheatingReports");
static_assert(sizeof(WebCheatReporting_GetCheatingReports) == 0x000058, "Wrong size on WebCheatReporting_GetCheatingReports");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, Callback) == 0x000000, "Member 'WebCheatReporting_GetCheatingReports::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, Key) == 0x000010, "Member 'WebCheatReporting_GetCheatingReports::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, AppID) == 0x000020, "Member 'WebCheatReporting_GetCheatingReports::AppID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, TimeEnd) == 0x000024, "Member 'WebCheatReporting_GetCheatingReports::TimeEnd' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, TimeBegin) == 0x000028, "Member 'WebCheatReporting_GetCheatingReports::TimeBegin' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, ReportidMin) == 0x000030, "Member 'WebCheatReporting_GetCheatingReports::ReportidMin' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, bIncludeReports) == 0x000040, "Member 'WebCheatReporting_GetCheatingReports::bIncludeReports' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, bIncludeBans) == 0x000041, "Member 'WebCheatReporting_GetCheatingReports::bIncludeBans' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_GetCheatingReports, SteamID) == 0x000048, "Member 'WebCheatReporting_GetCheatingReports::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.RemovePlayerGameBan
// 0x0038 (0x0038 - 0x0000)
struct WebCheatReporting_RemovePlayerGameBan final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebCheatReporting_RemovePlayerGameBan) == 0x000008, "Wrong alignment on WebCheatReporting_RemovePlayerGameBan");
static_assert(sizeof(WebCheatReporting_RemovePlayerGameBan) == 0x000038, "Wrong size on WebCheatReporting_RemovePlayerGameBan");
static_assert(offsetof(WebCheatReporting_RemovePlayerGameBan, Callback) == 0x000000, "Member 'WebCheatReporting_RemovePlayerGameBan::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RemovePlayerGameBan, Key) == 0x000010, "Member 'WebCheatReporting_RemovePlayerGameBan::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RemovePlayerGameBan, SteamID) == 0x000020, "Member 'WebCheatReporting_RemovePlayerGameBan::SteamID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RemovePlayerGameBan, AppID) == 0x000030, "Member 'WebCheatReporting_RemovePlayerGameBan::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.ReportCheatData
// 0x00C0 (0x00C0 - 0x0000)
struct WebCheatReporting_ReportCheatData final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PathAndFileName;                                   // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebCheatURL;                                       // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeNow;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeStarted;                                       // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeStopped;                                       // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatName;                                         // 0x0088(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameProcessId;                                     // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheatProcessId;                                    // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatParam1;                                       // 0x00A0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatParam2;                                       // 0x00B0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebCheatReporting_ReportCheatData) == 0x000008, "Wrong alignment on WebCheatReporting_ReportCheatData");
static_assert(sizeof(WebCheatReporting_ReportCheatData) == 0x0000C0, "Wrong size on WebCheatReporting_ReportCheatData");
static_assert(offsetof(WebCheatReporting_ReportCheatData, Callback) == 0x000000, "Member 'WebCheatReporting_ReportCheatData::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, Key) == 0x000010, "Member 'WebCheatReporting_ReportCheatData::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, SteamID) == 0x000020, "Member 'WebCheatReporting_ReportCheatData::SteamID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, AppID) == 0x000030, "Member 'WebCheatReporting_ReportCheatData::AppID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, PathAndFileName) == 0x000038, "Member 'WebCheatReporting_ReportCheatData::PathAndFileName' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, WebCheatURL) == 0x000048, "Member 'WebCheatReporting_ReportCheatData::WebCheatURL' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, TimeNow) == 0x000058, "Member 'WebCheatReporting_ReportCheatData::TimeNow' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, TimeStarted) == 0x000068, "Member 'WebCheatReporting_ReportCheatData::TimeStarted' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, TimeStopped) == 0x000078, "Member 'WebCheatReporting_ReportCheatData::TimeStopped' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, CheatName) == 0x000088, "Member 'WebCheatReporting_ReportCheatData::CheatName' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, GameProcessId) == 0x000098, "Member 'WebCheatReporting_ReportCheatData::GameProcessId' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, CheatProcessId) == 0x00009C, "Member 'WebCheatReporting_ReportCheatData::CheatProcessId' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, CheatParam1) == 0x0000A0, "Member 'WebCheatReporting_ReportCheatData::CheatParam1' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportCheatData, CheatParam2) == 0x0000B0, "Member 'WebCheatReporting_ReportCheatData::CheatParam2' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.ReportPlayerCheating
// 0x0068 (0x0068 - 0x0000)
struct WebCheatReporting_ReportPlayerCheating final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamIdReporter;                                   // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppData;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeuristic;                                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetection;                                        // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerReport;                                     // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoReportID;                                       // 0x005B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameMode;                                          // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuspicionStartTime;                                // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Severity;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebCheatReporting_ReportPlayerCheating) == 0x000008, "Wrong alignment on WebCheatReporting_ReportPlayerCheating");
static_assert(sizeof(WebCheatReporting_ReportPlayerCheating) == 0x000068, "Wrong size on WebCheatReporting_ReportPlayerCheating");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, Callback) == 0x000000, "Member 'WebCheatReporting_ReportPlayerCheating::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, Key) == 0x000010, "Member 'WebCheatReporting_ReportPlayerCheating::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, AppID) == 0x000020, "Member 'WebCheatReporting_ReportPlayerCheating::AppID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, SteamID) == 0x000028, "Member 'WebCheatReporting_ReportPlayerCheating::SteamID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, SteamIdReporter) == 0x000038, "Member 'WebCheatReporting_ReportPlayerCheating::SteamIdReporter' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, AppData) == 0x000048, "Member 'WebCheatReporting_ReportPlayerCheating::AppData' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, bHeuristic) == 0x000058, "Member 'WebCheatReporting_ReportPlayerCheating::bHeuristic' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, bDetection) == 0x000059, "Member 'WebCheatReporting_ReportPlayerCheating::bDetection' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, bPlayerReport) == 0x00005A, "Member 'WebCheatReporting_ReportPlayerCheating::bPlayerReport' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, bNoReportID) == 0x00005B, "Member 'WebCheatReporting_ReportPlayerCheating::bNoReportID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, GameMode) == 0x00005C, "Member 'WebCheatReporting_ReportPlayerCheating::GameMode' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, SuspicionStartTime) == 0x000060, "Member 'WebCheatReporting_ReportPlayerCheating::SuspicionStartTime' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_ReportPlayerCheating, Severity) == 0x000064, "Member 'WebCheatReporting_ReportPlayerCheating::Severity' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.RequestPlayerGameBan
// 0x0060 (0x0060 - 0x0000)
struct WebCheatReporting_RequestPlayerGameBan final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReportID;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatDescription;                                  // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayBan;                                         // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebCheatReporting_RequestPlayerGameBan) == 0x000008, "Wrong alignment on WebCheatReporting_RequestPlayerGameBan");
static_assert(sizeof(WebCheatReporting_RequestPlayerGameBan) == 0x000060, "Wrong size on WebCheatReporting_RequestPlayerGameBan");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, Callback) == 0x000000, "Member 'WebCheatReporting_RequestPlayerGameBan::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, Key) == 0x000010, "Member 'WebCheatReporting_RequestPlayerGameBan::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, SteamID) == 0x000020, "Member 'WebCheatReporting_RequestPlayerGameBan::SteamID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, AppID) == 0x000030, "Member 'WebCheatReporting_RequestPlayerGameBan::AppID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, ReportID) == 0x000038, "Member 'WebCheatReporting_RequestPlayerGameBan::ReportID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, CheatDescription) == 0x000048, "Member 'WebCheatReporting_RequestPlayerGameBan::CheatDescription' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, Duration) == 0x000058, "Member 'WebCheatReporting_RequestPlayerGameBan::Duration' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestPlayerGameBan, bDelayBan) == 0x00005C, "Member 'WebCheatReporting_RequestPlayerGameBan::bDelayBan' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.RequestVacStatusForUser
// 0x0048 (0x0048 - 0x0000)
struct WebCheatReporting_RequestVacStatusForUser final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebCheatReporting_RequestVacStatusForUser) == 0x000008, "Wrong alignment on WebCheatReporting_RequestVacStatusForUser");
static_assert(sizeof(WebCheatReporting_RequestVacStatusForUser) == 0x000048, "Wrong size on WebCheatReporting_RequestVacStatusForUser");
static_assert(offsetof(WebCheatReporting_RequestVacStatusForUser, Callback) == 0x000000, "Member 'WebCheatReporting_RequestVacStatusForUser::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestVacStatusForUser, Key) == 0x000010, "Member 'WebCheatReporting_RequestVacStatusForUser::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestVacStatusForUser, SteamID) == 0x000020, "Member 'WebCheatReporting_RequestVacStatusForUser::SteamID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestVacStatusForUser, AppID) == 0x000030, "Member 'WebCheatReporting_RequestVacStatusForUser::AppID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_RequestVacStatusForUser, SessionID) == 0x000038, "Member 'WebCheatReporting_RequestVacStatusForUser::SessionID' has a wrong offset!");

// Function SteamCoreWeb.WebCheatReporting.StartSecureMultiplayerSession
// 0x0038 (0x0038 - 0x0000)
struct WebCheatReporting_StartSecureMultiplayerSession final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebCheatReporting_StartSecureMultiplayerSession) == 0x000008, "Wrong alignment on WebCheatReporting_StartSecureMultiplayerSession");
static_assert(sizeof(WebCheatReporting_StartSecureMultiplayerSession) == 0x000038, "Wrong size on WebCheatReporting_StartSecureMultiplayerSession");
static_assert(offsetof(WebCheatReporting_StartSecureMultiplayerSession, Callback) == 0x000000, "Member 'WebCheatReporting_StartSecureMultiplayerSession::Callback' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_StartSecureMultiplayerSession, Key) == 0x000010, "Member 'WebCheatReporting_StartSecureMultiplayerSession::Key' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_StartSecureMultiplayerSession, SteamID) == 0x000020, "Member 'WebCheatReporting_StartSecureMultiplayerSession::SteamID' has a wrong offset!");
static_assert(offsetof(WebCheatReporting_StartSecureMultiplayerSession, AppID) == 0x000030, "Member 'WebCheatReporting_StartSecureMultiplayerSession::AppID' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionReportPlayerCheating.ReportPlayerCheatingAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamIdReporter;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppData;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeuristic;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetection;                                        // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerReport;                                     // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoReportID;                                       // 0x0053(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameMode;                                          // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuspicionStartTime;                                // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Severity;                                          // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionReportPlayerCheating* ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync");
static_assert(sizeof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, SteamIdReporter) == 0x000030, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::SteamIdReporter' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, AppData) == 0x000040, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::AppData' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, bHeuristic) == 0x000050, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::bHeuristic' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, bDetection) == 0x000051, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::bDetection' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, bPlayerReport) == 0x000052, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::bPlayerReport' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, bNoReportID) == 0x000053, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::bNoReportID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, GameMode) == 0x000054, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::GameMode' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, SuspicionStartTime) == 0x000058, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::SuspicionStartTime' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, Severity) == 0x00005C, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::Severity' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionReportPlayerCheating_ReportPlayerCheatingAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRequestPlayerGameBan.RequestPlayerGameBanAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReportID;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatDescription;                                  // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayBan;                                         // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionRequestPlayerGameBan* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, ReportID) == 0x000030, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::ReportID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, CheatDescription) == 0x000040, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::CheatDescription' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, Duration) == 0x000050, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::Duration' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, bDelayBan) == 0x000054, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::bDelayBan' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionRequestPlayerGameBan_RequestPlayerGameBanAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRemovePlayerGameBan.RemovePlayerGameBanAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionRemovePlayerGameBan* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionRemovePlayerGameBan_RemovePlayerGameBanAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetCheatingReports.GetCheatingReportsAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeEnd;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBegin;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReportidMin;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReports;                                   // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeBans;                                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetCheatingReports* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync) == 0x000058, "Wrong size on SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, TimeEnd) == 0x00001C, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::TimeEnd' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, TimeBegin) == 0x000020, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::TimeBegin' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, ReportidMin) == 0x000028, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::ReportidMin' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, bIncludeReports) == 0x000038, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::bIncludeReports' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, bIncludeBans) == 0x000039, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::bIncludeBans' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, SteamID) == 0x000040, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync, ReturnValue) == 0x000050, "Member 'SteamCoreWebAsyncActionGetCheatingReports_GetCheatingReportsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionReportCheatData.ReportCheatDataAsync
// 0x00C0 (0x00C0 - 0x0000)
struct SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PathAndFileName;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebCheatURL;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeNow;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeStarted;                                       // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeStopped;                                       // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatName;                                         // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameProcessId;                                     // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheatProcessId;                                    // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatParam1;                                       // 0x0098(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheatParam2;                                       // 0x00A8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionReportCheatData* ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync");
static_assert(sizeof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync) == 0x0000C0, "Wrong size on SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, PathAndFileName) == 0x000030, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::PathAndFileName' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, WebCheatURL) == 0x000040, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::WebCheatURL' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, TimeNow) == 0x000050, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::TimeNow' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, TimeStarted) == 0x000060, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::TimeStarted' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, TimeStopped) == 0x000070, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::TimeStopped' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, CheatName) == 0x000080, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::CheatName' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, GameProcessId) == 0x000090, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::GameProcessId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, CheatProcessId) == 0x000094, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::CheatProcessId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, CheatParam1) == 0x000098, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::CheatParam1' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, CheatParam2) == 0x0000A8, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::CheatParam2' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync, ReturnValue) == 0x0000B8, "Member 'SteamCoreWebAsyncActionReportCheatData_ReportCheatDataAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRequestVacStatusForUser.RequestVacStatusForUserAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionRequestVacStatusForUser* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync, SessionID) == 0x000030, "Member 'SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync::SessionID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionRequestVacStatusForUser_RequestVacStatusForUserAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionStartSecureMultiplayerSession.StartSecureMultiplayerSessionAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionStartSecureMultiplayerSession* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync");
static_assert(sizeof(SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync");
static_assert(offsetof(SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionStartSecureMultiplayerSession_StartSecureMultiplayerSessionAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionEndSecureMultiplayerSession.EndSecureMultiplayerSessionAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionEndSecureMultiplayerSession* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync");
static_assert(sizeof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync");
static_assert(offsetof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync, SessionID) == 0x000030, "Member 'SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync::SessionID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionEndSecureMultiplayerSession_EndSecureMultiplayerSessionAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebEconMarketService.CancelAppListingsForUser
// 0x0040 (0x0040 - 0x0000)
struct WebEconMarketService_CancelAppListingsForUser final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronous;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebEconMarketService_CancelAppListingsForUser) == 0x000008, "Wrong alignment on WebEconMarketService_CancelAppListingsForUser");
static_assert(sizeof(WebEconMarketService_CancelAppListingsForUser) == 0x000040, "Wrong size on WebEconMarketService_CancelAppListingsForUser");
static_assert(offsetof(WebEconMarketService_CancelAppListingsForUser, Callback) == 0x000000, "Member 'WebEconMarketService_CancelAppListingsForUser::Callback' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_CancelAppListingsForUser, Key) == 0x000010, "Member 'WebEconMarketService_CancelAppListingsForUser::Key' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_CancelAppListingsForUser, AppID) == 0x000020, "Member 'WebEconMarketService_CancelAppListingsForUser::AppID' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_CancelAppListingsForUser, SteamID) == 0x000028, "Member 'WebEconMarketService_CancelAppListingsForUser::SteamID' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_CancelAppListingsForUser, bSynchronous) == 0x000038, "Member 'WebEconMarketService_CancelAppListingsForUser::bSynchronous' has a wrong offset!");

// Function SteamCoreWeb.WebEconMarketService.GetAssetID
// 0x0038 (0x0038 - 0x0000)
struct WebEconMarketService_GetAssetID final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ListingId;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconMarketService_GetAssetID) == 0x000008, "Wrong alignment on WebEconMarketService_GetAssetID");
static_assert(sizeof(WebEconMarketService_GetAssetID) == 0x000038, "Wrong size on WebEconMarketService_GetAssetID");
static_assert(offsetof(WebEconMarketService_GetAssetID, Callback) == 0x000000, "Member 'WebEconMarketService_GetAssetID::Callback' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetAssetID, Key) == 0x000010, "Member 'WebEconMarketService_GetAssetID::Key' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetAssetID, AppID) == 0x000020, "Member 'WebEconMarketService_GetAssetID::AppID' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetAssetID, ListingId) == 0x000028, "Member 'WebEconMarketService_GetAssetID::ListingId' has a wrong offset!");

// Function SteamCoreWeb.WebEconMarketService.GetMarketEligibility
// 0x0030 (0x0030 - 0x0000)
struct WebEconMarketService_GetMarketEligibility final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconMarketService_GetMarketEligibility) == 0x000008, "Wrong alignment on WebEconMarketService_GetMarketEligibility");
static_assert(sizeof(WebEconMarketService_GetMarketEligibility) == 0x000030, "Wrong size on WebEconMarketService_GetMarketEligibility");
static_assert(offsetof(WebEconMarketService_GetMarketEligibility, Callback) == 0x000000, "Member 'WebEconMarketService_GetMarketEligibility::Callback' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetMarketEligibility, Key) == 0x000010, "Member 'WebEconMarketService_GetMarketEligibility::Key' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetMarketEligibility, SteamID) == 0x000020, "Member 'WebEconMarketService_GetMarketEligibility::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebEconMarketService.GetPopular
// 0x0040 (0x0040 - 0x0000)
struct WebEconMarketService_GetPopular final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rows;                                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Start;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilterAppId;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ECurrency;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconMarketService_GetPopular) == 0x000008, "Wrong alignment on WebEconMarketService_GetPopular");
static_assert(sizeof(WebEconMarketService_GetPopular) == 0x000040, "Wrong size on WebEconMarketService_GetPopular");
static_assert(offsetof(WebEconMarketService_GetPopular, Callback) == 0x000000, "Member 'WebEconMarketService_GetPopular::Callback' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetPopular, Key) == 0x000010, "Member 'WebEconMarketService_GetPopular::Key' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetPopular, Language) == 0x000020, "Member 'WebEconMarketService_GetPopular::Language' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetPopular, Rows) == 0x000030, "Member 'WebEconMarketService_GetPopular::Rows' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetPopular, Start) == 0x000034, "Member 'WebEconMarketService_GetPopular::Start' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetPopular, FilterAppId) == 0x000038, "Member 'WebEconMarketService_GetPopular::FilterAppId' has a wrong offset!");
static_assert(offsetof(WebEconMarketService_GetPopular, ECurrency) == 0x00003C, "Member 'WebEconMarketService_GetPopular::ECurrency' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetMarketEligibility.GetMarketEligibilityAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetMarketEligibility* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetMarketEligibility_GetMarketEligibilityAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionCancelAppListingsForUser.CancelAppListingsForUserAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronous;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionCancelAppListingsForUser* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync");
static_assert(sizeof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync, bSynchronous) == 0x000030, "Member 'SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync::bSynchronous' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionCancelAppListingsForUser_CancelAppListingsForUserAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetAssetID.GetAssetIDAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ListingId;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetAssetID*     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync, ListingId) == 0x000020, "Member 'SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync::ListingId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionGetAssetID_GetAssetIDAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPopular.GetPopularAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetPopular_GetPopularAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rows;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Start;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilterAppId;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ECurrency;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetPopular*     ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPopular_GetPopularAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetPopular_GetPopularAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, Language) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, Rows) == 0x000028, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::Rows' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, Start) == 0x00002C, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::Start' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, FilterAppId) == 0x000030, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::FilterAppId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, ECurrency) == 0x000034, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::ECurrency' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPopular_GetPopularAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetPopular_GetPopularAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.CancelTradeOffer
// 0x0030 (0x0030 - 0x0000)
struct WebEconService_CancelTradeOffer final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeOfferId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconService_CancelTradeOffer) == 0x000008, "Wrong alignment on WebEconService_CancelTradeOffer");
static_assert(sizeof(WebEconService_CancelTradeOffer) == 0x000030, "Wrong size on WebEconService_CancelTradeOffer");
static_assert(offsetof(WebEconService_CancelTradeOffer, Callback) == 0x000000, "Member 'WebEconService_CancelTradeOffer::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_CancelTradeOffer, Key) == 0x000010, "Member 'WebEconService_CancelTradeOffer::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_CancelTradeOffer, TradeOfferId) == 0x000020, "Member 'WebEconService_CancelTradeOffer::TradeOfferId' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.DeclineTradeOffer
// 0x0030 (0x0030 - 0x0000)
struct WebEconService_DeclineTradeOffer final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeOfferId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconService_DeclineTradeOffer) == 0x000008, "Wrong alignment on WebEconService_DeclineTradeOffer");
static_assert(sizeof(WebEconService_DeclineTradeOffer) == 0x000030, "Wrong size on WebEconService_DeclineTradeOffer");
static_assert(offsetof(WebEconService_DeclineTradeOffer, Callback) == 0x000000, "Member 'WebEconService_DeclineTradeOffer::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_DeclineTradeOffer, Key) == 0x000010, "Member 'WebEconService_DeclineTradeOffer::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_DeclineTradeOffer, TradeOfferId) == 0x000020, "Member 'WebEconService_DeclineTradeOffer::TradeOfferId' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.FlushAssetAppearanceCache
// 0x0028 (0x0028 - 0x0000)
struct WebEconService_FlushAssetAppearanceCache final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebEconService_FlushAssetAppearanceCache) == 0x000008, "Wrong alignment on WebEconService_FlushAssetAppearanceCache");
static_assert(sizeof(WebEconService_FlushAssetAppearanceCache) == 0x000028, "Wrong size on WebEconService_FlushAssetAppearanceCache");
static_assert(offsetof(WebEconService_FlushAssetAppearanceCache, Callback) == 0x000000, "Member 'WebEconService_FlushAssetAppearanceCache::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushAssetAppearanceCache, Key) == 0x000010, "Member 'WebEconService_FlushAssetAppearanceCache::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushAssetAppearanceCache, AppID) == 0x000020, "Member 'WebEconService_FlushAssetAppearanceCache::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.FlushContextCache
// 0x0028 (0x0028 - 0x0000)
struct WebEconService_FlushContextCache final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebEconService_FlushContextCache) == 0x000008, "Wrong alignment on WebEconService_FlushContextCache");
static_assert(sizeof(WebEconService_FlushContextCache) == 0x000028, "Wrong size on WebEconService_FlushContextCache");
static_assert(offsetof(WebEconService_FlushContextCache, Callback) == 0x000000, "Member 'WebEconService_FlushContextCache::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushContextCache, Key) == 0x000010, "Member 'WebEconService_FlushContextCache::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushContextCache, AppID) == 0x000020, "Member 'WebEconService_FlushContextCache::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.FlushInventoryCache
// 0x0048 (0x0048 - 0x0000)
struct WebEconService_FlushInventoryCache final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContextId;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconService_FlushInventoryCache) == 0x000008, "Wrong alignment on WebEconService_FlushInventoryCache");
static_assert(sizeof(WebEconService_FlushInventoryCache) == 0x000048, "Wrong size on WebEconService_FlushInventoryCache");
static_assert(offsetof(WebEconService_FlushInventoryCache, Callback) == 0x000000, "Member 'WebEconService_FlushInventoryCache::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushInventoryCache, Key) == 0x000010, "Member 'WebEconService_FlushInventoryCache::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushInventoryCache, SteamID) == 0x000020, "Member 'WebEconService_FlushInventoryCache::SteamID' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushInventoryCache, AppID) == 0x000030, "Member 'WebEconService_FlushInventoryCache::AppID' has a wrong offset!");
static_assert(offsetof(WebEconService_FlushInventoryCache, ContextId) == 0x000038, "Member 'WebEconService_FlushInventoryCache::ContextId' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.GetTradeHistory
// 0x0058 (0x0058 - 0x0000)
struct WebEconService_GetTradeHistory final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTrades;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartAfterTime;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartAfterTradeId;                                 // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNavigatingBack;                                   // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetDescriptions;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFailed;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeTotal;                                     // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebEconService_GetTradeHistory) == 0x000008, "Wrong alignment on WebEconService_GetTradeHistory");
static_assert(sizeof(WebEconService_GetTradeHistory) == 0x000058, "Wrong size on WebEconService_GetTradeHistory");
static_assert(offsetof(WebEconService_GetTradeHistory, Callback) == 0x000000, "Member 'WebEconService_GetTradeHistory::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, Key) == 0x000010, "Member 'WebEconService_GetTradeHistory::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, MaxTrades) == 0x000020, "Member 'WebEconService_GetTradeHistory::MaxTrades' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, StartAfterTime) == 0x000024, "Member 'WebEconService_GetTradeHistory::StartAfterTime' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, StartAfterTradeId) == 0x000028, "Member 'WebEconService_GetTradeHistory::StartAfterTradeId' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, bNavigatingBack) == 0x000038, "Member 'WebEconService_GetTradeHistory::bNavigatingBack' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, bGetDescriptions) == 0x000039, "Member 'WebEconService_GetTradeHistory::bGetDescriptions' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, Language) == 0x000040, "Member 'WebEconService_GetTradeHistory::Language' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, bIncludeFailed) == 0x000050, "Member 'WebEconService_GetTradeHistory::bIncludeFailed' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeHistory, bIncludeTotal) == 0x000051, "Member 'WebEconService_GetTradeHistory::bIncludeTotal' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.GetTradeOffer
// 0x0040 (0x0040 - 0x0000)
struct WebEconService_GetTradeOffer final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeOfferId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconService_GetTradeOffer) == 0x000008, "Wrong alignment on WebEconService_GetTradeOffer");
static_assert(sizeof(WebEconService_GetTradeOffer) == 0x000040, "Wrong size on WebEconService_GetTradeOffer");
static_assert(offsetof(WebEconService_GetTradeOffer, Callback) == 0x000000, "Member 'WebEconService_GetTradeOffer::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffer, Key) == 0x000010, "Member 'WebEconService_GetTradeOffer::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffer, TradeOfferId) == 0x000020, "Member 'WebEconService_GetTradeOffer::TradeOfferId' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffer, Language) == 0x000030, "Member 'WebEconService_GetTradeOffer::Language' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.GetTradeOffers
// 0x0040 (0x0040 - 0x0000)
struct WebEconService_GetTradeOffers final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetSentOffers;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetReceivedOffers;                                // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetDescriptions;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveOnly;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHistoricalOnly;                                   // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeHistoricalCutoff;                              // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebEconService_GetTradeOffers) == 0x000008, "Wrong alignment on WebEconService_GetTradeOffers");
static_assert(sizeof(WebEconService_GetTradeOffers) == 0x000040, "Wrong size on WebEconService_GetTradeOffers");
static_assert(offsetof(WebEconService_GetTradeOffers, Callback) == 0x000000, "Member 'WebEconService_GetTradeOffers::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, Key) == 0x000010, "Member 'WebEconService_GetTradeOffers::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, bGetSentOffers) == 0x000020, "Member 'WebEconService_GetTradeOffers::bGetSentOffers' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, bGetReceivedOffers) == 0x000021, "Member 'WebEconService_GetTradeOffers::bGetReceivedOffers' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, bGetDescriptions) == 0x000022, "Member 'WebEconService_GetTradeOffers::bGetDescriptions' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, Language) == 0x000028, "Member 'WebEconService_GetTradeOffers::Language' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, bActiveOnly) == 0x000038, "Member 'WebEconService_GetTradeOffers::bActiveOnly' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, bHistoricalOnly) == 0x000039, "Member 'WebEconService_GetTradeOffers::bHistoricalOnly' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffers, TimeHistoricalCutoff) == 0x00003C, "Member 'WebEconService_GetTradeOffers::TimeHistoricalCutoff' has a wrong offset!");

// Function SteamCoreWeb.WebEconService.GetTradeOffersSummary
// 0x0028 (0x0028 - 0x0000)
struct WebEconService_GetTradeOffersSummary final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeLastVisit;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebEconService_GetTradeOffersSummary) == 0x000008, "Wrong alignment on WebEconService_GetTradeOffersSummary");
static_assert(sizeof(WebEconService_GetTradeOffersSummary) == 0x000028, "Wrong size on WebEconService_GetTradeOffersSummary");
static_assert(offsetof(WebEconService_GetTradeOffersSummary, Callback) == 0x000000, "Member 'WebEconService_GetTradeOffersSummary::Callback' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffersSummary, Key) == 0x000010, "Member 'WebEconService_GetTradeOffersSummary::Key' has a wrong offset!");
static_assert(offsetof(WebEconService_GetTradeOffersSummary, TimeLastVisit) == 0x000020, "Member 'WebEconService_GetTradeOffersSummary::TimeLastVisit' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetTradeHistory.GetTradeHistoryAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTrades;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartAfterTime;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartAfterTradeId;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNavigatingBack;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetDescriptions;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFailed;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeTotal;                                     // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetTradeHistory* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync) == 0x000058, "Wrong size on SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, MaxTrades) == 0x000018, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::MaxTrades' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, StartAfterTime) == 0x00001C, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::StartAfterTime' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, StartAfterTradeId) == 0x000020, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::StartAfterTradeId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, bNavigatingBack) == 0x000030, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::bNavigatingBack' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, bGetDescriptions) == 0x000031, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::bGetDescriptions' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, Language) == 0x000038, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, bIncludeFailed) == 0x000048, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::bIncludeFailed' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, bIncludeTotal) == 0x000049, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::bIncludeTotal' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync, ReturnValue) == 0x000050, "Member 'SteamCoreWebAsyncActionGetTradeHistory_GetTradeHistoryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionFlushInventoryCache.FlushInventoryCacheAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContextId;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionFlushInventoryCache* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync");
static_assert(sizeof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync");
static_assert(offsetof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync, ContextId) == 0x000030, "Member 'SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync::ContextId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionFlushInventoryCache_FlushInventoryCacheAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionFlushAssetAppearanceCache.FlushAssetAppearanceCacheAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionFlushAssetAppearanceCache* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync");
static_assert(sizeof(SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync) == 0x000028, "Wrong size on SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync");
static_assert(offsetof(SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync, ReturnValue) == 0x000020, "Member 'SteamCoreWebAsyncActionFlushAssetAppearanceCache_FlushAssetAppearanceCacheAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionFlushContextCache.FlushContextCacheAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionFlushContextCache* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync");
static_assert(sizeof(SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync) == 0x000028, "Wrong size on SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync");
static_assert(offsetof(SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync, ReturnValue) == 0x000020, "Member 'SteamCoreWebAsyncActionFlushContextCache_FlushContextCacheAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetTradeOffers.GetTradeOffersAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetSentOffers;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetReceivedOffers;                                // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetDescriptions;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveOnly;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHistoricalOnly;                                   // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeHistoricalCutoff;                              // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetTradeOffers* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, bGetSentOffers) == 0x000018, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::bGetSentOffers' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, bGetReceivedOffers) == 0x000019, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::bGetReceivedOffers' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, bGetDescriptions) == 0x00001A, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::bGetDescriptions' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, Language) == 0x000020, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, bActiveOnly) == 0x000030, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::bActiveOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, bHistoricalOnly) == 0x000031, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::bHistoricalOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, TimeHistoricalCutoff) == 0x000034, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::TimeHistoricalCutoff' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetTradeOffers_GetTradeOffersAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetTradeOffer.GetTradeOfferAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeOfferId;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetTradeOffer*  ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync, TradeOfferId) == 0x000018, "Member 'SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync::TradeOfferId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync, Language) == 0x000028, "Member 'SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetTradeOffer_GetTradeOfferAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetTradeOffersSummary.GetTradeOffersSummaryAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeLastVisit;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetTradeOffersSummary* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync) == 0x000028, "Wrong size on SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync, TimeLastVisit) == 0x000018, "Member 'SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync::TimeLastVisit' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync, ReturnValue) == 0x000020, "Member 'SteamCoreWebAsyncActionGetTradeOffersSummary_GetTradeOffersSummaryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionDeclineTradeOffer.DeclineTradeOfferAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeOfferId;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionDeclineTradeOffer* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync");
static_assert(sizeof(SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync");
static_assert(offsetof(SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync, TradeOfferId) == 0x000018, "Member 'SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync::TradeOfferId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionDeclineTradeOffer_DeclineTradeOfferAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionCancelTradeOffer.CancelTradeOfferAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeOfferId;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionCancelTradeOffer* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync");
static_assert(sizeof(SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync");
static_assert(offsetof(SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync, TradeOfferId) == 0x000018, "Member 'SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync::TradeOfferId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionCancelTradeOffer_CancelTradeOfferAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebGameInventory.GetHistoryCommandDetails
// 0x0068 (0x0068 - 0x0000)
struct WebGameInventory_GetHistoryCommandDetails final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arguments;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameInventory_GetHistoryCommandDetails) == 0x000008, "Wrong alignment on WebGameInventory_GetHistoryCommandDetails");
static_assert(sizeof(WebGameInventory_GetHistoryCommandDetails) == 0x000068, "Wrong size on WebGameInventory_GetHistoryCommandDetails");
static_assert(offsetof(WebGameInventory_GetHistoryCommandDetails, Callback) == 0x000000, "Member 'WebGameInventory_GetHistoryCommandDetails::Callback' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetHistoryCommandDetails, Key) == 0x000010, "Member 'WebGameInventory_GetHistoryCommandDetails::Key' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetHistoryCommandDetails, AppID) == 0x000020, "Member 'WebGameInventory_GetHistoryCommandDetails::AppID' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetHistoryCommandDetails, SteamID) == 0x000028, "Member 'WebGameInventory_GetHistoryCommandDetails::SteamID' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetHistoryCommandDetails, Command) == 0x000038, "Member 'WebGameInventory_GetHistoryCommandDetails::Command' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetHistoryCommandDetails, ContextId) == 0x000048, "Member 'WebGameInventory_GetHistoryCommandDetails::ContextId' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetHistoryCommandDetails, Arguments) == 0x000058, "Member 'WebGameInventory_GetHistoryCommandDetails::Arguments' has a wrong offset!");

// Function SteamCoreWeb.WebGameInventory.GetUserHistory
// 0x0050 (0x0050 - 0x0000)
struct WebGameInventory_GetUserHistory final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameInventory_GetUserHistory) == 0x000008, "Wrong alignment on WebGameInventory_GetUserHistory");
static_assert(sizeof(WebGameInventory_GetUserHistory) == 0x000050, "Wrong size on WebGameInventory_GetUserHistory");
static_assert(offsetof(WebGameInventory_GetUserHistory, Callback) == 0x000000, "Member 'WebGameInventory_GetUserHistory::Callback' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetUserHistory, Key) == 0x000010, "Member 'WebGameInventory_GetUserHistory::Key' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetUserHistory, AppID) == 0x000020, "Member 'WebGameInventory_GetUserHistory::AppID' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetUserHistory, SteamID) == 0x000028, "Member 'WebGameInventory_GetUserHistory::SteamID' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetUserHistory, ContextId) == 0x000038, "Member 'WebGameInventory_GetUserHistory::ContextId' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetUserHistory, StartTime) == 0x000048, "Member 'WebGameInventory_GetUserHistory::StartTime' has a wrong offset!");
static_assert(offsetof(WebGameInventory_GetUserHistory, EndTime) == 0x00004C, "Member 'WebGameInventory_GetUserHistory::EndTime' has a wrong offset!");

// Function SteamCoreWeb.WebGameInventory.HistoryExecuteCommands
// 0x0050 (0x0050 - 0x0000)
struct WebGameInventory_HistoryExecuteCommands final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorId;                                           // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebGameInventory_HistoryExecuteCommands) == 0x000008, "Wrong alignment on WebGameInventory_HistoryExecuteCommands");
static_assert(sizeof(WebGameInventory_HistoryExecuteCommands) == 0x000050, "Wrong size on WebGameInventory_HistoryExecuteCommands");
static_assert(offsetof(WebGameInventory_HistoryExecuteCommands, Callback) == 0x000000, "Member 'WebGameInventory_HistoryExecuteCommands::Callback' has a wrong offset!");
static_assert(offsetof(WebGameInventory_HistoryExecuteCommands, Key) == 0x000010, "Member 'WebGameInventory_HistoryExecuteCommands::Key' has a wrong offset!");
static_assert(offsetof(WebGameInventory_HistoryExecuteCommands, AppID) == 0x000020, "Member 'WebGameInventory_HistoryExecuteCommands::AppID' has a wrong offset!");
static_assert(offsetof(WebGameInventory_HistoryExecuteCommands, SteamID) == 0x000028, "Member 'WebGameInventory_HistoryExecuteCommands::SteamID' has a wrong offset!");
static_assert(offsetof(WebGameInventory_HistoryExecuteCommands, ContextId) == 0x000038, "Member 'WebGameInventory_HistoryExecuteCommands::ContextId' has a wrong offset!");
static_assert(offsetof(WebGameInventory_HistoryExecuteCommands, ActorId) == 0x000048, "Member 'WebGameInventory_HistoryExecuteCommands::ActorId' has a wrong offset!");

// Function SteamCoreWeb.WebGameInventory.SupportGetAssetHistory
// 0x0048 (0x0048 - 0x0000)
struct WebGameInventory_SupportGetAssetHistory final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameInventory_SupportGetAssetHistory) == 0x000008, "Wrong alignment on WebGameInventory_SupportGetAssetHistory");
static_assert(sizeof(WebGameInventory_SupportGetAssetHistory) == 0x000048, "Wrong size on WebGameInventory_SupportGetAssetHistory");
static_assert(offsetof(WebGameInventory_SupportGetAssetHistory, Callback) == 0x000000, "Member 'WebGameInventory_SupportGetAssetHistory::Callback' has a wrong offset!");
static_assert(offsetof(WebGameInventory_SupportGetAssetHistory, Key) == 0x000010, "Member 'WebGameInventory_SupportGetAssetHistory::Key' has a wrong offset!");
static_assert(offsetof(WebGameInventory_SupportGetAssetHistory, AppID) == 0x000020, "Member 'WebGameInventory_SupportGetAssetHistory::AppID' has a wrong offset!");
static_assert(offsetof(WebGameInventory_SupportGetAssetHistory, AssetId) == 0x000028, "Member 'WebGameInventory_SupportGetAssetHistory::AssetId' has a wrong offset!");
static_assert(offsetof(WebGameInventory_SupportGetAssetHistory, ContextId) == 0x000038, "Member 'WebGameInventory_SupportGetAssetHistory::ContextId' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetHistoryCommandDetails.GetHistoryCommandDetailsAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arguments;                                         // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetHistoryCommandDetails* ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, Command) == 0x000030, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::Command' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, ContextId) == 0x000040, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::ContextId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, Arguments) == 0x000050, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::Arguments' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionGetHistoryCommandDetails_GetHistoryCommandDetailsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetUserHistory.GetUserHistoryAsync
// 0x0050 (0x0050 - 0x0000)
struct SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetUserHistory* ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync) == 0x000050, "Wrong size on SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, ContextId) == 0x000030, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::ContextId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, StartTime) == 0x000040, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::StartTime' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, EndTime) == 0x000044, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::EndTime' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync, ReturnValue) == 0x000048, "Member 'SteamCoreWebAsyncActionGetUserHistory_GetUserHistoryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionHistoryExecuteCommand.HistoryExecuteCommandAsync
// 0x0050 (0x0050 - 0x0000)
struct SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorId;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionHistoryExecuteCommand* ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync");
static_assert(sizeof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync) == 0x000050, "Wrong size on SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync");
static_assert(offsetof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync, ContextId) == 0x000030, "Member 'SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync::ContextId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync, ActorId) == 0x000040, "Member 'SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync::ActorId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync, ReturnValue) == 0x000048, "Member 'SteamCoreWebAsyncActionHistoryExecuteCommand_HistoryExecuteCommandAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionSupportGetAssetHistory.SupportGetAssetHistoryAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextId;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionSupportGetAssetHistory* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync, AssetId) == 0x000020, "Member 'SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync::AssetId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync, ContextId) == 0x000030, "Member 'SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync::ContextId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionSupportGetAssetHistory_SupportGetAssetHistoryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebGameNotificationsService.CreateSession
// 0x0068 (0x0068 - 0x0000)
struct WebGameNotificationsService_CreateSession final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Context;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Users;                                             // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameNotificationsService_CreateSession) == 0x000008, "Wrong alignment on WebGameNotificationsService_CreateSession");
static_assert(sizeof(WebGameNotificationsService_CreateSession) == 0x000068, "Wrong size on WebGameNotificationsService_CreateSession");
static_assert(offsetof(WebGameNotificationsService_CreateSession, Callback) == 0x000000, "Member 'WebGameNotificationsService_CreateSession::Callback' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_CreateSession, Key) == 0x000010, "Member 'WebGameNotificationsService_CreateSession::Key' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_CreateSession, AppID) == 0x000020, "Member 'WebGameNotificationsService_CreateSession::AppID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_CreateSession, Context) == 0x000028, "Member 'WebGameNotificationsService_CreateSession::Context' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_CreateSession, Title) == 0x000038, "Member 'WebGameNotificationsService_CreateSession::Title' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_CreateSession, Users) == 0x000048, "Member 'WebGameNotificationsService_CreateSession::Users' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_CreateSession, SteamID) == 0x000058, "Member 'WebGameNotificationsService_CreateSession::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebGameNotificationsService.DeleteSession
// 0x0048 (0x0048 - 0x0000)
struct WebGameNotificationsService_DeleteSession final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameNotificationsService_DeleteSession) == 0x000008, "Wrong alignment on WebGameNotificationsService_DeleteSession");
static_assert(sizeof(WebGameNotificationsService_DeleteSession) == 0x000048, "Wrong size on WebGameNotificationsService_DeleteSession");
static_assert(offsetof(WebGameNotificationsService_DeleteSession, Callback) == 0x000000, "Member 'WebGameNotificationsService_DeleteSession::Callback' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_DeleteSession, Key) == 0x000010, "Member 'WebGameNotificationsService_DeleteSession::Key' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_DeleteSession, SessionID) == 0x000020, "Member 'WebGameNotificationsService_DeleteSession::SessionID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_DeleteSession, AppID) == 0x000030, "Member 'WebGameNotificationsService_DeleteSession::AppID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_DeleteSession, SteamID) == 0x000038, "Member 'WebGameNotificationsService_DeleteSession::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebGameNotificationsService.DeleteSessionBatch
// 0x0038 (0x0038 - 0x0000)
struct WebGameNotificationsService_DeleteSessionBatch final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebGameNotificationsService_DeleteSessionBatch) == 0x000008, "Wrong alignment on WebGameNotificationsService_DeleteSessionBatch");
static_assert(sizeof(WebGameNotificationsService_DeleteSessionBatch) == 0x000038, "Wrong size on WebGameNotificationsService_DeleteSessionBatch");
static_assert(offsetof(WebGameNotificationsService_DeleteSessionBatch, Callback) == 0x000000, "Member 'WebGameNotificationsService_DeleteSessionBatch::Callback' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_DeleteSessionBatch, Key) == 0x000010, "Member 'WebGameNotificationsService_DeleteSessionBatch::Key' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_DeleteSessionBatch, SessionID) == 0x000020, "Member 'WebGameNotificationsService_DeleteSessionBatch::SessionID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_DeleteSessionBatch, AppID) == 0x000030, "Member 'WebGameNotificationsService_DeleteSessionBatch::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebGameNotificationsService.EnumerateSessionsForApp
// 0x0050 (0x0050 - 0x0000)
struct WebGameNotificationsService_EnumerateSessionsForApp final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAllUserMessages;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAuthUserMessage;                           // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameNotificationsService_EnumerateSessionsForApp) == 0x000008, "Wrong alignment on WebGameNotificationsService_EnumerateSessionsForApp");
static_assert(sizeof(WebGameNotificationsService_EnumerateSessionsForApp) == 0x000050, "Wrong size on WebGameNotificationsService_EnumerateSessionsForApp");
static_assert(offsetof(WebGameNotificationsService_EnumerateSessionsForApp, Callback) == 0x000000, "Member 'WebGameNotificationsService_EnumerateSessionsForApp::Callback' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_EnumerateSessionsForApp, Key) == 0x000010, "Member 'WebGameNotificationsService_EnumerateSessionsForApp::Key' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_EnumerateSessionsForApp, AppID) == 0x000020, "Member 'WebGameNotificationsService_EnumerateSessionsForApp::AppID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_EnumerateSessionsForApp, SteamID) == 0x000028, "Member 'WebGameNotificationsService_EnumerateSessionsForApp::SteamID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_EnumerateSessionsForApp, bIncludeAllUserMessages) == 0x000038, "Member 'WebGameNotificationsService_EnumerateSessionsForApp::bIncludeAllUserMessages' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_EnumerateSessionsForApp, bIncludeAuthUserMessage) == 0x000039, "Member 'WebGameNotificationsService_EnumerateSessionsForApp::bIncludeAuthUserMessage' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_EnumerateSessionsForApp, Language) == 0x000040, "Member 'WebGameNotificationsService_EnumerateSessionsForApp::Language' has a wrong offset!");

// Function SteamCoreWeb.WebGameNotificationsService.GetSessionDetailsForApp
// 0x0048 (0x0048 - 0x0000)
struct WebGameNotificationsService_GetSessionDetailsForApp final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sessions;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameNotificationsService_GetSessionDetailsForApp) == 0x000008, "Wrong alignment on WebGameNotificationsService_GetSessionDetailsForApp");
static_assert(sizeof(WebGameNotificationsService_GetSessionDetailsForApp) == 0x000048, "Wrong size on WebGameNotificationsService_GetSessionDetailsForApp");
static_assert(offsetof(WebGameNotificationsService_GetSessionDetailsForApp, Callback) == 0x000000, "Member 'WebGameNotificationsService_GetSessionDetailsForApp::Callback' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_GetSessionDetailsForApp, Key) == 0x000010, "Member 'WebGameNotificationsService_GetSessionDetailsForApp::Key' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_GetSessionDetailsForApp, Sessions) == 0x000020, "Member 'WebGameNotificationsService_GetSessionDetailsForApp::Sessions' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_GetSessionDetailsForApp, AppID) == 0x000030, "Member 'WebGameNotificationsService_GetSessionDetailsForApp::AppID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_GetSessionDetailsForApp, Language) == 0x000038, "Member 'WebGameNotificationsService_GetSessionDetailsForApp::Language' has a wrong offset!");

// Function SteamCoreWeb.WebGameNotificationsService.RequestNotifications
// 0x0038 (0x0038 - 0x0000)
struct WebGameNotificationsService_RequestNotifications final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebGameNotificationsService_RequestNotifications) == 0x000008, "Wrong alignment on WebGameNotificationsService_RequestNotifications");
static_assert(sizeof(WebGameNotificationsService_RequestNotifications) == 0x000038, "Wrong size on WebGameNotificationsService_RequestNotifications");
static_assert(offsetof(WebGameNotificationsService_RequestNotifications, Callback) == 0x000000, "Member 'WebGameNotificationsService_RequestNotifications::Callback' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_RequestNotifications, Key) == 0x000010, "Member 'WebGameNotificationsService_RequestNotifications::Key' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_RequestNotifications, SteamID) == 0x000020, "Member 'WebGameNotificationsService_RequestNotifications::SteamID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_RequestNotifications, AppID) == 0x000030, "Member 'WebGameNotificationsService_RequestNotifications::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebGameNotificationsService.UpdateSession
// 0x0068 (0x0068 - 0x0000)
struct WebGameNotificationsService_UpdateSession final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Users;                                             // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameNotificationsService_UpdateSession) == 0x000008, "Wrong alignment on WebGameNotificationsService_UpdateSession");
static_assert(sizeof(WebGameNotificationsService_UpdateSession) == 0x000068, "Wrong size on WebGameNotificationsService_UpdateSession");
static_assert(offsetof(WebGameNotificationsService_UpdateSession, Callback) == 0x000000, "Member 'WebGameNotificationsService_UpdateSession::Callback' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_UpdateSession, Key) == 0x000010, "Member 'WebGameNotificationsService_UpdateSession::Key' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_UpdateSession, SessionID) == 0x000020, "Member 'WebGameNotificationsService_UpdateSession::SessionID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_UpdateSession, AppID) == 0x000030, "Member 'WebGameNotificationsService_UpdateSession::AppID' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_UpdateSession, Title) == 0x000038, "Member 'WebGameNotificationsService_UpdateSession::Title' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_UpdateSession, Users) == 0x000048, "Member 'WebGameNotificationsService_UpdateSession::Users' has a wrong offset!");
static_assert(offsetof(WebGameNotificationsService_UpdateSession, SteamID) == 0x000058, "Member 'WebGameNotificationsService_UpdateSession::SteamID' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionCreateSession.CreateSessionAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionCreateSession_CreateSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Context;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Users;                                             // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionCreateSession*  ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionCreateSession_CreateSessionAsync");
static_assert(sizeof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionCreateSession_CreateSessionAsync");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, Context) == 0x000020, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::Context' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, Title) == 0x000030, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::Title' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, Users) == 0x000040, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::Users' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, SteamID) == 0x000050, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCreateSession_CreateSessionAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionCreateSession_CreateSessionAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionUpdateSession.UpdateSessionAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Users;                                             // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionUpdateSession*  ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync");
static_assert(sizeof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, SessionID) == 0x000018, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::SessionID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, Title) == 0x000030, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::Title' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, Users) == 0x000040, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::Users' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, SteamID) == 0x000050, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionUpdateSession_UpdateSessionAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionEnumerateSessionsForApp.EnumerateSessionsForAppAsync
// 0x0050 (0x0050 - 0x0000)
struct SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAllUserMessages;                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAuthUserMessage;                           // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionEnumerateSessionsForApp* ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync");
static_assert(sizeof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync) == 0x000050, "Wrong size on SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, bIncludeAllUserMessages) == 0x000030, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::bIncludeAllUserMessages' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, bIncludeAuthUserMessage) == 0x000031, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::bIncludeAuthUserMessage' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, Language) == 0x000038, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync, ReturnValue) == 0x000048, "Member 'SteamCoreWebAsyncActionEnumerateSessionsForApp_EnumerateSessionsForAppAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetSessionDetailsForApp.GetSessionDetailsForAppAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sessions;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetSessionDetailsForApp* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync, Sessions) == 0x000018, "Member 'SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync::Sessions' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync, Language) == 0x000030, "Member 'SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetSessionDetailsForApp_GetSessionDetailsForAppAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRequestNotifications.RequestNotificationsAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionRequestNotifications* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionRequestNotifications_RequestNotificationsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionDeleteSession.DeleteSessionAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionDeleteSession*  ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync");
static_assert(sizeof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync, SessionID) == 0x000018, "Member 'SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync::SessionID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync, SteamID) == 0x000030, "Member 'SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionDeleteSession_DeleteSessionAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionDeleteSessionBatch.DeleteSessionBatchAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionDeleteSessionBatch* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync");
static_assert(sizeof(SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync, SessionID) == 0x000018, "Member 'SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync::SessionID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionDeleteSessionBatch_DeleteSessionBatchAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.CreateAccount
// 0x0038 (0x0038 - 0x0000)
struct WebGameServersService_CreateAccount final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Memo;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_CreateAccount) == 0x000008, "Wrong alignment on WebGameServersService_CreateAccount");
static_assert(sizeof(WebGameServersService_CreateAccount) == 0x000038, "Wrong size on WebGameServersService_CreateAccount");
static_assert(offsetof(WebGameServersService_CreateAccount, Callback) == 0x000000, "Member 'WebGameServersService_CreateAccount::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_CreateAccount, Key) == 0x000010, "Member 'WebGameServersService_CreateAccount::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_CreateAccount, AppID) == 0x000020, "Member 'WebGameServersService_CreateAccount::AppID' has a wrong offset!");
static_assert(offsetof(WebGameServersService_CreateAccount, Memo) == 0x000028, "Member 'WebGameServersService_CreateAccount::Memo' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.DeleteAccount
// 0x0030 (0x0030 - 0x0000)
struct WebGameServersService_DeleteAccount final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_DeleteAccount) == 0x000008, "Wrong alignment on WebGameServersService_DeleteAccount");
static_assert(sizeof(WebGameServersService_DeleteAccount) == 0x000030, "Wrong size on WebGameServersService_DeleteAccount");
static_assert(offsetof(WebGameServersService_DeleteAccount, Callback) == 0x000000, "Member 'WebGameServersService_DeleteAccount::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_DeleteAccount, Key) == 0x000010, "Member 'WebGameServersService_DeleteAccount::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_DeleteAccount, SteamID) == 0x000020, "Member 'WebGameServersService_DeleteAccount::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.GetAccountList
// 0x0020 (0x0020 - 0x0000)
struct WebGameServersService_GetAccountList final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_GetAccountList) == 0x000008, "Wrong alignment on WebGameServersService_GetAccountList");
static_assert(sizeof(WebGameServersService_GetAccountList) == 0x000020, "Wrong size on WebGameServersService_GetAccountList");
static_assert(offsetof(WebGameServersService_GetAccountList, Callback) == 0x000000, "Member 'WebGameServersService_GetAccountList::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_GetAccountList, Key) == 0x000010, "Member 'WebGameServersService_GetAccountList::Key' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.GetAccountPublicInfo
// 0x0030 (0x0030 - 0x0000)
struct WebGameServersService_GetAccountPublicInfo final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_GetAccountPublicInfo) == 0x000008, "Wrong alignment on WebGameServersService_GetAccountPublicInfo");
static_assert(sizeof(WebGameServersService_GetAccountPublicInfo) == 0x000030, "Wrong size on WebGameServersService_GetAccountPublicInfo");
static_assert(offsetof(WebGameServersService_GetAccountPublicInfo, Callback) == 0x000000, "Member 'WebGameServersService_GetAccountPublicInfo::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_GetAccountPublicInfo, Key) == 0x000010, "Member 'WebGameServersService_GetAccountPublicInfo::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_GetAccountPublicInfo, SteamID) == 0x000020, "Member 'WebGameServersService_GetAccountPublicInfo::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.GetServerIPsBySteamID
// 0x0030 (0x0030 - 0x0000)
struct WebGameServersService_GetServerIPsBySteamID final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerSteamId;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_GetServerIPsBySteamID) == 0x000008, "Wrong alignment on WebGameServersService_GetServerIPsBySteamID");
static_assert(sizeof(WebGameServersService_GetServerIPsBySteamID) == 0x000030, "Wrong size on WebGameServersService_GetServerIPsBySteamID");
static_assert(offsetof(WebGameServersService_GetServerIPsBySteamID, Callback) == 0x000000, "Member 'WebGameServersService_GetServerIPsBySteamID::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_GetServerIPsBySteamID, Key) == 0x000010, "Member 'WebGameServersService_GetServerIPsBySteamID::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_GetServerIPsBySteamID, ServerSteamId) == 0x000020, "Member 'WebGameServersService_GetServerIPsBySteamID::ServerSteamId' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.GetServerSteamIDsByIP
// 0x0030 (0x0030 - 0x0000)
struct WebGameServersService_GetServerSteamIDsByIP final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerIP;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_GetServerSteamIDsByIP) == 0x000008, "Wrong alignment on WebGameServersService_GetServerSteamIDsByIP");
static_assert(sizeof(WebGameServersService_GetServerSteamIDsByIP) == 0x000030, "Wrong size on WebGameServersService_GetServerSteamIDsByIP");
static_assert(offsetof(WebGameServersService_GetServerSteamIDsByIP, Callback) == 0x000000, "Member 'WebGameServersService_GetServerSteamIDsByIP::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_GetServerSteamIDsByIP, Key) == 0x000010, "Member 'WebGameServersService_GetServerSteamIDsByIP::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_GetServerSteamIDsByIP, ServerIP) == 0x000020, "Member 'WebGameServersService_GetServerSteamIDsByIP::ServerIP' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.QueryLoginToken
// 0x0030 (0x0030 - 0x0000)
struct WebGameServersService_QueryLoginToken final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginToken;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_QueryLoginToken) == 0x000008, "Wrong alignment on WebGameServersService_QueryLoginToken");
static_assert(sizeof(WebGameServersService_QueryLoginToken) == 0x000030, "Wrong size on WebGameServersService_QueryLoginToken");
static_assert(offsetof(WebGameServersService_QueryLoginToken, Callback) == 0x000000, "Member 'WebGameServersService_QueryLoginToken::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_QueryLoginToken, Key) == 0x000010, "Member 'WebGameServersService_QueryLoginToken::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_QueryLoginToken, LoginToken) == 0x000020, "Member 'WebGameServersService_QueryLoginToken::LoginToken' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.ResetLoginToken
// 0x0030 (0x0030 - 0x0000)
struct WebGameServersService_ResetLoginToken final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_ResetLoginToken) == 0x000008, "Wrong alignment on WebGameServersService_ResetLoginToken");
static_assert(sizeof(WebGameServersService_ResetLoginToken) == 0x000030, "Wrong size on WebGameServersService_ResetLoginToken");
static_assert(offsetof(WebGameServersService_ResetLoginToken, Callback) == 0x000000, "Member 'WebGameServersService_ResetLoginToken::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_ResetLoginToken, Key) == 0x000010, "Member 'WebGameServersService_ResetLoginToken::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_ResetLoginToken, SteamID) == 0x000020, "Member 'WebGameServersService_ResetLoginToken::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.SetBanStatus
// 0x0038 (0x0038 - 0x0000)
struct WebGameServersService_SetBanStatus final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBanned;                                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         banSeconds;                                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_SetBanStatus) == 0x000008, "Wrong alignment on WebGameServersService_SetBanStatus");
static_assert(sizeof(WebGameServersService_SetBanStatus) == 0x000038, "Wrong size on WebGameServersService_SetBanStatus");
static_assert(offsetof(WebGameServersService_SetBanStatus, Callback) == 0x000000, "Member 'WebGameServersService_SetBanStatus::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_SetBanStatus, Key) == 0x000010, "Member 'WebGameServersService_SetBanStatus::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_SetBanStatus, SteamID) == 0x000020, "Member 'WebGameServersService_SetBanStatus::SteamID' has a wrong offset!");
static_assert(offsetof(WebGameServersService_SetBanStatus, bBanned) == 0x000030, "Member 'WebGameServersService_SetBanStatus::bBanned' has a wrong offset!");
static_assert(offsetof(WebGameServersService_SetBanStatus, banSeconds) == 0x000034, "Member 'WebGameServersService_SetBanStatus::banSeconds' has a wrong offset!");

// Function SteamCoreWeb.WebGameServersService.SetMemo
// 0x0040 (0x0040 - 0x0000)
struct WebGameServersService_SetMemo final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Memo;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebGameServersService_SetMemo) == 0x000008, "Wrong alignment on WebGameServersService_SetMemo");
static_assert(sizeof(WebGameServersService_SetMemo) == 0x000040, "Wrong size on WebGameServersService_SetMemo");
static_assert(offsetof(WebGameServersService_SetMemo, Callback) == 0x000000, "Member 'WebGameServersService_SetMemo::Callback' has a wrong offset!");
static_assert(offsetof(WebGameServersService_SetMemo, Key) == 0x000010, "Member 'WebGameServersService_SetMemo::Key' has a wrong offset!");
static_assert(offsetof(WebGameServersService_SetMemo, SteamID) == 0x000020, "Member 'WebGameServersService_SetMemo::SteamID' has a wrong offset!");
static_assert(offsetof(WebGameServersService_SetMemo, Memo) == 0x000030, "Member 'WebGameServersService_SetMemo::Memo' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.AddItem
// 0x0078 (0x0078 - 0x0000)
struct WebInventoryService_AddItem final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemdefId;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ItemPropsJson;                                     // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestID;                                         // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTradeRestriction;                                 // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebInventoryService_AddItem) == 0x000008, "Wrong alignment on WebInventoryService_AddItem");
static_assert(sizeof(WebInventoryService_AddItem) == 0x000078, "Wrong size on WebInventoryService_AddItem");
static_assert(offsetof(WebInventoryService_AddItem, Callback) == 0x000000, "Member 'WebInventoryService_AddItem::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, Key) == 0x000010, "Member 'WebInventoryService_AddItem::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, AppID) == 0x000020, "Member 'WebInventoryService_AddItem::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, ItemdefId) == 0x000028, "Member 'WebInventoryService_AddItem::ItemdefId' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, ItemPropsJson) == 0x000038, "Member 'WebInventoryService_AddItem::ItemPropsJson' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, SteamID) == 0x000048, "Member 'WebInventoryService_AddItem::SteamID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, bNotify) == 0x000058, "Member 'WebInventoryService_AddItem::bNotify' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, RequestID) == 0x000060, "Member 'WebInventoryService_AddItem::RequestID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddItem, bTradeRestriction) == 0x000070, "Member 'WebInventoryService_AddItem::bTradeRestriction' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.AddPromoItem
// 0x0060 (0x0060 - 0x0000)
struct WebInventoryService_AddPromoItem final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemdefId;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemPropsJson;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestID;                                         // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebInventoryService_AddPromoItem) == 0x000008, "Wrong alignment on WebInventoryService_AddPromoItem");
static_assert(sizeof(WebInventoryService_AddPromoItem) == 0x000060, "Wrong size on WebInventoryService_AddPromoItem");
static_assert(offsetof(WebInventoryService_AddPromoItem, Callback) == 0x000000, "Member 'WebInventoryService_AddPromoItem::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddPromoItem, Key) == 0x000010, "Member 'WebInventoryService_AddPromoItem::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddPromoItem, AppID) == 0x000020, "Member 'WebInventoryService_AddPromoItem::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddPromoItem, ItemdefId) == 0x000024, "Member 'WebInventoryService_AddPromoItem::ItemdefId' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddPromoItem, ItemPropsJson) == 0x000028, "Member 'WebInventoryService_AddPromoItem::ItemPropsJson' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddPromoItem, SteamID) == 0x000038, "Member 'WebInventoryService_AddPromoItem::SteamID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddPromoItem, bNotify) == 0x000048, "Member 'WebInventoryService_AddPromoItem::bNotify' has a wrong offset!");
static_assert(offsetof(WebInventoryService_AddPromoItem, RequestID) == 0x000050, "Member 'WebInventoryService_AddPromoItem::RequestID' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.Consolidate
// 0x0050 (0x0050 - 0x0000)
struct WebInventoryService_Consolidate final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemdefIDs;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebInventoryService_Consolidate) == 0x000008, "Wrong alignment on WebInventoryService_Consolidate");
static_assert(sizeof(WebInventoryService_Consolidate) == 0x000050, "Wrong size on WebInventoryService_Consolidate");
static_assert(offsetof(WebInventoryService_Consolidate, Callback) == 0x000000, "Member 'WebInventoryService_Consolidate::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_Consolidate, Key) == 0x000010, "Member 'WebInventoryService_Consolidate::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_Consolidate, AppID) == 0x000020, "Member 'WebInventoryService_Consolidate::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_Consolidate, SteamID) == 0x000028, "Member 'WebInventoryService_Consolidate::SteamID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_Consolidate, ItemdefIDs) == 0x000038, "Member 'WebInventoryService_Consolidate::ItemdefIDs' has a wrong offset!");
static_assert(offsetof(WebInventoryService_Consolidate, bForce) == 0x000048, "Member 'WebInventoryService_Consolidate::bForce' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.ConsumeItem
// 0x0068 (0x0068 - 0x0000)
struct WebInventoryService_ConsumeItem final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Quantity;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestID;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebInventoryService_ConsumeItem) == 0x000008, "Wrong alignment on WebInventoryService_ConsumeItem");
static_assert(sizeof(WebInventoryService_ConsumeItem) == 0x000068, "Wrong size on WebInventoryService_ConsumeItem");
static_assert(offsetof(WebInventoryService_ConsumeItem, Callback) == 0x000000, "Member 'WebInventoryService_ConsumeItem::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ConsumeItem, Key) == 0x000010, "Member 'WebInventoryService_ConsumeItem::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ConsumeItem, AppID) == 0x000020, "Member 'WebInventoryService_ConsumeItem::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ConsumeItem, ItemId) == 0x000028, "Member 'WebInventoryService_ConsumeItem::ItemId' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ConsumeItem, Quantity) == 0x000038, "Member 'WebInventoryService_ConsumeItem::Quantity' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ConsumeItem, SteamID) == 0x000048, "Member 'WebInventoryService_ConsumeItem::SteamID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ConsumeItem, RequestID) == 0x000058, "Member 'WebInventoryService_ConsumeItem::RequestID' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.ExchangeItem
// 0x0068 (0x0068 - 0x0000)
struct WebInventoryService_ExchangeItem final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MaterialsItemID;                                   // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MaterialsQuantity;                                 // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OutputItemdefId;                                   // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebInventoryService_ExchangeItem) == 0x000008, "Wrong alignment on WebInventoryService_ExchangeItem");
static_assert(sizeof(WebInventoryService_ExchangeItem) == 0x000068, "Wrong size on WebInventoryService_ExchangeItem");
static_assert(offsetof(WebInventoryService_ExchangeItem, Callback) == 0x000000, "Member 'WebInventoryService_ExchangeItem::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ExchangeItem, Key) == 0x000010, "Member 'WebInventoryService_ExchangeItem::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ExchangeItem, AppID) == 0x000020, "Member 'WebInventoryService_ExchangeItem::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ExchangeItem, SteamID) == 0x000028, "Member 'WebInventoryService_ExchangeItem::SteamID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ExchangeItem, MaterialsItemID) == 0x000038, "Member 'WebInventoryService_ExchangeItem::MaterialsItemID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ExchangeItem, MaterialsQuantity) == 0x000048, "Member 'WebInventoryService_ExchangeItem::MaterialsQuantity' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ExchangeItem, OutputItemdefId) == 0x000058, "Member 'WebInventoryService_ExchangeItem::OutputItemdefId' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.GetInventory
// 0x0038 (0x0038 - 0x0000)
struct WebInventoryService_GetInventory final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebInventoryService_GetInventory) == 0x000008, "Wrong alignment on WebInventoryService_GetInventory");
static_assert(sizeof(WebInventoryService_GetInventory) == 0x000038, "Wrong size on WebInventoryService_GetInventory");
static_assert(offsetof(WebInventoryService_GetInventory, Callback) == 0x000000, "Member 'WebInventoryService_GetInventory::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetInventory, Key) == 0x000010, "Member 'WebInventoryService_GetInventory::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetInventory, AppID) == 0x000020, "Member 'WebInventoryService_GetInventory::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetInventory, SteamID) == 0x000028, "Member 'WebInventoryService_GetInventory::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.GetItemDefs
// 0x0060 (0x0060 - 0x0000)
struct WebInventoryService_GetItemDefs final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifiedSince;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemdefIDs;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 WorkshopIDs;                                       // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CacheMaxAgeSeconds;                                // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebInventoryService_GetItemDefs) == 0x000008, "Wrong alignment on WebInventoryService_GetItemDefs");
static_assert(sizeof(WebInventoryService_GetItemDefs) == 0x000060, "Wrong size on WebInventoryService_GetItemDefs");
static_assert(offsetof(WebInventoryService_GetItemDefs, Callback) == 0x000000, "Member 'WebInventoryService_GetItemDefs::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetItemDefs, Key) == 0x000010, "Member 'WebInventoryService_GetItemDefs::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetItemDefs, AppID) == 0x000020, "Member 'WebInventoryService_GetItemDefs::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetItemDefs, ModifiedSince) == 0x000028, "Member 'WebInventoryService_GetItemDefs::ModifiedSince' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetItemDefs, ItemdefIDs) == 0x000038, "Member 'WebInventoryService_GetItemDefs::ItemdefIDs' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetItemDefs, WorkshopIDs) == 0x000048, "Member 'WebInventoryService_GetItemDefs::WorkshopIDs' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetItemDefs, CacheMaxAgeSeconds) == 0x000058, "Member 'WebInventoryService_GetItemDefs::CacheMaxAgeSeconds' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.GetPriceSheet
// 0x0028 (0x0028 - 0x0000)
struct WebInventoryService_GetPriceSheet final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebInventoryService_GetPriceSheet) == 0x000008, "Wrong alignment on WebInventoryService_GetPriceSheet");
static_assert(sizeof(WebInventoryService_GetPriceSheet) == 0x000028, "Wrong size on WebInventoryService_GetPriceSheet");
static_assert(offsetof(WebInventoryService_GetPriceSheet, Callback) == 0x000000, "Member 'WebInventoryService_GetPriceSheet::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetPriceSheet, Key) == 0x000010, "Member 'WebInventoryService_GetPriceSheet::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetPriceSheet, Currency) == 0x000020, "Member 'WebInventoryService_GetPriceSheet::Currency' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.GetQuantity
// 0x0050 (0x0050 - 0x0000)
struct WebInventoryService_GetQuantity final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemdefIDs;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebInventoryService_GetQuantity) == 0x000008, "Wrong alignment on WebInventoryService_GetQuantity");
static_assert(sizeof(WebInventoryService_GetQuantity) == 0x000050, "Wrong size on WebInventoryService_GetQuantity");
static_assert(offsetof(WebInventoryService_GetQuantity, Callback) == 0x000000, "Member 'WebInventoryService_GetQuantity::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetQuantity, Key) == 0x000010, "Member 'WebInventoryService_GetQuantity::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetQuantity, AppID) == 0x000020, "Member 'WebInventoryService_GetQuantity::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetQuantity, SteamID) == 0x000028, "Member 'WebInventoryService_GetQuantity::SteamID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetQuantity, ItemdefIDs) == 0x000038, "Member 'WebInventoryService_GetQuantity::ItemdefIDs' has a wrong offset!");
static_assert(offsetof(WebInventoryService_GetQuantity, bForce) == 0x000048, "Member 'WebInventoryService_GetQuantity::bForce' has a wrong offset!");

// Function SteamCoreWeb.WebInventoryService.ModifyItems
// 0x0060 (0x0060 - 0x0000)
struct WebInventoryService_ModifyItems final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InputJson;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Updates;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebInventoryService_ModifyItems) == 0x000008, "Wrong alignment on WebInventoryService_ModifyItems");
static_assert(sizeof(WebInventoryService_ModifyItems) == 0x000060, "Wrong size on WebInventoryService_ModifyItems");
static_assert(offsetof(WebInventoryService_ModifyItems, Callback) == 0x000000, "Member 'WebInventoryService_ModifyItems::Callback' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ModifyItems, Key) == 0x000010, "Member 'WebInventoryService_ModifyItems::Key' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ModifyItems, AppID) == 0x000020, "Member 'WebInventoryService_ModifyItems::AppID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ModifyItems, InputJson) == 0x000028, "Member 'WebInventoryService_ModifyItems::InputJson' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ModifyItems, SteamID) == 0x000038, "Member 'WebInventoryService_ModifyItems::SteamID' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ModifyItems, Timestamp) == 0x000048, "Member 'WebInventoryService_ModifyItems::Timestamp' has a wrong offset!");
static_assert(offsetof(WebInventoryService_ModifyItems, Updates) == 0x000050, "Member 'WebInventoryService_ModifyItems::Updates' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionAddItem.AddItemAsync
// 0x0078 (0x0078 - 0x0000)
struct SteamCoreWebAsyncActionAddItem_AddItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemdefId;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ItemPropsJson;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestID;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTradeRestriction;                                 // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionAddItem*        ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionAddItem_AddItemAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionAddItem_AddItemAsync");
static_assert(sizeof(SteamCoreWebAsyncActionAddItem_AddItemAsync) == 0x000078, "Wrong size on SteamCoreWebAsyncActionAddItem_AddItemAsync");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, ItemdefId) == 0x000020, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::ItemdefId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, ItemPropsJson) == 0x000030, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::ItemPropsJson' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, SteamID) == 0x000040, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, bNotify) == 0x000050, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::bNotify' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, RequestID) == 0x000058, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::RequestID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, bTradeRestriction) == 0x000068, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::bTradeRestriction' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddItem_AddItemAsync, ReturnValue) == 0x000070, "Member 'SteamCoreWebAsyncActionAddItem_AddItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionAddPromoItem.AddPromoItemAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemdefId;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemPropsJson;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestID;                                         // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionAddPromoItem*   ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync");
static_assert(sizeof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, ItemdefId) == 0x00001C, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::ItemdefId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, ItemPropsJson) == 0x000020, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::ItemPropsJson' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, SteamID) == 0x000030, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, bNotify) == 0x000040, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::bNotify' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, RequestID) == 0x000048, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::RequestID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionAddPromoItem_AddPromoItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionConsumeItem.ConsumeItemAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Quantity;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestID;                                         // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionConsumeItem*    ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync");
static_assert(sizeof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, ItemId) == 0x000020, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::ItemId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, Quantity) == 0x000030, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::Quantity' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, SteamID) == 0x000040, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, RequestID) == 0x000050, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::RequestID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionConsumeItem_ConsumeItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionExchangeItem.ExchangeItemAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MaterialsItemID;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MaterialsQuantity;                                 // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OutputItemdefId;                                   // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionExchangeItem*   ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync");
static_assert(sizeof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, MaterialsItemID) == 0x000030, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::MaterialsItemID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, MaterialsQuantity) == 0x000040, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::MaterialsQuantity' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, OutputItemdefId) == 0x000050, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::OutputItemdefId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionExchangeItem_ExchangeItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetInventory.GetInventoryAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionGetInventory_GetInventoryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetInventory*   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetInventory_GetInventoryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetInventory_GetInventoryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetInventory_GetInventoryAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionGetInventory_GetInventoryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetInventory_GetInventoryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetInventory_GetInventoryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetInventory_GetInventoryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetInventory_GetInventoryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetInventory_GetInventoryAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetInventory_GetInventoryAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetInventory_GetInventoryAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionGetInventory_GetInventoryAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetInventory_GetInventoryAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionGetInventory_GetInventoryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetItemDefs.GetItemDefsAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifiedSince;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemdefIDs;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 WorkshopIDs;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CacheMaxAgeSeconds;                                // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetItemDefs*    ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, ModifiedSince) == 0x000020, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::ModifiedSince' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, ItemdefIDs) == 0x000030, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::ItemdefIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, WorkshopIDs) == 0x000040, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::WorkshopIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, CacheMaxAgeSeconds) == 0x000050, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::CacheMaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionGetItemDefs_GetItemDefsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPriceSheet.GetPriceSheetAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetPriceSheet*  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync) == 0x000028, "Wrong size on SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync, Currency) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync::Currency' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync, ReturnValue) == 0x000020, "Member 'SteamCoreWebAsyncActionGetPriceSheet_GetPriceSheetAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionConsolidate.ConsolidateAsync
// 0x0050 (0x0050 - 0x0000)
struct SteamCoreWebAsyncActionConsolidate_ConsolidateAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemdefIDs;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionConsolidate*    ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionConsolidate_ConsolidateAsync");
static_assert(sizeof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync) == 0x000050, "Wrong size on SteamCoreWebAsyncActionConsolidate_ConsolidateAsync");
static_assert(offsetof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionConsolidate_ConsolidateAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionConsolidate_ConsolidateAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionConsolidate_ConsolidateAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionConsolidate_ConsolidateAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync, ItemdefIDs) == 0x000030, "Member 'SteamCoreWebAsyncActionConsolidate_ConsolidateAsync::ItemdefIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync, bForce) == 0x000040, "Member 'SteamCoreWebAsyncActionConsolidate_ConsolidateAsync::bForce' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionConsolidate_ConsolidateAsync, ReturnValue) == 0x000048, "Member 'SteamCoreWebAsyncActionConsolidate_ConsolidateAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetQuantity.GetQuantityAsync
// 0x0050 (0x0050 - 0x0000)
struct SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemdefIDs;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetQuantity*    ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync) == 0x000050, "Wrong size on SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync, ItemdefIDs) == 0x000030, "Member 'SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync::ItemdefIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync, bForce) == 0x000040, "Member 'SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync::bForce' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync, ReturnValue) == 0x000048, "Member 'SteamCoreWebAsyncActionGetQuantity_GetQuantityAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionModifyItems.ModifyItemsAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InputJson;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Updates;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionModifyItems*    ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, InputJson) == 0x000020, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::InputJson' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, SteamID) == 0x000030, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, Timestamp) == 0x000040, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::Timestamp' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, Updates) == 0x000048, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::Updates' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionModifyItems_ModifyItemsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebLeaderboards.DeleteLeaderboard
// 0x0038 (0x0038 - 0x0000)
struct WebLeaderboards_DeleteLeaderboard final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebLeaderboards_DeleteLeaderboard) == 0x000008, "Wrong alignment on WebLeaderboards_DeleteLeaderboard");
static_assert(sizeof(WebLeaderboards_DeleteLeaderboard) == 0x000038, "Wrong size on WebLeaderboards_DeleteLeaderboard");
static_assert(offsetof(WebLeaderboards_DeleteLeaderboard, Callback) == 0x000000, "Member 'WebLeaderboards_DeleteLeaderboard::Callback' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_DeleteLeaderboard, Key) == 0x000010, "Member 'WebLeaderboards_DeleteLeaderboard::Key' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_DeleteLeaderboard, AppID) == 0x000020, "Member 'WebLeaderboards_DeleteLeaderboard::AppID' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_DeleteLeaderboard, Name_0) == 0x000028, "Member 'WebLeaderboards_DeleteLeaderboard::Name_0' has a wrong offset!");

// Function SteamCoreWeb.WebLeaderboards.FindOrCreateLeaderboard
// 0x0060 (0x0060 - 0x0000)
struct WebLeaderboards_FindOrCreateLeaderboard final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SortMethod;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayType;                                       // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateIfNotFound;                                 // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyTrustedWrites;                                // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyFriendsReads;                                 // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebLeaderboards_FindOrCreateLeaderboard) == 0x000008, "Wrong alignment on WebLeaderboards_FindOrCreateLeaderboard");
static_assert(sizeof(WebLeaderboards_FindOrCreateLeaderboard) == 0x000060, "Wrong size on WebLeaderboards_FindOrCreateLeaderboard");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, Callback) == 0x000000, "Member 'WebLeaderboards_FindOrCreateLeaderboard::Callback' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, Key) == 0x000010, "Member 'WebLeaderboards_FindOrCreateLeaderboard::Key' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, AppID) == 0x000020, "Member 'WebLeaderboards_FindOrCreateLeaderboard::AppID' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, Name_0) == 0x000028, "Member 'WebLeaderboards_FindOrCreateLeaderboard::Name_0' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, SortMethod) == 0x000038, "Member 'WebLeaderboards_FindOrCreateLeaderboard::SortMethod' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, DisplayType) == 0x000048, "Member 'WebLeaderboards_FindOrCreateLeaderboard::DisplayType' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, bCreateIfNotFound) == 0x000058, "Member 'WebLeaderboards_FindOrCreateLeaderboard::bCreateIfNotFound' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, bOnlyTrustedWrites) == 0x000059, "Member 'WebLeaderboards_FindOrCreateLeaderboard::bOnlyTrustedWrites' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_FindOrCreateLeaderboard, bOnlyFriendsReads) == 0x00005A, "Member 'WebLeaderboards_FindOrCreateLeaderboard::bOnlyFriendsReads' has a wrong offset!");

// Function SteamCoreWeb.WebLeaderboards.GetLeaderboardEntries
// 0x0048 (0x0048 - 0x0000)
struct WebLeaderboards_GetLeaderboardEntries final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeStart;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeEnd;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaderboardId;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataRequest;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebLeaderboards_GetLeaderboardEntries) == 0x000008, "Wrong alignment on WebLeaderboards_GetLeaderboardEntries");
static_assert(sizeof(WebLeaderboards_GetLeaderboardEntries) == 0x000048, "Wrong size on WebLeaderboards_GetLeaderboardEntries");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, Callback) == 0x000000, "Member 'WebLeaderboards_GetLeaderboardEntries::Callback' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, Key) == 0x000010, "Member 'WebLeaderboards_GetLeaderboardEntries::Key' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, AppID) == 0x000020, "Member 'WebLeaderboards_GetLeaderboardEntries::AppID' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, RangeStart) == 0x000024, "Member 'WebLeaderboards_GetLeaderboardEntries::RangeStart' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, RangeEnd) == 0x000028, "Member 'WebLeaderboards_GetLeaderboardEntries::RangeEnd' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, LeaderboardId) == 0x00002C, "Member 'WebLeaderboards_GetLeaderboardEntries::LeaderboardId' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, DataRequest) == 0x000030, "Member 'WebLeaderboards_GetLeaderboardEntries::DataRequest' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardEntries, SteamID) == 0x000038, "Member 'WebLeaderboards_GetLeaderboardEntries::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebLeaderboards.GetLeaderboardsForGame
// 0x0028 (0x0028 - 0x0000)
struct WebLeaderboards_GetLeaderboardsForGame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebLeaderboards_GetLeaderboardsForGame) == 0x000008, "Wrong alignment on WebLeaderboards_GetLeaderboardsForGame");
static_assert(sizeof(WebLeaderboards_GetLeaderboardsForGame) == 0x000028, "Wrong size on WebLeaderboards_GetLeaderboardsForGame");
static_assert(offsetof(WebLeaderboards_GetLeaderboardsForGame, Callback) == 0x000000, "Member 'WebLeaderboards_GetLeaderboardsForGame::Callback' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardsForGame, Key) == 0x000010, "Member 'WebLeaderboards_GetLeaderboardsForGame::Key' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_GetLeaderboardsForGame, AppID) == 0x000020, "Member 'WebLeaderboards_GetLeaderboardsForGame::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebLeaderboards.ResetLeaderboard
// 0x0028 (0x0028 - 0x0000)
struct WebLeaderboards_ResetLeaderboard final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaderboardId;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebLeaderboards_ResetLeaderboard) == 0x000008, "Wrong alignment on WebLeaderboards_ResetLeaderboard");
static_assert(sizeof(WebLeaderboards_ResetLeaderboard) == 0x000028, "Wrong size on WebLeaderboards_ResetLeaderboard");
static_assert(offsetof(WebLeaderboards_ResetLeaderboard, Callback) == 0x000000, "Member 'WebLeaderboards_ResetLeaderboard::Callback' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_ResetLeaderboard, Key) == 0x000010, "Member 'WebLeaderboards_ResetLeaderboard::Key' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_ResetLeaderboard, AppID) == 0x000020, "Member 'WebLeaderboards_ResetLeaderboard::AppID' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_ResetLeaderboard, LeaderboardId) == 0x000024, "Member 'WebLeaderboards_ResetLeaderboard::LeaderboardId' has a wrong offset!");

// Function SteamCoreWeb.WebLeaderboards.SetLeaderboardScore
// 0x0060 (0x0060 - 0x0000)
struct WebLeaderboards_SetLeaderboardScore final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaderbordId;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Details;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ScoreMethod;                                       // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebLeaderboards_SetLeaderboardScore) == 0x000008, "Wrong alignment on WebLeaderboards_SetLeaderboardScore");
static_assert(sizeof(WebLeaderboards_SetLeaderboardScore) == 0x000060, "Wrong size on WebLeaderboards_SetLeaderboardScore");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, Callback) == 0x000000, "Member 'WebLeaderboards_SetLeaderboardScore::Callback' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, Key) == 0x000010, "Member 'WebLeaderboards_SetLeaderboardScore::Key' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, AppID) == 0x000020, "Member 'WebLeaderboards_SetLeaderboardScore::AppID' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, LeaderbordId) == 0x000024, "Member 'WebLeaderboards_SetLeaderboardScore::LeaderbordId' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, SteamID) == 0x000028, "Member 'WebLeaderboards_SetLeaderboardScore::SteamID' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, Score) == 0x000038, "Member 'WebLeaderboards_SetLeaderboardScore::Score' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, Details) == 0x000040, "Member 'WebLeaderboards_SetLeaderboardScore::Details' has a wrong offset!");
static_assert(offsetof(WebLeaderboards_SetLeaderboardScore, ScoreMethod) == 0x000050, "Member 'WebLeaderboards_SetLeaderboardScore::ScoreMethod' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionDeleteLeaderboard.DeleteLeaderboardAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionDeleteLeaderboard* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync");
static_assert(sizeof(SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync, Name_0) == 0x000020, "Member 'SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync::Name_0' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionDeleteLeaderboard_DeleteLeaderboardAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionFindOrCreateLeaderboard.FindOrCreateLeaderboardAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SortMethod;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayType;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateIfNotFound;                                 // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyTrustedWrites;                                // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyFriendsReads;                                 // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionFindOrCreateLeaderboard* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync");
static_assert(sizeof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, Name_0) == 0x000020, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::Name_0' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, SortMethod) == 0x000030, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::SortMethod' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, DisplayType) == 0x000040, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::DisplayType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, bCreateIfNotFound) == 0x000050, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::bCreateIfNotFound' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, bOnlyTrustedWrites) == 0x000051, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::bOnlyTrustedWrites' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, bOnlyFriendsReads) == 0x000052, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::bOnlyFriendsReads' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetLeaderboardEntries.GetLeaderboardEntriesAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeStart;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeEnd;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaderboardId;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataRequest;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetLeaderboardEntries* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, RangeStart) == 0x00001C, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::RangeStart' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, RangeEnd) == 0x000020, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::RangeEnd' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, LeaderboardId) == 0x000024, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::LeaderboardId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, DataRequest) == 0x000028, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::DataRequest' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, SteamID) == 0x000030, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetLeaderboardEntries_GetLeaderboardEntriesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetLeaderboardsForGame.GetLeaderboardsForGameAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetLeaderboardsForGame* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync) == 0x000028, "Wrong size on SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync, ReturnValue) == 0x000020, "Member 'SteamCoreWebAsyncActionGetLeaderboardsForGame_GetLeaderboardsForGameAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionResetLeaderboard.ResetLeaderboardAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaderboardId;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionResetLeaderboard* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync");
static_assert(sizeof(SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync) == 0x000028, "Wrong size on SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync");
static_assert(offsetof(SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync, LeaderboardId) == 0x00001C, "Member 'SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync::LeaderboardId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync, ReturnValue) == 0x000020, "Member 'SteamCoreWebAsyncActionResetLeaderboard_ResetLeaderboardAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionSetLeaderboardScore.SetLeaderboardScoreAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaderboardId;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Details;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ScoreMethod;                                       // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionSetLeaderboardScore* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync");
static_assert(sizeof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, LeaderboardId) == 0x00001C, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::LeaderboardId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, Score) == 0x000030, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::Score' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, Details) == 0x000038, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::Details' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, ScoreMethod) == 0x000048, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::ScoreMethod' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionSetLeaderboardScore_SetLeaderboardScoreAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebLobbyMatchmakingService.CreateLobby
// 0x0070 (0x0070 - 0x0000)
struct WebLobbyMatchmakingService_CreateLobby final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMembers;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreWebLobbyType                        LobbyType;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LobbyName;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputJson;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SteamIdInvitedMembers;                             // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LobbyMetaData;                                     // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebLobbyMatchmakingService_CreateLobby) == 0x000008, "Wrong alignment on WebLobbyMatchmakingService_CreateLobby");
static_assert(sizeof(WebLobbyMatchmakingService_CreateLobby) == 0x000070, "Wrong size on WebLobbyMatchmakingService_CreateLobby");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, Callback) == 0x000000, "Member 'WebLobbyMatchmakingService_CreateLobby::Callback' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, Key) == 0x000010, "Member 'WebLobbyMatchmakingService_CreateLobby::Key' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, AppID) == 0x000020, "Member 'WebLobbyMatchmakingService_CreateLobby::AppID' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, MaxMembers) == 0x000024, "Member 'WebLobbyMatchmakingService_CreateLobby::MaxMembers' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, LobbyType) == 0x000028, "Member 'WebLobbyMatchmakingService_CreateLobby::LobbyType' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, LobbyName) == 0x000030, "Member 'WebLobbyMatchmakingService_CreateLobby::LobbyName' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, InputJson) == 0x000040, "Member 'WebLobbyMatchmakingService_CreateLobby::InputJson' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, SteamIdInvitedMembers) == 0x000050, "Member 'WebLobbyMatchmakingService_CreateLobby::SteamIdInvitedMembers' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_CreateLobby, LobbyMetaData) == 0x000060, "Member 'WebLobbyMatchmakingService_CreateLobby::LobbyMetaData' has a wrong offset!");

// Function SteamCoreWeb.WebLobbyMatchmakingService.RemoveUserFromLobby
// 0x0058 (0x0058 - 0x0000)
struct WebLobbyMatchmakingService_RemoveUserFromLobby final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamIdToRemove;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamIDLobby;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputJson;                                         // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebLobbyMatchmakingService_RemoveUserFromLobby) == 0x000008, "Wrong alignment on WebLobbyMatchmakingService_RemoveUserFromLobby");
static_assert(sizeof(WebLobbyMatchmakingService_RemoveUserFromLobby) == 0x000058, "Wrong size on WebLobbyMatchmakingService_RemoveUserFromLobby");
static_assert(offsetof(WebLobbyMatchmakingService_RemoveUserFromLobby, Callback) == 0x000000, "Member 'WebLobbyMatchmakingService_RemoveUserFromLobby::Callback' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_RemoveUserFromLobby, Key) == 0x000010, "Member 'WebLobbyMatchmakingService_RemoveUserFromLobby::Key' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_RemoveUserFromLobby, AppID) == 0x000020, "Member 'WebLobbyMatchmakingService_RemoveUserFromLobby::AppID' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_RemoveUserFromLobby, SteamIdToRemove) == 0x000028, "Member 'WebLobbyMatchmakingService_RemoveUserFromLobby::SteamIdToRemove' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_RemoveUserFromLobby, SteamIDLobby) == 0x000038, "Member 'WebLobbyMatchmakingService_RemoveUserFromLobby::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(WebLobbyMatchmakingService_RemoveUserFromLobby, InputJson) == 0x000048, "Member 'WebLobbyMatchmakingService_RemoveUserFromLobby::InputJson' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.MakeTransactionID
// 0x0010 (0x0010 - 0x0000)
struct WebMicroTxn_MakeTransactionID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebMicroTxn_MakeTransactionID) == 0x000008, "Wrong alignment on WebMicroTxn_MakeTransactionID");
static_assert(sizeof(WebMicroTxn_MakeTransactionID) == 0x000010, "Wrong size on WebMicroTxn_MakeTransactionID");
static_assert(offsetof(WebMicroTxn_MakeTransactionID, ReturnValue) == 0x000000, "Member 'WebMicroTxn_MakeTransactionID::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.AdjustAgreement
// 0x0058 (0x0058 - 0x0000)
struct WebMicroTxn_AdjustAgreement final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementId;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NextProcessDate;                                   // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebMicroTxn_AdjustAgreement) == 0x000008, "Wrong alignment on WebMicroTxn_AdjustAgreement");
static_assert(sizeof(WebMicroTxn_AdjustAgreement) == 0x000058, "Wrong size on WebMicroTxn_AdjustAgreement");
static_assert(offsetof(WebMicroTxn_AdjustAgreement, Callback) == 0x000000, "Member 'WebMicroTxn_AdjustAgreement::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_AdjustAgreement, Key) == 0x000010, "Member 'WebMicroTxn_AdjustAgreement::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_AdjustAgreement, SteamID) == 0x000020, "Member 'WebMicroTxn_AdjustAgreement::SteamID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_AdjustAgreement, AgreementId) == 0x000030, "Member 'WebMicroTxn_AdjustAgreement::AgreementId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_AdjustAgreement, AppID) == 0x000040, "Member 'WebMicroTxn_AdjustAgreement::AppID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_AdjustAgreement, NextProcessDate) == 0x000048, "Member 'WebMicroTxn_AdjustAgreement::NextProcessDate' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.CancelAgreement
// 0x0048 (0x0048 - 0x0000)
struct WebMicroTxn_CancelAgreement final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementId;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebMicroTxn_CancelAgreement) == 0x000008, "Wrong alignment on WebMicroTxn_CancelAgreement");
static_assert(sizeof(WebMicroTxn_CancelAgreement) == 0x000048, "Wrong size on WebMicroTxn_CancelAgreement");
static_assert(offsetof(WebMicroTxn_CancelAgreement, Callback) == 0x000000, "Member 'WebMicroTxn_CancelAgreement::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_CancelAgreement, Key) == 0x000010, "Member 'WebMicroTxn_CancelAgreement::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_CancelAgreement, SteamID) == 0x000020, "Member 'WebMicroTxn_CancelAgreement::SteamID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_CancelAgreement, AgreementId) == 0x000030, "Member 'WebMicroTxn_CancelAgreement::AgreementId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_CancelAgreement, AppID) == 0x000040, "Member 'WebMicroTxn_CancelAgreement::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.FinalizeTxn
// 0x0038 (0x0038 - 0x0000)
struct WebMicroTxn_FinalizeTxn final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebMicroTxn_FinalizeTxn) == 0x000008, "Wrong alignment on WebMicroTxn_FinalizeTxn");
static_assert(sizeof(WebMicroTxn_FinalizeTxn) == 0x000038, "Wrong size on WebMicroTxn_FinalizeTxn");
static_assert(offsetof(WebMicroTxn_FinalizeTxn, Callback) == 0x000000, "Member 'WebMicroTxn_FinalizeTxn::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_FinalizeTxn, Key) == 0x000010, "Member 'WebMicroTxn_FinalizeTxn::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_FinalizeTxn, OrderId) == 0x000020, "Member 'WebMicroTxn_FinalizeTxn::OrderId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_FinalizeTxn, AppID) == 0x000030, "Member 'WebMicroTxn_FinalizeTxn::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.GetReport
// 0x0050 (0x0050 - 0x0000)
struct WebMicroTxn_GetReport final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Time;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebMicroTxn_GetReport) == 0x000008, "Wrong alignment on WebMicroTxn_GetReport");
static_assert(sizeof(WebMicroTxn_GetReport) == 0x000050, "Wrong size on WebMicroTxn_GetReport");
static_assert(offsetof(WebMicroTxn_GetReport, Callback) == 0x000000, "Member 'WebMicroTxn_GetReport::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetReport, Key) == 0x000010, "Member 'WebMicroTxn_GetReport::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetReport, AppID) == 0x000020, "Member 'WebMicroTxn_GetReport::AppID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetReport, Time) == 0x000028, "Member 'WebMicroTxn_GetReport::Time' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetReport, Type) == 0x000038, "Member 'WebMicroTxn_GetReport::Type' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetReport, MaxResults) == 0x000048, "Member 'WebMicroTxn_GetReport::MaxResults' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.GetUserAgreementInfo
// 0x0038 (0x0038 - 0x0000)
struct WebMicroTxn_GetUserAgreementInfo final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebMicroTxn_GetUserAgreementInfo) == 0x000008, "Wrong alignment on WebMicroTxn_GetUserAgreementInfo");
static_assert(sizeof(WebMicroTxn_GetUserAgreementInfo) == 0x000038, "Wrong size on WebMicroTxn_GetUserAgreementInfo");
static_assert(offsetof(WebMicroTxn_GetUserAgreementInfo, Callback) == 0x000000, "Member 'WebMicroTxn_GetUserAgreementInfo::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetUserAgreementInfo, Key) == 0x000010, "Member 'WebMicroTxn_GetUserAgreementInfo::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetUserAgreementInfo, SteamID) == 0x000020, "Member 'WebMicroTxn_GetUserAgreementInfo::SteamID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetUserAgreementInfo, AppID) == 0x000030, "Member 'WebMicroTxn_GetUserAgreementInfo::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.GetUserInfo
// 0x0040 (0x0040 - 0x0000)
struct WebMicroTxn_GetUserInfo final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ipaddress;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebMicroTxn_GetUserInfo) == 0x000008, "Wrong alignment on WebMicroTxn_GetUserInfo");
static_assert(sizeof(WebMicroTxn_GetUserInfo) == 0x000040, "Wrong size on WebMicroTxn_GetUserInfo");
static_assert(offsetof(WebMicroTxn_GetUserInfo, Callback) == 0x000000, "Member 'WebMicroTxn_GetUserInfo::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetUserInfo, Key) == 0x000010, "Member 'WebMicroTxn_GetUserInfo::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetUserInfo, SteamID) == 0x000020, "Member 'WebMicroTxn_GetUserInfo::SteamID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_GetUserInfo, Ipaddress) == 0x000030, "Member 'WebMicroTxn_GetUserInfo::Ipaddress' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.InitTxn
// 0x0198 (0x0198 - 0x0000)
struct WebMicroTxn_InitTxn final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserSession;                                       // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ipaddress;                                         // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemId;                                            // 0x0088(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0098(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Amount;                                            // 0x00A8(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Description;                                       // 0x00B8(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Category;                                          // 0x00C8(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssociatedBundle;                                  // 0x00D8(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BillingType;                                       // 0x00E8(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StartDate;                                         // 0x00F8(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EndDate;                                           // 0x0108(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Period;                                            // 0x0118(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Frequency;                                         // 0x0128(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         RecurringAmt;                                      // 0x0138(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BundleCount;                                       // 0x0148(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BundleId;                                          // 0x0158(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BundleQty;                                         // 0x0168(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BundleDesc;                                        // 0x0178(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BundleCategory;                                    // 0x0188(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebMicroTxn_InitTxn) == 0x000008, "Wrong alignment on WebMicroTxn_InitTxn");
static_assert(sizeof(WebMicroTxn_InitTxn) == 0x000198, "Wrong size on WebMicroTxn_InitTxn");
static_assert(offsetof(WebMicroTxn_InitTxn, Callback) == 0x000000, "Member 'WebMicroTxn_InitTxn::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Key) == 0x000010, "Member 'WebMicroTxn_InitTxn::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, OrderId) == 0x000020, "Member 'WebMicroTxn_InitTxn::OrderId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, SteamID) == 0x000030, "Member 'WebMicroTxn_InitTxn::SteamID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, AppID) == 0x000040, "Member 'WebMicroTxn_InitTxn::AppID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Language) == 0x000048, "Member 'WebMicroTxn_InitTxn::Language' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Currency) == 0x000058, "Member 'WebMicroTxn_InitTxn::Currency' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, UserSession) == 0x000068, "Member 'WebMicroTxn_InitTxn::UserSession' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Ipaddress) == 0x000078, "Member 'WebMicroTxn_InitTxn::Ipaddress' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, ItemId) == 0x000088, "Member 'WebMicroTxn_InitTxn::ItemId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Quantity) == 0x000098, "Member 'WebMicroTxn_InitTxn::Quantity' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Amount) == 0x0000A8, "Member 'WebMicroTxn_InitTxn::Amount' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Description) == 0x0000B8, "Member 'WebMicroTxn_InitTxn::Description' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Category) == 0x0000C8, "Member 'WebMicroTxn_InitTxn::Category' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, AssociatedBundle) == 0x0000D8, "Member 'WebMicroTxn_InitTxn::AssociatedBundle' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, BillingType) == 0x0000E8, "Member 'WebMicroTxn_InitTxn::BillingType' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, StartDate) == 0x0000F8, "Member 'WebMicroTxn_InitTxn::StartDate' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, EndDate) == 0x000108, "Member 'WebMicroTxn_InitTxn::EndDate' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Period) == 0x000118, "Member 'WebMicroTxn_InitTxn::Period' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, Frequency) == 0x000128, "Member 'WebMicroTxn_InitTxn::Frequency' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, RecurringAmt) == 0x000138, "Member 'WebMicroTxn_InitTxn::RecurringAmt' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, BundleCount) == 0x000148, "Member 'WebMicroTxn_InitTxn::BundleCount' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, BundleId) == 0x000158, "Member 'WebMicroTxn_InitTxn::BundleId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, BundleQty) == 0x000168, "Member 'WebMicroTxn_InitTxn::BundleQty' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, BundleDesc) == 0x000178, "Member 'WebMicroTxn_InitTxn::BundleDesc' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_InitTxn, BundleCategory) == 0x000188, "Member 'WebMicroTxn_InitTxn::BundleCategory' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.ProcessAgreement
// 0x0068 (0x0068 - 0x0000)
struct WebMicroTxn_ProcessAgreement final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementId;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebMicroTxn_ProcessAgreement) == 0x000008, "Wrong alignment on WebMicroTxn_ProcessAgreement");
static_assert(sizeof(WebMicroTxn_ProcessAgreement) == 0x000068, "Wrong size on WebMicroTxn_ProcessAgreement");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, Callback) == 0x000000, "Member 'WebMicroTxn_ProcessAgreement::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, Key) == 0x000010, "Member 'WebMicroTxn_ProcessAgreement::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, OrderId) == 0x000020, "Member 'WebMicroTxn_ProcessAgreement::OrderId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, SteamID) == 0x000030, "Member 'WebMicroTxn_ProcessAgreement::SteamID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, AgreementId) == 0x000040, "Member 'WebMicroTxn_ProcessAgreement::AgreementId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, AppID) == 0x000050, "Member 'WebMicroTxn_ProcessAgreement::AppID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, Amount) == 0x000054, "Member 'WebMicroTxn_ProcessAgreement::Amount' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_ProcessAgreement, Currency) == 0x000058, "Member 'WebMicroTxn_ProcessAgreement::Currency' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.QueryTxn
// 0x0048 (0x0048 - 0x0000)
struct WebMicroTxn_QueryTxn final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransId;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebMicroTxn_QueryTxn) == 0x000008, "Wrong alignment on WebMicroTxn_QueryTxn");
static_assert(sizeof(WebMicroTxn_QueryTxn) == 0x000048, "Wrong size on WebMicroTxn_QueryTxn");
static_assert(offsetof(WebMicroTxn_QueryTxn, Callback) == 0x000000, "Member 'WebMicroTxn_QueryTxn::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_QueryTxn, Key) == 0x000010, "Member 'WebMicroTxn_QueryTxn::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_QueryTxn, AppID) == 0x000020, "Member 'WebMicroTxn_QueryTxn::AppID' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_QueryTxn, OrderId) == 0x000028, "Member 'WebMicroTxn_QueryTxn::OrderId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_QueryTxn, TransId) == 0x000038, "Member 'WebMicroTxn_QueryTxn::TransId' has a wrong offset!");

// Function SteamCoreWeb.WebMicroTxn.RefundTxn
// 0x0038 (0x0038 - 0x0000)
struct WebMicroTxn_RefundTxn final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebMicroTxn_RefundTxn) == 0x000008, "Wrong alignment on WebMicroTxn_RefundTxn");
static_assert(sizeof(WebMicroTxn_RefundTxn) == 0x000038, "Wrong size on WebMicroTxn_RefundTxn");
static_assert(offsetof(WebMicroTxn_RefundTxn, Callback) == 0x000000, "Member 'WebMicroTxn_RefundTxn::Callback' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_RefundTxn, Key) == 0x000010, "Member 'WebMicroTxn_RefundTxn::Key' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_RefundTxn, OrderId) == 0x000020, "Member 'WebMicroTxn_RefundTxn::OrderId' has a wrong offset!");
static_assert(offsetof(WebMicroTxn_RefundTxn, AppID) == 0x000030, "Member 'WebMicroTxn_RefundTxn::AppID' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionAdjustAgreement.AdjustAgreementAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementId;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NextProcessDate;                                   // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionAdjustAgreement* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync");
static_assert(sizeof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync) == 0x000058, "Wrong size on SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync");
static_assert(offsetof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync, AgreementId) == 0x000028, "Member 'SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync::AgreementId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync, AppID) == 0x000038, "Member 'SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync, NextProcessDate) == 0x000040, "Member 'SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync::NextProcessDate' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync, ReturnValue) == 0x000050, "Member 'SteamCoreWebAsyncActionAdjustAgreement_AdjustAgreementAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionCancelAgreement.CancelAgreementAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementId;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionCancelAgreement* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync");
static_assert(sizeof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync, AgreementId) == 0x000028, "Member 'SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync::AgreementId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync, AppID) == 0x000038, "Member 'SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionCancelAgreement_CancelAgreementAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionFinalizeTxn.FinalizeTxnAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionFinalizeTxn*    ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync");
static_assert(sizeof(SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync, OrderId) == 0x000018, "Member 'SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync::OrderId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionFinalizeTxn_FinalizeTxnAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetReport.GetReportAsync
// 0x0050 (0x0050 - 0x0000)
struct SteamCoreWebAsyncActionGetReport_GetReportAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Time;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetReport*      ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetReport_GetReportAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetReport_GetReportAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetReport_GetReportAsync) == 0x000050, "Wrong size on SteamCoreWebAsyncActionGetReport_GetReportAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetReport_GetReportAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetReport_GetReportAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetReport_GetReportAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetReport_GetReportAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetReport_GetReportAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetReport_GetReportAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetReport_GetReportAsync, Time) == 0x000020, "Member 'SteamCoreWebAsyncActionGetReport_GetReportAsync::Time' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetReport_GetReportAsync, Type) == 0x000030, "Member 'SteamCoreWebAsyncActionGetReport_GetReportAsync::Type' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetReport_GetReportAsync, MaxResults) == 0x000040, "Member 'SteamCoreWebAsyncActionGetReport_GetReportAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetReport_GetReportAsync, ReturnValue) == 0x000048, "Member 'SteamCoreWebAsyncActionGetReport_GetReportAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetUserAgreementInfo.GetUserAgreementInfoAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetUserAgreementInfo* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionGetUserAgreementInfo_GetUserAgreementInfoAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetUserInfo.GetUserInfoAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ipaddress;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetUserInfo*    ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync, Ipaddress) == 0x000028, "Member 'SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync::Ipaddress' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetUserInfo_GetUserInfoAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionInitTxn.InitTxnAsync
// 0x0198 (0x0198 - 0x0000)
struct SteamCoreWebAsyncActionInitTxn_InitTxnAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserSession;                                       // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ipaddress;                                         // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemId;                                            // 0x0080(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0090(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Amount;                                            // 0x00A0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Description;                                       // 0x00B0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Category;                                          // 0x00C0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssociatedBundle;                                  // 0x00D0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BillingType;                                       // 0x00E0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StartDate;                                         // 0x00F0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EndDate;                                           // 0x0100(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Period;                                            // 0x0110(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Frequency;                                         // 0x0120(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         RecurringAmt;                                      // 0x0130(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BundleCount;                                       // 0x0140(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BundleId;                                          // 0x0150(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BundleQty;                                         // 0x0160(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BundleDesc;                                        // 0x0170(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BundleCategory;                                    // 0x0180(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionInitTxn*        ReturnValue;                                       // 0x0190(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionInitTxn_InitTxnAsync");
static_assert(sizeof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync) == 0x000198, "Wrong size on SteamCoreWebAsyncActionInitTxn_InitTxnAsync");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, OrderId) == 0x000018, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::OrderId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, SteamID) == 0x000028, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, AppID) == 0x000038, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Language) == 0x000040, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Currency) == 0x000050, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Currency' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, UserSession) == 0x000060, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::UserSession' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Ipaddress) == 0x000070, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Ipaddress' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, ItemId) == 0x000080, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::ItemId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Quantity) == 0x000090, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Quantity' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Amount) == 0x0000A0, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Amount' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Description) == 0x0000B0, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Description' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Category) == 0x0000C0, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Category' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, AssociatedBundle) == 0x0000D0, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::AssociatedBundle' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, BillingType) == 0x0000E0, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::BillingType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, StartDate) == 0x0000F0, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::StartDate' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, EndDate) == 0x000100, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::EndDate' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Period) == 0x000110, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Period' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, Frequency) == 0x000120, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::Frequency' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, RecurringAmt) == 0x000130, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::RecurringAmt' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, BundleCount) == 0x000140, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::BundleCount' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, BundleId) == 0x000150, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::BundleId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, BundleQty) == 0x000160, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::BundleQty' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, BundleDesc) == 0x000170, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::BundleDesc' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, BundleCategory) == 0x000180, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::BundleCategory' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionInitTxn_InitTxnAsync, ReturnValue) == 0x000190, "Member 'SteamCoreWebAsyncActionInitTxn_InitTxnAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionProcessAgreement.ProcessAgreementAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementId;                                       // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionProcessAgreement* ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync");
static_assert(sizeof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, OrderId) == 0x000018, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::OrderId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, SteamID) == 0x000028, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, AgreementId) == 0x000038, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::AgreementId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, AppID) == 0x000048, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, Amount) == 0x00004C, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::Amount' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, Currency) == 0x000050, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::Currency' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionProcessAgreement_ProcessAgreementAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionQueryTxn.QueryTxnAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransId;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionQueryTxn*       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync");
static_assert(sizeof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync");
static_assert(offsetof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync, OrderId) == 0x000020, "Member 'SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync::OrderId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync, TransId) == 0x000030, "Member 'SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync::TransId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionQueryTxn_QueryTxnAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRefundTxn.RefundTxnAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionRefundTxn*      ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync, OrderId) == 0x000018, "Member 'SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync::OrderId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionRefundTxn_RefundTxnAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebPlayerService.GetBadges
// 0x0030 (0x0030 - 0x0000)
struct WebPlayerService_GetBadges final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPlayerService_GetBadges) == 0x000008, "Wrong alignment on WebPlayerService_GetBadges");
static_assert(sizeof(WebPlayerService_GetBadges) == 0x000030, "Wrong size on WebPlayerService_GetBadges");
static_assert(offsetof(WebPlayerService_GetBadges, Callback) == 0x000000, "Member 'WebPlayerService_GetBadges::Callback' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetBadges, Key) == 0x000010, "Member 'WebPlayerService_GetBadges::Key' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetBadges, SteamID) == 0x000020, "Member 'WebPlayerService_GetBadges::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebPlayerService.GetCommunityBadgeProgress
// 0x0038 (0x0038 - 0x0000)
struct WebPlayerService_GetCommunityBadgeProgress final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BadgeId;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebPlayerService_GetCommunityBadgeProgress) == 0x000008, "Wrong alignment on WebPlayerService_GetCommunityBadgeProgress");
static_assert(sizeof(WebPlayerService_GetCommunityBadgeProgress) == 0x000038, "Wrong size on WebPlayerService_GetCommunityBadgeProgress");
static_assert(offsetof(WebPlayerService_GetCommunityBadgeProgress, Callback) == 0x000000, "Member 'WebPlayerService_GetCommunityBadgeProgress::Callback' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetCommunityBadgeProgress, Key) == 0x000010, "Member 'WebPlayerService_GetCommunityBadgeProgress::Key' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetCommunityBadgeProgress, SteamID) == 0x000020, "Member 'WebPlayerService_GetCommunityBadgeProgress::SteamID' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetCommunityBadgeProgress, BadgeId) == 0x000030, "Member 'WebPlayerService_GetCommunityBadgeProgress::BadgeId' has a wrong offset!");

// Function SteamCoreWeb.WebPlayerService.GetOwnedGames
// 0x0048 (0x0048 - 0x0000)
struct WebPlayerService_GetOwnedGames final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAppInfo;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePlayedFreeGames;                           // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Filter;                                            // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPlayerService_GetOwnedGames) == 0x000008, "Wrong alignment on WebPlayerService_GetOwnedGames");
static_assert(sizeof(WebPlayerService_GetOwnedGames) == 0x000048, "Wrong size on WebPlayerService_GetOwnedGames");
static_assert(offsetof(WebPlayerService_GetOwnedGames, Callback) == 0x000000, "Member 'WebPlayerService_GetOwnedGames::Callback' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetOwnedGames, Key) == 0x000010, "Member 'WebPlayerService_GetOwnedGames::Key' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetOwnedGames, SteamID) == 0x000020, "Member 'WebPlayerService_GetOwnedGames::SteamID' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetOwnedGames, bIncludeAppInfo) == 0x000030, "Member 'WebPlayerService_GetOwnedGames::bIncludeAppInfo' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetOwnedGames, bIncludePlayedFreeGames) == 0x000031, "Member 'WebPlayerService_GetOwnedGames::bIncludePlayedFreeGames' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetOwnedGames, Filter) == 0x000038, "Member 'WebPlayerService_GetOwnedGames::Filter' has a wrong offset!");

// Function SteamCoreWeb.WebPlayerService.GetRecentlyPlayedGames
// 0x0038 (0x0038 - 0x0000)
struct WebPlayerService_GetRecentlyPlayedGames final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebPlayerService_GetRecentlyPlayedGames) == 0x000008, "Wrong alignment on WebPlayerService_GetRecentlyPlayedGames");
static_assert(sizeof(WebPlayerService_GetRecentlyPlayedGames) == 0x000038, "Wrong size on WebPlayerService_GetRecentlyPlayedGames");
static_assert(offsetof(WebPlayerService_GetRecentlyPlayedGames, Callback) == 0x000000, "Member 'WebPlayerService_GetRecentlyPlayedGames::Callback' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetRecentlyPlayedGames, Key) == 0x000010, "Member 'WebPlayerService_GetRecentlyPlayedGames::Key' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetRecentlyPlayedGames, SteamID) == 0x000020, "Member 'WebPlayerService_GetRecentlyPlayedGames::SteamID' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetRecentlyPlayedGames, Count) == 0x000030, "Member 'WebPlayerService_GetRecentlyPlayedGames::Count' has a wrong offset!");

// Function SteamCoreWeb.WebPlayerService.GetSteamLevel
// 0x0030 (0x0030 - 0x0000)
struct WebPlayerService_GetSteamLevel final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPlayerService_GetSteamLevel) == 0x000008, "Wrong alignment on WebPlayerService_GetSteamLevel");
static_assert(sizeof(WebPlayerService_GetSteamLevel) == 0x000030, "Wrong size on WebPlayerService_GetSteamLevel");
static_assert(offsetof(WebPlayerService_GetSteamLevel, Callback) == 0x000000, "Member 'WebPlayerService_GetSteamLevel::Callback' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetSteamLevel, Key) == 0x000010, "Member 'WebPlayerService_GetSteamLevel::Key' has a wrong offset!");
static_assert(offsetof(WebPlayerService_GetSteamLevel, SteamID) == 0x000020, "Member 'WebPlayerService_GetSteamLevel::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebPlayerService.IsPlayingSharedGame
// 0x0038 (0x0038 - 0x0000)
struct WebPlayerService_IsPlayingSharedGame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppIdPlaying;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebPlayerService_IsPlayingSharedGame) == 0x000008, "Wrong alignment on WebPlayerService_IsPlayingSharedGame");
static_assert(sizeof(WebPlayerService_IsPlayingSharedGame) == 0x000038, "Wrong size on WebPlayerService_IsPlayingSharedGame");
static_assert(offsetof(WebPlayerService_IsPlayingSharedGame, Callback) == 0x000000, "Member 'WebPlayerService_IsPlayingSharedGame::Callback' has a wrong offset!");
static_assert(offsetof(WebPlayerService_IsPlayingSharedGame, Key) == 0x000010, "Member 'WebPlayerService_IsPlayingSharedGame::Key' has a wrong offset!");
static_assert(offsetof(WebPlayerService_IsPlayingSharedGame, SteamID) == 0x000020, "Member 'WebPlayerService_IsPlayingSharedGame::SteamID' has a wrong offset!");
static_assert(offsetof(WebPlayerService_IsPlayingSharedGame, AppIdPlaying) == 0x000030, "Member 'WebPlayerService_IsPlayingSharedGame::AppIdPlaying' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetRecentlyPlayedGames.GetRecentlyPlayedGamesAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetRecentlyPlayedGames* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync, Count) == 0x000028, "Member 'SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync::Count' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionGetRecentlyPlayedGames_GetRecentlyPlayedGamesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetOwnedGames.GetOwnedGamesAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAppInfo;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePlayedFreeGames;                           // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Filter;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetOwnedGames*  ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync, bIncludeAppInfo) == 0x000028, "Member 'SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync::bIncludeAppInfo' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync, bIncludePlayedFreeGames) == 0x000029, "Member 'SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync::bIncludePlayedFreeGames' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync, Filter) == 0x000030, "Member 'SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync::Filter' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetOwnedGames_GetOwnedGamesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetSteamLevel.GetSteamLevelAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetSteamLevel*  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetSteamLevel_GetSteamLevelAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetBadges.GetBadgesAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetBadges_GetBadgesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetBadges*      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetBadges_GetBadgesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetBadges_GetBadgesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetBadges_GetBadgesAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetBadges_GetBadgesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetBadges_GetBadgesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetBadges_GetBadgesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetBadges_GetBadgesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetBadges_GetBadgesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetBadges_GetBadgesAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetBadges_GetBadgesAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetBadges_GetBadgesAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetBadges_GetBadgesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetCommunityBadgeProgress.GetCommunityBadgeProgressAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BadgeId;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetCommunityBadgeProgress* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync, BadgeId) == 0x000028, "Member 'SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync::BadgeId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionGetCommunityBadgeProgress_GetCommunityBadgeProgressAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionIsPlayingSharedGame.IsPlayingSharedGameAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppIdPlaying;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionIsPlayingSharedGame* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync");
static_assert(sizeof(SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync");
static_assert(offsetof(SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync, AppIdPlaying) == 0x000028, "Member 'SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync::AppIdPlaying' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionIsPlayingSharedGame_IsPlayingSharedGameAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebPublishedFileService.QueryFiles
// 0x00E8 (0x00E8 - 0x0000)
struct WebPublishedFileService_QueryFiles final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryType;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPerPage;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreatorAppID;                                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequiredTags;                                      // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExcludedTags;                                      // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchAllTags;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequiredFlags;                                     // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OmittedFlags;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchText;                                        // 0x0090(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileType;                                          // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChildPublishedFileId;                              // 0x00A8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x00B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeRecentVotesOnly;                           // 0x00BC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CacheMaxAgeSeconds;                                // 0x00C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Language;                                          // 0x00C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredKvTags;                                    // 0x00C8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTotalOnly;                                        // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIDsOnly;                                          // 0x00D9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnVoteData;                                   // 0x00DA(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnTags;                                       // 0x00DB(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnKvTags;                                     // 0x00DC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnPreviews;                                   // 0x00DD(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnChildren;                                   // 0x00DE(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnShortDescription;                           // 0x00DF(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnForSaleData;                                // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnMetadata;                                   // 0x00E1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnPlaytimeStats;                               // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPublishedFileService_QueryFiles) == 0x000008, "Wrong alignment on WebPublishedFileService_QueryFiles");
static_assert(sizeof(WebPublishedFileService_QueryFiles) == 0x0000E8, "Wrong size on WebPublishedFileService_QueryFiles");
static_assert(offsetof(WebPublishedFileService_QueryFiles, Callback) == 0x000000, "Member 'WebPublishedFileService_QueryFiles::Callback' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, Key) == 0x000010, "Member 'WebPublishedFileService_QueryFiles::Key' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, QueryType) == 0x000020, "Member 'WebPublishedFileService_QueryFiles::QueryType' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, Page) == 0x000024, "Member 'WebPublishedFileService_QueryFiles::Page' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, Cursor) == 0x000028, "Member 'WebPublishedFileService_QueryFiles::Cursor' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, NumPerPage) == 0x000038, "Member 'WebPublishedFileService_QueryFiles::NumPerPage' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, CreatorAppID) == 0x00003C, "Member 'WebPublishedFileService_QueryFiles::CreatorAppID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, AppID) == 0x000040, "Member 'WebPublishedFileService_QueryFiles::AppID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, RequiredTags) == 0x000048, "Member 'WebPublishedFileService_QueryFiles::RequiredTags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, ExcludedTags) == 0x000058, "Member 'WebPublishedFileService_QueryFiles::ExcludedTags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bMatchAllTags) == 0x000068, "Member 'WebPublishedFileService_QueryFiles::bMatchAllTags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, RequiredFlags) == 0x000070, "Member 'WebPublishedFileService_QueryFiles::RequiredFlags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, OmittedFlags) == 0x000080, "Member 'WebPublishedFileService_QueryFiles::OmittedFlags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, SearchText) == 0x000090, "Member 'WebPublishedFileService_QueryFiles::SearchText' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, FileType) == 0x0000A0, "Member 'WebPublishedFileService_QueryFiles::FileType' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, ChildPublishedFileId) == 0x0000A8, "Member 'WebPublishedFileService_QueryFiles::ChildPublishedFileId' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, Days) == 0x0000B8, "Member 'WebPublishedFileService_QueryFiles::Days' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bIncludeRecentVotesOnly) == 0x0000BC, "Member 'WebPublishedFileService_QueryFiles::bIncludeRecentVotesOnly' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, CacheMaxAgeSeconds) == 0x0000C0, "Member 'WebPublishedFileService_QueryFiles::CacheMaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, Language) == 0x0000C4, "Member 'WebPublishedFileService_QueryFiles::Language' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, RequiredKvTags) == 0x0000C8, "Member 'WebPublishedFileService_QueryFiles::RequiredKvTags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bTotalOnly) == 0x0000D8, "Member 'WebPublishedFileService_QueryFiles::bTotalOnly' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bIDsOnly) == 0x0000D9, "Member 'WebPublishedFileService_QueryFiles::bIDsOnly' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnVoteData) == 0x0000DA, "Member 'WebPublishedFileService_QueryFiles::bReturnVoteData' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnTags) == 0x0000DB, "Member 'WebPublishedFileService_QueryFiles::bReturnTags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnKvTags) == 0x0000DC, "Member 'WebPublishedFileService_QueryFiles::bReturnKvTags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnPreviews) == 0x0000DD, "Member 'WebPublishedFileService_QueryFiles::bReturnPreviews' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnChildren) == 0x0000DE, "Member 'WebPublishedFileService_QueryFiles::bReturnChildren' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnShortDescription) == 0x0000DF, "Member 'WebPublishedFileService_QueryFiles::bReturnShortDescription' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnForSaleData) == 0x0000E0, "Member 'WebPublishedFileService_QueryFiles::bReturnForSaleData' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, bReturnMetadata) == 0x0000E1, "Member 'WebPublishedFileService_QueryFiles::bReturnMetadata' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_QueryFiles, ReturnPlaytimeStats) == 0x0000E4, "Member 'WebPublishedFileService_QueryFiles::ReturnPlaytimeStats' has a wrong offset!");

// Function SteamCoreWeb.WebPublishedFileService.SetDeveloperMetadata
// 0x0048 (0x0048 - 0x0000)
struct WebPublishedFileService_SetDeveloperMetadata final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublishedFileID;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MetaData;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPublishedFileService_SetDeveloperMetadata) == 0x000008, "Wrong alignment on WebPublishedFileService_SetDeveloperMetadata");
static_assert(sizeof(WebPublishedFileService_SetDeveloperMetadata) == 0x000048, "Wrong size on WebPublishedFileService_SetDeveloperMetadata");
static_assert(offsetof(WebPublishedFileService_SetDeveloperMetadata, Callback) == 0x000000, "Member 'WebPublishedFileService_SetDeveloperMetadata::Callback' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_SetDeveloperMetadata, Key) == 0x000010, "Member 'WebPublishedFileService_SetDeveloperMetadata::Key' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_SetDeveloperMetadata, PublishedFileID) == 0x000020, "Member 'WebPublishedFileService_SetDeveloperMetadata::PublishedFileID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_SetDeveloperMetadata, AppID) == 0x000030, "Member 'WebPublishedFileService_SetDeveloperMetadata::AppID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_SetDeveloperMetadata, MetaData) == 0x000038, "Member 'WebPublishedFileService_SetDeveloperMetadata::MetaData' has a wrong offset!");

// Function SteamCoreWeb.WebPublishedFileService.UpdateBanStatus
// 0x0048 (0x0048 - 0x0000)
struct WebPublishedFileService_UpdateBanStatus final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublishedFileID;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBanned;                                           // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPublishedFileService_UpdateBanStatus) == 0x000008, "Wrong alignment on WebPublishedFileService_UpdateBanStatus");
static_assert(sizeof(WebPublishedFileService_UpdateBanStatus) == 0x000048, "Wrong size on WebPublishedFileService_UpdateBanStatus");
static_assert(offsetof(WebPublishedFileService_UpdateBanStatus, Callback) == 0x000000, "Member 'WebPublishedFileService_UpdateBanStatus::Callback' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateBanStatus, Key) == 0x000010, "Member 'WebPublishedFileService_UpdateBanStatus::Key' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateBanStatus, PublishedFileID) == 0x000020, "Member 'WebPublishedFileService_UpdateBanStatus::PublishedFileID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateBanStatus, AppID) == 0x000030, "Member 'WebPublishedFileService_UpdateBanStatus::AppID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateBanStatus, bBanned) == 0x000034, "Member 'WebPublishedFileService_UpdateBanStatus::bBanned' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateBanStatus, Reason) == 0x000038, "Member 'WebPublishedFileService_UpdateBanStatus::Reason' has a wrong offset!");

// Function SteamCoreWeb.WebPublishedFileService.UpdateIncompatibleStatus
// 0x0038 (0x0038 - 0x0000)
struct WebPublishedFileService_UpdateIncompatibleStatus final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublishedFileID;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncompatible;                                     // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebPublishedFileService_UpdateIncompatibleStatus) == 0x000008, "Wrong alignment on WebPublishedFileService_UpdateIncompatibleStatus");
static_assert(sizeof(WebPublishedFileService_UpdateIncompatibleStatus) == 0x000038, "Wrong size on WebPublishedFileService_UpdateIncompatibleStatus");
static_assert(offsetof(WebPublishedFileService_UpdateIncompatibleStatus, Callback) == 0x000000, "Member 'WebPublishedFileService_UpdateIncompatibleStatus::Callback' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateIncompatibleStatus, Key) == 0x000010, "Member 'WebPublishedFileService_UpdateIncompatibleStatus::Key' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateIncompatibleStatus, PublishedFileID) == 0x000020, "Member 'WebPublishedFileService_UpdateIncompatibleStatus::PublishedFileID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateIncompatibleStatus, AppID) == 0x000030, "Member 'WebPublishedFileService_UpdateIncompatibleStatus::AppID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateIncompatibleStatus, bIncompatible) == 0x000034, "Member 'WebPublishedFileService_UpdateIncompatibleStatus::bIncompatible' has a wrong offset!");

// Function SteamCoreWeb.WebPublishedFileService.UpdateTags
// 0x0058 (0x0058 - 0x0000)
struct WebPublishedFileService_UpdateTags final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublishedFileID;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddTags;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RemoveTags;                                        // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPublishedFileService_UpdateTags) == 0x000008, "Wrong alignment on WebPublishedFileService_UpdateTags");
static_assert(sizeof(WebPublishedFileService_UpdateTags) == 0x000058, "Wrong size on WebPublishedFileService_UpdateTags");
static_assert(offsetof(WebPublishedFileService_UpdateTags, Callback) == 0x000000, "Member 'WebPublishedFileService_UpdateTags::Callback' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateTags, Key) == 0x000010, "Member 'WebPublishedFileService_UpdateTags::Key' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateTags, PublishedFileID) == 0x000020, "Member 'WebPublishedFileService_UpdateTags::PublishedFileID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateTags, AppID) == 0x000030, "Member 'WebPublishedFileService_UpdateTags::AppID' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateTags, AddTags) == 0x000038, "Member 'WebPublishedFileService_UpdateTags::AddTags' has a wrong offset!");
static_assert(offsetof(WebPublishedFileService_UpdateTags, RemoveTags) == 0x000048, "Member 'WebPublishedFileService_UpdateTags::RemoveTags' has a wrong offset!");

// Function SteamCoreWeb.WebSteamPublishedItemSearch.RankedByPublicationOrder
// 0x0068 (0x0068 - 0x0000)
struct WebSteamPublishedItemSearch_RankedByPublicationOrder final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tag;                                               // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamPublishedItemSearch_RankedByPublicationOrder) == 0x000008, "Wrong alignment on WebSteamPublishedItemSearch_RankedByPublicationOrder");
static_assert(sizeof(WebSteamPublishedItemSearch_RankedByPublicationOrder) == 0x000068, "Wrong size on WebSteamPublishedItemSearch_RankedByPublicationOrder");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, Callback) == 0x000000, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, Key) == 0x000010, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::Key' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, SteamID) == 0x000020, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, AppID) == 0x000030, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, StartId) == 0x000034, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::StartId' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, Count) == 0x000038, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::Count' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, bHasAppAdminAccess) == 0x00003C, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, FileType) == 0x000040, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::FileType' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, Tag) == 0x000048, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::Tag' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByPublicationOrder, UserTag) == 0x000058, "Member 'WebSteamPublishedItemSearch_RankedByPublicationOrder::UserTag' has a wrong offset!");

// Function SteamCoreWeb.WebSteamPublishedItemSearch.RankedByTrend
// 0x0068 (0x0068 - 0x0000)
struct WebSteamPublishedItemSearch_RankedByTrend final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tag;                                               // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamPublishedItemSearch_RankedByTrend) == 0x000008, "Wrong alignment on WebSteamPublishedItemSearch_RankedByTrend");
static_assert(sizeof(WebSteamPublishedItemSearch_RankedByTrend) == 0x000068, "Wrong size on WebSteamPublishedItemSearch_RankedByTrend");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, Callback) == 0x000000, "Member 'WebSteamPublishedItemSearch_RankedByTrend::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, Key) == 0x000010, "Member 'WebSteamPublishedItemSearch_RankedByTrend::Key' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, SteamID) == 0x000020, "Member 'WebSteamPublishedItemSearch_RankedByTrend::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, AppID) == 0x000030, "Member 'WebSteamPublishedItemSearch_RankedByTrend::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, StartId) == 0x000034, "Member 'WebSteamPublishedItemSearch_RankedByTrend::StartId' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, Count) == 0x000038, "Member 'WebSteamPublishedItemSearch_RankedByTrend::Count' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, bHasAppAdminAccess) == 0x00003C, "Member 'WebSteamPublishedItemSearch_RankedByTrend::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, FileType) == 0x000040, "Member 'WebSteamPublishedItemSearch_RankedByTrend::FileType' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, Days) == 0x000044, "Member 'WebSteamPublishedItemSearch_RankedByTrend::Days' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, Tag) == 0x000048, "Member 'WebSteamPublishedItemSearch_RankedByTrend::Tag' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByTrend, UserTag) == 0x000058, "Member 'WebSteamPublishedItemSearch_RankedByTrend::UserTag' has a wrong offset!");

// Function SteamCoreWeb.WebSteamPublishedItemSearch.RankedByVote
// 0x0068 (0x0068 - 0x0000)
struct WebSteamPublishedItemSearch_RankedByVote final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tag;                                               // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamPublishedItemSearch_RankedByVote) == 0x000008, "Wrong alignment on WebSteamPublishedItemSearch_RankedByVote");
static_assert(sizeof(WebSteamPublishedItemSearch_RankedByVote) == 0x000068, "Wrong size on WebSteamPublishedItemSearch_RankedByVote");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, Callback) == 0x000000, "Member 'WebSteamPublishedItemSearch_RankedByVote::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, Key) == 0x000010, "Member 'WebSteamPublishedItemSearch_RankedByVote::Key' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, SteamID) == 0x000020, "Member 'WebSteamPublishedItemSearch_RankedByVote::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, AppID) == 0x000030, "Member 'WebSteamPublishedItemSearch_RankedByVote::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, StartId) == 0x000034, "Member 'WebSteamPublishedItemSearch_RankedByVote::StartId' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, Count) == 0x000038, "Member 'WebSteamPublishedItemSearch_RankedByVote::Count' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, bHasAppAdminAccess) == 0x00003C, "Member 'WebSteamPublishedItemSearch_RankedByVote::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, FileType) == 0x000040, "Member 'WebSteamPublishedItemSearch_RankedByVote::FileType' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, Tag) == 0x000048, "Member 'WebSteamPublishedItemSearch_RankedByVote::Tag' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_RankedByVote, UserTag) == 0x000058, "Member 'WebSteamPublishedItemSearch_RankedByVote::UserTag' has a wrong offset!");

// Function SteamCoreWeb.WebSteamPublishedItemSearch.ResultSetSummary
// 0x0060 (0x0060 - 0x0000)
struct WebSteamPublishedItemSearch_ResultSetSummary final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tag;                                               // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamPublishedItemSearch_ResultSetSummary) == 0x000008, "Wrong alignment on WebSteamPublishedItemSearch_ResultSetSummary");
static_assert(sizeof(WebSteamPublishedItemSearch_ResultSetSummary) == 0x000060, "Wrong size on WebSteamPublishedItemSearch_ResultSetSummary");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, Callback) == 0x000000, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, Key) == 0x000010, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::Key' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, SteamID) == 0x000020, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, AppID) == 0x000030, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, StartId) == 0x000034, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::StartId' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, bHasAppAdminAccess) == 0x000038, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, FileType) == 0x00003C, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::FileType' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, Tag) == 0x000040, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::Tag' has a wrong offset!");
static_assert(offsetof(WebSteamPublishedItemSearch_ResultSetSummary, UserTag) == 0x000050, "Member 'WebSteamPublishedItemSearch_ResultSetSummary::UserTag' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRankedByPublicationOrder.RankedByPublicationOrderAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tag;                                               // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionRankedByPublicationOrder* ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, StartId) == 0x00002C, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::StartId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, Count) == 0x000030, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::Count' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, bHasAppAdminAccess) == 0x000034, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, FileType) == 0x000038, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::FileType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, Tag) == 0x000040, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::Tag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, UserTag) == 0x000050, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::UserTag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionRankedByPublicationOrder_RankedByPublicationOrderAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRankedByTrend.RankedByTrendAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tag;                                               // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionRankedByTrend*  ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, StartId) == 0x00002C, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::StartId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, Count) == 0x000030, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::Count' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, bHasAppAdminAccess) == 0x000034, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, FileType) == 0x000038, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::FileType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, Days) == 0x00003C, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::Days' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, Tag) == 0x000040, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::Tag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, UserTag) == 0x000050, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::UserTag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionRankedByTrend_RankedByTrendAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionRankedByVote.RankedByVoteAsync
// 0x0068 (0x0068 - 0x0000)
struct SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tag;                                               // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionRankedByVote*   ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync");
static_assert(sizeof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync) == 0x000068, "Wrong size on SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, StartId) == 0x00002C, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::StartId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, Count) == 0x000030, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::Count' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, bHasAppAdminAccess) == 0x000034, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, FileType) == 0x000038, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::FileType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, Tag) == 0x000040, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::Tag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, UserTag) == 0x000050, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::UserTag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync, ReturnValue) == 0x000060, "Member 'SteamCoreWebAsyncActionRankedByVote_RankedByVoteAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionResultSetSummary.ResultSetSummaryAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartId;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAppAdminAccess;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FileType;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tag;                                               // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserTag;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionResultSetSummary* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, StartId) == 0x00002C, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::StartId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, bHasAppAdminAccess) == 0x000030, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::bHasAppAdminAccess' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, FileType) == 0x000034, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::FileType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, Tag) == 0x000038, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::Tag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, UserTag) == 0x000048, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::UserTag' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionResultSetSummary_ResultSetSummaryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebPublishedItemVoting.ItemVoteSummary
// 0x0048 (0x0048 - 0x0000)
struct WebPublishedItemVoting_ItemVoteSummary final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PublishedFileIDs;                                  // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPublishedItemVoting_ItemVoteSummary) == 0x000008, "Wrong alignment on WebPublishedItemVoting_ItemVoteSummary");
static_assert(sizeof(WebPublishedItemVoting_ItemVoteSummary) == 0x000048, "Wrong size on WebPublishedItemVoting_ItemVoteSummary");
static_assert(offsetof(WebPublishedItemVoting_ItemVoteSummary, Callback) == 0x000000, "Member 'WebPublishedItemVoting_ItemVoteSummary::Callback' has a wrong offset!");
static_assert(offsetof(WebPublishedItemVoting_ItemVoteSummary, Key) == 0x000010, "Member 'WebPublishedItemVoting_ItemVoteSummary::Key' has a wrong offset!");
static_assert(offsetof(WebPublishedItemVoting_ItemVoteSummary, SteamID) == 0x000020, "Member 'WebPublishedItemVoting_ItemVoteSummary::SteamID' has a wrong offset!");
static_assert(offsetof(WebPublishedItemVoting_ItemVoteSummary, AppID) == 0x000030, "Member 'WebPublishedItemVoting_ItemVoteSummary::AppID' has a wrong offset!");
static_assert(offsetof(WebPublishedItemVoting_ItemVoteSummary, PublishedFileIDs) == 0x000038, "Member 'WebPublishedItemVoting_ItemVoteSummary::PublishedFileIDs' has a wrong offset!");

// Function SteamCoreWeb.WebPublishedItemVoting.UserVoteSummary
// 0x0040 (0x0040 - 0x0000)
struct WebPublishedItemVoting_UserVoteSummary final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PublishedFileIDs;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebPublishedItemVoting_UserVoteSummary) == 0x000008, "Wrong alignment on WebPublishedItemVoting_UserVoteSummary");
static_assert(sizeof(WebPublishedItemVoting_UserVoteSummary) == 0x000040, "Wrong size on WebPublishedItemVoting_UserVoteSummary");
static_assert(offsetof(WebPublishedItemVoting_UserVoteSummary, Callback) == 0x000000, "Member 'WebPublishedItemVoting_UserVoteSummary::Callback' has a wrong offset!");
static_assert(offsetof(WebPublishedItemVoting_UserVoteSummary, Key) == 0x000010, "Member 'WebPublishedItemVoting_UserVoteSummary::Key' has a wrong offset!");
static_assert(offsetof(WebPublishedItemVoting_UserVoteSummary, SteamID) == 0x000020, "Member 'WebPublishedItemVoting_UserVoteSummary::SteamID' has a wrong offset!");
static_assert(offsetof(WebPublishedItemVoting_UserVoteSummary, PublishedFileIDs) == 0x000030, "Member 'WebPublishedItemVoting_UserVoteSummary::PublishedFileIDs' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionItemVoteSummary.ItemVoteSummaryAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PublishedFileIDs;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionItemVoteSummary* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync, PublishedFileIDs) == 0x000030, "Member 'SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionItemVoteSummary_ItemVoteSummaryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionUserVoteSummary.UserVoteSummaryAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PublishedFileIDs;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionUserVoteSummary* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync");
static_assert(sizeof(SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync");
static_assert(offsetof(SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync, PublishedFileIDs) == 0x000028, "Member 'SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionUserVoteSummary_UserVoteSummaryAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.EnumerateUserPublishedFiles
// 0x0038 (0x0038 - 0x0000)
struct WebRemoteStorage_EnumerateUserPublishedFiles final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebRemoteStorage_EnumerateUserPublishedFiles) == 0x000008, "Wrong alignment on WebRemoteStorage_EnumerateUserPublishedFiles");
static_assert(sizeof(WebRemoteStorage_EnumerateUserPublishedFiles) == 0x000038, "Wrong size on WebRemoteStorage_EnumerateUserPublishedFiles");
static_assert(offsetof(WebRemoteStorage_EnumerateUserPublishedFiles, Callback) == 0x000000, "Member 'WebRemoteStorage_EnumerateUserPublishedFiles::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_EnumerateUserPublishedFiles, Key) == 0x000010, "Member 'WebRemoteStorage_EnumerateUserPublishedFiles::Key' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_EnumerateUserPublishedFiles, SteamID) == 0x000020, "Member 'WebRemoteStorage_EnumerateUserPublishedFiles::SteamID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_EnumerateUserPublishedFiles, AppID) == 0x000030, "Member 'WebRemoteStorage_EnumerateUserPublishedFiles::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.EnumerateUserSubscribedFiles
// 0x0038 (0x0038 - 0x0000)
struct WebRemoteStorage_EnumerateUserSubscribedFiles final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListType;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebRemoteStorage_EnumerateUserSubscribedFiles) == 0x000008, "Wrong alignment on WebRemoteStorage_EnumerateUserSubscribedFiles");
static_assert(sizeof(WebRemoteStorage_EnumerateUserSubscribedFiles) == 0x000038, "Wrong size on WebRemoteStorage_EnumerateUserSubscribedFiles");
static_assert(offsetof(WebRemoteStorage_EnumerateUserSubscribedFiles, Callback) == 0x000000, "Member 'WebRemoteStorage_EnumerateUserSubscribedFiles::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_EnumerateUserSubscribedFiles, Key) == 0x000010, "Member 'WebRemoteStorage_EnumerateUserSubscribedFiles::Key' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_EnumerateUserSubscribedFiles, SteamID) == 0x000020, "Member 'WebRemoteStorage_EnumerateUserSubscribedFiles::SteamID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_EnumerateUserSubscribedFiles, AppID) == 0x000030, "Member 'WebRemoteStorage_EnumerateUserSubscribedFiles::AppID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_EnumerateUserSubscribedFiles, ListType) == 0x000034, "Member 'WebRemoteStorage_EnumerateUserSubscribedFiles::ListType' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.GetCollectionDetails
// 0x0020 (0x0020 - 0x0000)
struct WebRemoteStorage_GetCollectionDetails final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PublishedFileIDs;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebRemoteStorage_GetCollectionDetails) == 0x000008, "Wrong alignment on WebRemoteStorage_GetCollectionDetails");
static_assert(sizeof(WebRemoteStorage_GetCollectionDetails) == 0x000020, "Wrong size on WebRemoteStorage_GetCollectionDetails");
static_assert(offsetof(WebRemoteStorage_GetCollectionDetails, Callback) == 0x000000, "Member 'WebRemoteStorage_GetCollectionDetails::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_GetCollectionDetails, PublishedFileIDs) == 0x000010, "Member 'WebRemoteStorage_GetCollectionDetails::PublishedFileIDs' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.GetPublishedFileDetails
// 0x0020 (0x0020 - 0x0000)
struct WebRemoteStorage_GetPublishedFileDetails final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PublishedFileIDs;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebRemoteStorage_GetPublishedFileDetails) == 0x000008, "Wrong alignment on WebRemoteStorage_GetPublishedFileDetails");
static_assert(sizeof(WebRemoteStorage_GetPublishedFileDetails) == 0x000020, "Wrong size on WebRemoteStorage_GetPublishedFileDetails");
static_assert(offsetof(WebRemoteStorage_GetPublishedFileDetails, Callback) == 0x000000, "Member 'WebRemoteStorage_GetPublishedFileDetails::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_GetPublishedFileDetails, PublishedFileIDs) == 0x000010, "Member 'WebRemoteStorage_GetPublishedFileDetails::PublishedFileIDs' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.GetUGCFileDetails
// 0x0048 (0x0048 - 0x0000)
struct WebRemoteStorage_GetUGCFileDetails final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UGCID;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebRemoteStorage_GetUGCFileDetails) == 0x000008, "Wrong alignment on WebRemoteStorage_GetUGCFileDetails");
static_assert(sizeof(WebRemoteStorage_GetUGCFileDetails) == 0x000048, "Wrong size on WebRemoteStorage_GetUGCFileDetails");
static_assert(offsetof(WebRemoteStorage_GetUGCFileDetails, Callback) == 0x000000, "Member 'WebRemoteStorage_GetUGCFileDetails::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_GetUGCFileDetails, Key) == 0x000010, "Member 'WebRemoteStorage_GetUGCFileDetails::Key' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_GetUGCFileDetails, SteamID) == 0x000020, "Member 'WebRemoteStorage_GetUGCFileDetails::SteamID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_GetUGCFileDetails, UGCID) == 0x000030, "Member 'WebRemoteStorage_GetUGCFileDetails::UGCID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_GetUGCFileDetails, AppID) == 0x000040, "Member 'WebRemoteStorage_GetUGCFileDetails::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.SetUGCUsedByGC
// 0x0048 (0x0048 - 0x0000)
struct WebRemoteStorage_SetUGCUsedByGC final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UGCID;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsed;                                             // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebRemoteStorage_SetUGCUsedByGC) == 0x000008, "Wrong alignment on WebRemoteStorage_SetUGCUsedByGC");
static_assert(sizeof(WebRemoteStorage_SetUGCUsedByGC) == 0x000048, "Wrong size on WebRemoteStorage_SetUGCUsedByGC");
static_assert(offsetof(WebRemoteStorage_SetUGCUsedByGC, Callback) == 0x000000, "Member 'WebRemoteStorage_SetUGCUsedByGC::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SetUGCUsedByGC, Key) == 0x000010, "Member 'WebRemoteStorage_SetUGCUsedByGC::Key' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SetUGCUsedByGC, SteamID) == 0x000020, "Member 'WebRemoteStorage_SetUGCUsedByGC::SteamID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SetUGCUsedByGC, UGCID) == 0x000030, "Member 'WebRemoteStorage_SetUGCUsedByGC::UGCID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SetUGCUsedByGC, AppID) == 0x000040, "Member 'WebRemoteStorage_SetUGCUsedByGC::AppID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SetUGCUsedByGC, bUsed) == 0x000044, "Member 'WebRemoteStorage_SetUGCUsedByGC::bUsed' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.SubscribePublishedFile
// 0x0048 (0x0048 - 0x0000)
struct WebRemoteStorage_SubscribePublishedFile final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PublishedFileIDs;                                  // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebRemoteStorage_SubscribePublishedFile) == 0x000008, "Wrong alignment on WebRemoteStorage_SubscribePublishedFile");
static_assert(sizeof(WebRemoteStorage_SubscribePublishedFile) == 0x000048, "Wrong size on WebRemoteStorage_SubscribePublishedFile");
static_assert(offsetof(WebRemoteStorage_SubscribePublishedFile, Callback) == 0x000000, "Member 'WebRemoteStorage_SubscribePublishedFile::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SubscribePublishedFile, Key) == 0x000010, "Member 'WebRemoteStorage_SubscribePublishedFile::Key' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SubscribePublishedFile, SteamID) == 0x000020, "Member 'WebRemoteStorage_SubscribePublishedFile::SteamID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SubscribePublishedFile, AppID) == 0x000030, "Member 'WebRemoteStorage_SubscribePublishedFile::AppID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_SubscribePublishedFile, PublishedFileIDs) == 0x000038, "Member 'WebRemoteStorage_SubscribePublishedFile::PublishedFileIDs' has a wrong offset!");

// Function SteamCoreWeb.WebRemoteStorage.UnsubscribePublishedFile
// 0x0048 (0x0048 - 0x0000)
struct WebRemoteStorage_UnsubscribePublishedFile final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PublishedFileIDs;                                  // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebRemoteStorage_UnsubscribePublishedFile) == 0x000008, "Wrong alignment on WebRemoteStorage_UnsubscribePublishedFile");
static_assert(sizeof(WebRemoteStorage_UnsubscribePublishedFile) == 0x000048, "Wrong size on WebRemoteStorage_UnsubscribePublishedFile");
static_assert(offsetof(WebRemoteStorage_UnsubscribePublishedFile, Callback) == 0x000000, "Member 'WebRemoteStorage_UnsubscribePublishedFile::Callback' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_UnsubscribePublishedFile, Key) == 0x000010, "Member 'WebRemoteStorage_UnsubscribePublishedFile::Key' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_UnsubscribePublishedFile, SteamID) == 0x000020, "Member 'WebRemoteStorage_UnsubscribePublishedFile::SteamID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_UnsubscribePublishedFile, AppID) == 0x000030, "Member 'WebRemoteStorage_UnsubscribePublishedFile::AppID' has a wrong offset!");
static_assert(offsetof(WebRemoteStorage_UnsubscribePublishedFile, PublishedFileIDs) == 0x000038, "Member 'WebRemoteStorage_UnsubscribePublishedFile::PublishedFileIDs' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionEnumerateUserPublishedFiles.EnumerateUserPublishedFilesAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionEnumerateUserPublishedFiles* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionEnumerateUserPublishedFiles_EnumerateUserPublishedFilesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionEnumerateUserSubscribedFiles.EnumerateUserSubscribedFilesAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListType;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionEnumerateUserSubscribedFiles* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync, ListType) == 0x00002C, "Member 'SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync::ListType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionEnumerateUserSubscribedFiles_EnumerateUserSubscribedFilesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetCollectionDetails.GetCollectionDetailsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PublishedFileIDs;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetCollectionDetails* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync) == 0x000020, "Wrong size on SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreWebAsyncActionGetCollectionDetails_GetCollectionDetailsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPublishedFileDetails.GetPublishedFileDetailsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublishedFileIDs;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetPublishedFileDetails* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync) == 0x000020, "Wrong size on SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPublishedFileDetails_GetPublishedFileDetailsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetUGCFileDetails.GetUGCFileDetailsAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UGCID;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetUGCFileDetails* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync, UGCID) == 0x000028, "Member 'SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync::UGCID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync, AppID) == 0x000038, "Member 'SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetUGCFileDetails_GetUGCFileDetailsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionSetUGCUsedByGC.SetUGCUsedByGCAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UGCID;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsed;                                             // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionSetUGCUsedByGC* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync");
static_assert(sizeof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync");
static_assert(offsetof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync, UGCID) == 0x000028, "Member 'SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync::UGCID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync, AppID) == 0x000038, "Member 'SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync, bUsed) == 0x00003C, "Member 'SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync::bUsed' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionSetUGCUsedByGC_SetUGCUsedByGCAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionSubscribePublishedFile.SubscribePublishedFileAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PublishedFileIDs;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionSubscribePublishedFile* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync");
static_assert(sizeof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync");
static_assert(offsetof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync, PublishedFileIDs) == 0x000030, "Member 'SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionSubscribePublishedFile_SubscribePublishedFileAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionUnsubscribePublishedFile.UnsubscribePublishedFileAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PublishedFileIDs;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionUnsubscribePublishedFile* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync");
static_assert(sizeof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync");
static_assert(offsetof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync, PublishedFileIDs) == 0x000030, "Member 'SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionUnsubscribePublishedFile_UnsubscribePublishedFileAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebSteamCommunity.ReportAbuse
// 0x0070 (0x0070 - 0x0000)
struct WebSteamCommunity_ReportAbuse final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamIdActor;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamIdTarget;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbuseType;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentType;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gid;                                               // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamCommunity_ReportAbuse) == 0x000008, "Wrong alignment on WebSteamCommunity_ReportAbuse");
static_assert(sizeof(WebSteamCommunity_ReportAbuse) == 0x000070, "Wrong size on WebSteamCommunity_ReportAbuse");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, Callback) == 0x000000, "Member 'WebSteamCommunity_ReportAbuse::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, Key) == 0x000010, "Member 'WebSteamCommunity_ReportAbuse::Key' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, SteamIdActor) == 0x000020, "Member 'WebSteamCommunity_ReportAbuse::SteamIdActor' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, SteamIdTarget) == 0x000030, "Member 'WebSteamCommunity_ReportAbuse::SteamIdTarget' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, AppID) == 0x000040, "Member 'WebSteamCommunity_ReportAbuse::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, AbuseType) == 0x000044, "Member 'WebSteamCommunity_ReportAbuse::AbuseType' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, ContentType) == 0x000048, "Member 'WebSteamCommunity_ReportAbuse::ContentType' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, Description) == 0x000050, "Member 'WebSteamCommunity_ReportAbuse::Description' has a wrong offset!");
static_assert(offsetof(WebSteamCommunity_ReportAbuse, Gid) == 0x000060, "Member 'WebSteamCommunity_ReportAbuse::Gid' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionReportAbuse.ReportAbuseAsync
// 0x0070 (0x0070 - 0x0000)
struct SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamIdActor;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamIdTarget;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbuseType;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentType;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gid;                                               // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionReportAbuse*    ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync");
static_assert(sizeof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync) == 0x000070, "Wrong size on SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, SteamIdActor) == 0x000018, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::SteamIdActor' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, SteamIdTarget) == 0x000028, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::SteamIdTarget' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, AppID) == 0x000038, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, AbuseType) == 0x00003C, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::AbuseType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, ContentType) == 0x000040, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::ContentType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, Description) == 0x000048, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::Description' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, Gid) == 0x000058, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::Gid' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync, ReturnValue) == 0x000068, "Member 'SteamCoreWebAsyncActionReportAbuse_ReportAbuseAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.CanTrade
// 0x0048 (0x0048 - 0x0000)
struct WebSteamEconomy_CanTrade final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetId;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamEconomy_CanTrade) == 0x000008, "Wrong alignment on WebSteamEconomy_CanTrade");
static_assert(sizeof(WebSteamEconomy_CanTrade) == 0x000048, "Wrong size on WebSteamEconomy_CanTrade");
static_assert(offsetof(WebSteamEconomy_CanTrade, Callback) == 0x000000, "Member 'WebSteamEconomy_CanTrade::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_CanTrade, Key) == 0x000010, "Member 'WebSteamEconomy_CanTrade::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_CanTrade, AppID) == 0x000020, "Member 'WebSteamEconomy_CanTrade::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_CanTrade, SteamID) == 0x000028, "Member 'WebSteamEconomy_CanTrade::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_CanTrade, TargetId) == 0x000038, "Member 'WebSteamEconomy_CanTrade::TargetId' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.FinalizeAssetTransaction
// 0x0058 (0x0058 - 0x0000)
struct WebSteamEconomy_FinalizeAssetTransaction final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TxnId;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamEconomy_FinalizeAssetTransaction) == 0x000008, "Wrong alignment on WebSteamEconomy_FinalizeAssetTransaction");
static_assert(sizeof(WebSteamEconomy_FinalizeAssetTransaction) == 0x000058, "Wrong size on WebSteamEconomy_FinalizeAssetTransaction");
static_assert(offsetof(WebSteamEconomy_FinalizeAssetTransaction, Callback) == 0x000000, "Member 'WebSteamEconomy_FinalizeAssetTransaction::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_FinalizeAssetTransaction, Key) == 0x000010, "Member 'WebSteamEconomy_FinalizeAssetTransaction::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_FinalizeAssetTransaction, AppID) == 0x000020, "Member 'WebSteamEconomy_FinalizeAssetTransaction::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_FinalizeAssetTransaction, SteamID) == 0x000028, "Member 'WebSteamEconomy_FinalizeAssetTransaction::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_FinalizeAssetTransaction, TxnId) == 0x000038, "Member 'WebSteamEconomy_FinalizeAssetTransaction::TxnId' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_FinalizeAssetTransaction, Language) == 0x000048, "Member 'WebSteamEconomy_FinalizeAssetTransaction::Language' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.GetAssetClassInfo
// 0x0060 (0x0060 - 0x0000)
struct WebSteamEconomy_GetAssetClassInfo final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassCount;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClassId;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceID;                                        // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamEconomy_GetAssetClassInfo) == 0x000008, "Wrong alignment on WebSteamEconomy_GetAssetClassInfo");
static_assert(sizeof(WebSteamEconomy_GetAssetClassInfo) == 0x000060, "Wrong size on WebSteamEconomy_GetAssetClassInfo");
static_assert(offsetof(WebSteamEconomy_GetAssetClassInfo, Callback) == 0x000000, "Member 'WebSteamEconomy_GetAssetClassInfo::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetClassInfo, Key) == 0x000010, "Member 'WebSteamEconomy_GetAssetClassInfo::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetClassInfo, AppID) == 0x000020, "Member 'WebSteamEconomy_GetAssetClassInfo::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetClassInfo, Language) == 0x000028, "Member 'WebSteamEconomy_GetAssetClassInfo::Language' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetClassInfo, ClassCount) == 0x000038, "Member 'WebSteamEconomy_GetAssetClassInfo::ClassCount' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetClassInfo, ClassId) == 0x000040, "Member 'WebSteamEconomy_GetAssetClassInfo::ClassId' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetClassInfo, InstanceID) == 0x000050, "Member 'WebSteamEconomy_GetAssetClassInfo::InstanceID' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.GetAssetPrices
// 0x0048 (0x0048 - 0x0000)
struct WebSteamEconomy_GetAssetPrices final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamEconomy_GetAssetPrices) == 0x000008, "Wrong alignment on WebSteamEconomy_GetAssetPrices");
static_assert(sizeof(WebSteamEconomy_GetAssetPrices) == 0x000048, "Wrong size on WebSteamEconomy_GetAssetPrices");
static_assert(offsetof(WebSteamEconomy_GetAssetPrices, Callback) == 0x000000, "Member 'WebSteamEconomy_GetAssetPrices::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetPrices, Key) == 0x000010, "Member 'WebSteamEconomy_GetAssetPrices::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetPrices, AppID) == 0x000020, "Member 'WebSteamEconomy_GetAssetPrices::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetPrices, Currency) == 0x000028, "Member 'WebSteamEconomy_GetAssetPrices::Currency' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetAssetPrices, Language) == 0x000038, "Member 'WebSteamEconomy_GetAssetPrices::Language' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.GetExportedAssetsForUser
// 0x0048 (0x0048 - 0x0000)
struct WebSteamEconomy_GetExportedAssetsForUser final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContextId;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamEconomy_GetExportedAssetsForUser) == 0x000008, "Wrong alignment on WebSteamEconomy_GetExportedAssetsForUser");
static_assert(sizeof(WebSteamEconomy_GetExportedAssetsForUser) == 0x000048, "Wrong size on WebSteamEconomy_GetExportedAssetsForUser");
static_assert(offsetof(WebSteamEconomy_GetExportedAssetsForUser, Callback) == 0x000000, "Member 'WebSteamEconomy_GetExportedAssetsForUser::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetExportedAssetsForUser, Key) == 0x000010, "Member 'WebSteamEconomy_GetExportedAssetsForUser::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetExportedAssetsForUser, SteamID) == 0x000020, "Member 'WebSteamEconomy_GetExportedAssetsForUser::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetExportedAssetsForUser, AppID) == 0x000030, "Member 'WebSteamEconomy_GetExportedAssetsForUser::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetExportedAssetsForUser, ContextId) == 0x000038, "Member 'WebSteamEconomy_GetExportedAssetsForUser::ContextId' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.GetMarketPrices
// 0x0028 (0x0028 - 0x0000)
struct WebSteamEconomy_GetMarketPrices final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebSteamEconomy_GetMarketPrices) == 0x000008, "Wrong alignment on WebSteamEconomy_GetMarketPrices");
static_assert(sizeof(WebSteamEconomy_GetMarketPrices) == 0x000028, "Wrong size on WebSteamEconomy_GetMarketPrices");
static_assert(offsetof(WebSteamEconomy_GetMarketPrices, Callback) == 0x000000, "Member 'WebSteamEconomy_GetMarketPrices::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetMarketPrices, Key) == 0x000010, "Member 'WebSteamEconomy_GetMarketPrices::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_GetMarketPrices, AppID) == 0x000020, "Member 'WebSteamEconomy_GetMarketPrices::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.StartAssetTransaction
// 0x0098 (0x0098 - 0x0000)
struct WebSteamEconomy_StartAssetTransaction final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetId;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssetQuantity;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ipaddress;                                         // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Referer;                                           // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientAuth;                                       // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebSteamEconomy_StartAssetTransaction) == 0x000008, "Wrong alignment on WebSteamEconomy_StartAssetTransaction");
static_assert(sizeof(WebSteamEconomy_StartAssetTransaction) == 0x000098, "Wrong size on WebSteamEconomy_StartAssetTransaction");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, Callback) == 0x000000, "Member 'WebSteamEconomy_StartAssetTransaction::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, Key) == 0x000010, "Member 'WebSteamEconomy_StartAssetTransaction::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, AppID) == 0x000020, "Member 'WebSteamEconomy_StartAssetTransaction::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, SteamID) == 0x000028, "Member 'WebSteamEconomy_StartAssetTransaction::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, AssetId) == 0x000038, "Member 'WebSteamEconomy_StartAssetTransaction::AssetId' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, AssetQuantity) == 0x000048, "Member 'WebSteamEconomy_StartAssetTransaction::AssetQuantity' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, Currency) == 0x000050, "Member 'WebSteamEconomy_StartAssetTransaction::Currency' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, Language) == 0x000060, "Member 'WebSteamEconomy_StartAssetTransaction::Language' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, Ipaddress) == 0x000070, "Member 'WebSteamEconomy_StartAssetTransaction::Ipaddress' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, Referer) == 0x000080, "Member 'WebSteamEconomy_StartAssetTransaction::Referer' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartAssetTransaction, bClientAuth) == 0x000090, "Member 'WebSteamEconomy_StartAssetTransaction::bClientAuth' has a wrong offset!");

// Function SteamCoreWeb.WebSteamEconomy.StartTrade
// 0x0048 (0x0048 - 0x0000)
struct WebSteamEconomy_StartTrade final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamIDd;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId2;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamEconomy_StartTrade) == 0x000008, "Wrong alignment on WebSteamEconomy_StartTrade");
static_assert(sizeof(WebSteamEconomy_StartTrade) == 0x000048, "Wrong size on WebSteamEconomy_StartTrade");
static_assert(offsetof(WebSteamEconomy_StartTrade, Callback) == 0x000000, "Member 'WebSteamEconomy_StartTrade::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartTrade, Key) == 0x000010, "Member 'WebSteamEconomy_StartTrade::Key' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartTrade, AppID) == 0x000020, "Member 'WebSteamEconomy_StartTrade::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartTrade, SteamIDd) == 0x000028, "Member 'WebSteamEconomy_StartTrade::SteamIDd' has a wrong offset!");
static_assert(offsetof(WebSteamEconomy_StartTrade, SteamId2) == 0x000038, "Member 'WebSteamEconomy_StartTrade::SteamId2' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionCanTrade.CanTradeAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionCanTrade_CanTradeAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetId;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionCanTrade*       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionCanTrade_CanTradeAsync");
static_assert(sizeof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionCanTrade_CanTradeAsync");
static_assert(offsetof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionCanTrade_CanTradeAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionCanTrade_CanTradeAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionCanTrade_CanTradeAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionCanTrade_CanTradeAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync, TargetId) == 0x000030, "Member 'SteamCoreWebAsyncActionCanTrade_CanTradeAsync::TargetId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCanTrade_CanTradeAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionCanTrade_CanTradeAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionFinalizeAssetTransaction.FinalizeAssetTransactionAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TxnId;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionFinalizeAssetTransaction* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync");
static_assert(sizeof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync) == 0x000058, "Wrong size on SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync, TxnId) == 0x000030, "Member 'SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync::TxnId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync, Language) == 0x000040, "Member 'SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync, ReturnValue) == 0x000050, "Member 'SteamCoreWebAsyncActionFinalizeAssetTransaction_FinalizeAssetTransactionAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetAssetClassInfo.GetAssetClassInfoAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassCount;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClassId;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceID;                                        // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetAssetClassInfo* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, Language) == 0x000020, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, ClassCount) == 0x000030, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::ClassCount' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, ClassId) == 0x000038, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::ClassId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, InstanceID) == 0x000048, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::InstanceID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionGetAssetClassInfo_GetAssetClassInfoAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetAssetPrices.GetAssetPricesAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetAssetPrices* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync, Currency) == 0x000020, "Member 'SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync::Currency' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync, Language) == 0x000030, "Member 'SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetAssetPrices_GetAssetPricesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetExportedAssetsForUser.GetExportedAssetsForUserAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContextId;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetExportedAssetsForUser* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync, ContextId) == 0x000030, "Member 'SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync::ContextId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetExportedAssetsForUser_GetExportedAssetsForUserAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetMarketPrices.GetMarketPricesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetMarketPrices* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync) == 0x000028, "Wrong size on SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreWebAsyncActionGetMarketPrices_GetMarketPricesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionStartAssetTransaction.StartAssetTransactionAsync
// 0x0098 (0x0098 - 0x0000)
struct SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetId;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssetQuantity;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ipaddress;                                         // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Referer;                                           // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientAuth;                                       // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionStartAssetTransaction* ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync");
static_assert(sizeof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync) == 0x000098, "Wrong size on SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, SteamID) == 0x000020, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, AssetId) == 0x000030, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::AssetId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, AssetQuantity) == 0x000040, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::AssetQuantity' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, Currency) == 0x000048, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::Currency' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, Language) == 0x000058, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, Ipaddress) == 0x000068, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::Ipaddress' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, Referer) == 0x000078, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::Referer' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, bClientAuth) == 0x000088, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::bClientAuth' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync, ReturnValue) == 0x000090, "Member 'SteamCoreWebAsyncActionStartAssetTransaction_StartAssetTransactionAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionStartTrade.StartTradeAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionStartTrade_StartTradeAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamId1;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId2;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionStartTrade*     ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionStartTrade_StartTradeAsync");
static_assert(sizeof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionStartTrade_StartTradeAsync");
static_assert(offsetof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionStartTrade_StartTradeAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionStartTrade_StartTradeAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionStartTrade_StartTradeAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync, SteamId1) == 0x000020, "Member 'SteamCoreWebAsyncActionStartTrade_StartTradeAsync::SteamId1' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync, SteamId2) == 0x000030, "Member 'SteamCoreWebAsyncActionStartTrade_StartTradeAsync::SteamId2' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionStartTrade_StartTradeAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionStartTrade_StartTradeAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebSteamGameServerStats.GetGameServerPlayerStatsForGame
// 0x0060 (0x0060 - 0x0000)
struct WebSteamGameServerStats_GetGameServerPlayerStatsForGame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameID;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RangeStart;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RangeEnd;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame) == 0x000008, "Wrong alignment on WebSteamGameServerStats_GetGameServerPlayerStatsForGame");
static_assert(sizeof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame) == 0x000060, "Wrong size on WebSteamGameServerStats_GetGameServerPlayerStatsForGame");
static_assert(offsetof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame, Callback) == 0x000000, "Member 'WebSteamGameServerStats_GetGameServerPlayerStatsForGame::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame, Key) == 0x000010, "Member 'WebSteamGameServerStats_GetGameServerPlayerStatsForGame::Key' has a wrong offset!");
static_assert(offsetof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame, GameID) == 0x000020, "Member 'WebSteamGameServerStats_GetGameServerPlayerStatsForGame::GameID' has a wrong offset!");
static_assert(offsetof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame, AppID) == 0x000030, "Member 'WebSteamGameServerStats_GetGameServerPlayerStatsForGame::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame, RangeStart) == 0x000038, "Member 'WebSteamGameServerStats_GetGameServerPlayerStatsForGame::RangeStart' has a wrong offset!");
static_assert(offsetof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame, RangeEnd) == 0x000048, "Member 'WebSteamGameServerStats_GetGameServerPlayerStatsForGame::RangeEnd' has a wrong offset!");
static_assert(offsetof(WebSteamGameServerStats_GetGameServerPlayerStatsForGame, MaxResults) == 0x000058, "Member 'WebSteamGameServerStats_GetGameServerPlayerStatsForGame::MaxResults' has a wrong offset!");

// Function SteamCoreWeb.WebSteamNews.GetNewsForApp
// 0x0030 (0x0030 - 0x0000)
struct WebSteamNews_GetNewsForApp final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Feeds;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EndDate;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamNews_GetNewsForApp) == 0x000008, "Wrong alignment on WebSteamNews_GetNewsForApp");
static_assert(sizeof(WebSteamNews_GetNewsForApp) == 0x000030, "Wrong size on WebSteamNews_GetNewsForApp");
static_assert(offsetof(WebSteamNews_GetNewsForApp, Callback) == 0x000000, "Member 'WebSteamNews_GetNewsForApp::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForApp, AppID) == 0x000010, "Member 'WebSteamNews_GetNewsForApp::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForApp, MaxLength) == 0x000014, "Member 'WebSteamNews_GetNewsForApp::MaxLength' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForApp, Feeds) == 0x000018, "Member 'WebSteamNews_GetNewsForApp::Feeds' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForApp, EndDate) == 0x000028, "Member 'WebSteamNews_GetNewsForApp::EndDate' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForApp, Count) == 0x00002C, "Member 'WebSteamNews_GetNewsForApp::Count' has a wrong offset!");

// Function SteamCoreWeb.WebSteamNews.GetNewsForAppAuthed
// 0x0040 (0x0040 - 0x0000)
struct WebSteamNews_GetNewsForAppAuthed final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Feeds;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EndDate;                                           // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamNews_GetNewsForAppAuthed) == 0x000008, "Wrong alignment on WebSteamNews_GetNewsForAppAuthed");
static_assert(sizeof(WebSteamNews_GetNewsForAppAuthed) == 0x000040, "Wrong size on WebSteamNews_GetNewsForAppAuthed");
static_assert(offsetof(WebSteamNews_GetNewsForAppAuthed, Callback) == 0x000000, "Member 'WebSteamNews_GetNewsForAppAuthed::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForAppAuthed, Key) == 0x000010, "Member 'WebSteamNews_GetNewsForAppAuthed::Key' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForAppAuthed, AppID) == 0x000020, "Member 'WebSteamNews_GetNewsForAppAuthed::AppID' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForAppAuthed, MaxLength) == 0x000024, "Member 'WebSteamNews_GetNewsForAppAuthed::MaxLength' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForAppAuthed, Feeds) == 0x000028, "Member 'WebSteamNews_GetNewsForAppAuthed::Feeds' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForAppAuthed, EndDate) == 0x000038, "Member 'WebSteamNews_GetNewsForAppAuthed::EndDate' has a wrong offset!");
static_assert(offsetof(WebSteamNews_GetNewsForAppAuthed, Count) == 0x00003C, "Member 'WebSteamNews_GetNewsForAppAuthed::Count' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetNewsForApp.GetNewsForAppAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Feeds;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EndDate;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetNewsForApp*  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync, AppID) == 0x000008, "Member 'SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync, MaxLength) == 0x00000C, "Member 'SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync::MaxLength' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync, Feeds) == 0x000010, "Member 'SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync::Feeds' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync, EndDate) == 0x000020, "Member 'SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync::EndDate' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync, Count) == 0x000024, "Member 'SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync::Count' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetNewsForApp_GetNewsForAppAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetNewsForAppAuthed.GetNewsForAppAuthedAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Feeds;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EndDate;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetNewsForAppAuthed* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, MaxLength) == 0x00001C, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::MaxLength' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, Feeds) == 0x000020, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::Feeds' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, EndDate) == 0x000030, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::EndDate' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, Count) == 0x000034, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::Count' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetNewsForAppAuthed_GetNewsForAppAuthedAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.CheckAppOwnership
// 0x0038 (0x0038 - 0x0000)
struct WebSteamUser_CheckAppOwnership final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebSteamUser_CheckAppOwnership) == 0x000008, "Wrong alignment on WebSteamUser_CheckAppOwnership");
static_assert(sizeof(WebSteamUser_CheckAppOwnership) == 0x000038, "Wrong size on WebSteamUser_CheckAppOwnership");
static_assert(offsetof(WebSteamUser_CheckAppOwnership, Callback) == 0x000000, "Member 'WebSteamUser_CheckAppOwnership::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_CheckAppOwnership, Key) == 0x000010, "Member 'WebSteamUser_CheckAppOwnership::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_CheckAppOwnership, SteamID) == 0x000020, "Member 'WebSteamUser_CheckAppOwnership::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamUser_CheckAppOwnership, AppID) == 0x000030, "Member 'WebSteamUser_CheckAppOwnership::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GetAppPriceInfo
// 0x0040 (0x0040 - 0x0000)
struct WebSteamUser_GetAppPriceInfo final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AppIDs;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamUser_GetAppPriceInfo) == 0x000008, "Wrong alignment on WebSteamUser_GetAppPriceInfo");
static_assert(sizeof(WebSteamUser_GetAppPriceInfo) == 0x000040, "Wrong size on WebSteamUser_GetAppPriceInfo");
static_assert(offsetof(WebSteamUser_GetAppPriceInfo, Callback) == 0x000000, "Member 'WebSteamUser_GetAppPriceInfo::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetAppPriceInfo, Key) == 0x000010, "Member 'WebSteamUser_GetAppPriceInfo::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetAppPriceInfo, SteamID) == 0x000020, "Member 'WebSteamUser_GetAppPriceInfo::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetAppPriceInfo, AppIDs) == 0x000030, "Member 'WebSteamUser_GetAppPriceInfo::AppIDs' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GetFriendList
// 0x0040 (0x0040 - 0x0000)
struct WebSteamUser_GetFriendList final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Relationship;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamUser_GetFriendList) == 0x000008, "Wrong alignment on WebSteamUser_GetFriendList");
static_assert(sizeof(WebSteamUser_GetFriendList) == 0x000040, "Wrong size on WebSteamUser_GetFriendList");
static_assert(offsetof(WebSteamUser_GetFriendList, Callback) == 0x000000, "Member 'WebSteamUser_GetFriendList::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetFriendList, Key) == 0x000010, "Member 'WebSteamUser_GetFriendList::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetFriendList, SteamID) == 0x000020, "Member 'WebSteamUser_GetFriendList::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetFriendList, Relationship) == 0x000030, "Member 'WebSteamUser_GetFriendList::Relationship' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GetPlayerBans
// 0x0030 (0x0030 - 0x0000)
struct WebSteamUser_GetPlayerBans final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SteamIDs;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamUser_GetPlayerBans) == 0x000008, "Wrong alignment on WebSteamUser_GetPlayerBans");
static_assert(sizeof(WebSteamUser_GetPlayerBans) == 0x000030, "Wrong size on WebSteamUser_GetPlayerBans");
static_assert(offsetof(WebSteamUser_GetPlayerBans, Callback) == 0x000000, "Member 'WebSteamUser_GetPlayerBans::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPlayerBans, Key) == 0x000010, "Member 'WebSteamUser_GetPlayerBans::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPlayerBans, SteamIDs) == 0x000020, "Member 'WebSteamUser_GetPlayerBans::SteamIDs' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GetPlayerSummaries
// 0x0030 (0x0030 - 0x0000)
struct WebSteamUser_GetPlayerSummaries final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SteamIDs;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamUser_GetPlayerSummaries) == 0x000008, "Wrong alignment on WebSteamUser_GetPlayerSummaries");
static_assert(sizeof(WebSteamUser_GetPlayerSummaries) == 0x000030, "Wrong size on WebSteamUser_GetPlayerSummaries");
static_assert(offsetof(WebSteamUser_GetPlayerSummaries, Callback) == 0x000000, "Member 'WebSteamUser_GetPlayerSummaries::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPlayerSummaries, Key) == 0x000010, "Member 'WebSteamUser_GetPlayerSummaries::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPlayerSummaries, SteamIDs) == 0x000020, "Member 'WebSteamUser_GetPlayerSummaries::SteamIDs' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GetPublisherAppOwnership
// 0x0030 (0x0030 - 0x0000)
struct WebSteamUser_GetPublisherAppOwnership final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamUser_GetPublisherAppOwnership) == 0x000008, "Wrong alignment on WebSteamUser_GetPublisherAppOwnership");
static_assert(sizeof(WebSteamUser_GetPublisherAppOwnership) == 0x000030, "Wrong size on WebSteamUser_GetPublisherAppOwnership");
static_assert(offsetof(WebSteamUser_GetPublisherAppOwnership, Callback) == 0x000000, "Member 'WebSteamUser_GetPublisherAppOwnership::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPublisherAppOwnership, Key) == 0x000010, "Member 'WebSteamUser_GetPublisherAppOwnership::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPublisherAppOwnership, SteamID) == 0x000020, "Member 'WebSteamUser_GetPublisherAppOwnership::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GetPublisherAppOwnershipChanges
// 0x0040 (0x0040 - 0x0000)
struct WebSteamUser_GetPublisherAppOwnershipChanges final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageRowVersion;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CDKeyRowVersion;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamUser_GetPublisherAppOwnershipChanges) == 0x000008, "Wrong alignment on WebSteamUser_GetPublisherAppOwnershipChanges");
static_assert(sizeof(WebSteamUser_GetPublisherAppOwnershipChanges) == 0x000040, "Wrong size on WebSteamUser_GetPublisherAppOwnershipChanges");
static_assert(offsetof(WebSteamUser_GetPublisherAppOwnershipChanges, Callback) == 0x000000, "Member 'WebSteamUser_GetPublisherAppOwnershipChanges::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPublisherAppOwnershipChanges, Key) == 0x000010, "Member 'WebSteamUser_GetPublisherAppOwnershipChanges::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPublisherAppOwnershipChanges, PackageRowVersion) == 0x000020, "Member 'WebSteamUser_GetPublisherAppOwnershipChanges::PackageRowVersion' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetPublisherAppOwnershipChanges, CDKeyRowVersion) == 0x000030, "Member 'WebSteamUser_GetPublisherAppOwnershipChanges::CDKeyRowVersion' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GetUserGroupList
// 0x0030 (0x0030 - 0x0000)
struct WebSteamUser_GetUserGroupList final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebSteamUser_GetUserGroupList) == 0x000008, "Wrong alignment on WebSteamUser_GetUserGroupList");
static_assert(sizeof(WebSteamUser_GetUserGroupList) == 0x000030, "Wrong size on WebSteamUser_GetUserGroupList");
static_assert(offsetof(WebSteamUser_GetUserGroupList, Callback) == 0x000000, "Member 'WebSteamUser_GetUserGroupList::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetUserGroupList, Key) == 0x000010, "Member 'WebSteamUser_GetUserGroupList::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GetUserGroupList, SteamID) == 0x000020, "Member 'WebSteamUser_GetUserGroupList::SteamID' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.GrantPackage
// 0x0060 (0x0060 - 0x0000)
struct WebSteamUser_GrantPackage final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackageId;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ipaddress;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThirdPartyKey;                                     // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdPartyAppId;                                   // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebSteamUser_GrantPackage) == 0x000008, "Wrong alignment on WebSteamUser_GrantPackage");
static_assert(sizeof(WebSteamUser_GrantPackage) == 0x000060, "Wrong size on WebSteamUser_GrantPackage");
static_assert(offsetof(WebSteamUser_GrantPackage, Callback) == 0x000000, "Member 'WebSteamUser_GrantPackage::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GrantPackage, Key) == 0x000010, "Member 'WebSteamUser_GrantPackage::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GrantPackage, SteamID) == 0x000020, "Member 'WebSteamUser_GrantPackage::SteamID' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GrantPackage, PackageId) == 0x000030, "Member 'WebSteamUser_GrantPackage::PackageId' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GrantPackage, Ipaddress) == 0x000038, "Member 'WebSteamUser_GrantPackage::Ipaddress' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GrantPackage, ThirdPartyKey) == 0x000048, "Member 'WebSteamUser_GrantPackage::ThirdPartyKey' has a wrong offset!");
static_assert(offsetof(WebSteamUser_GrantPackage, ThirdPartyAppId) == 0x000058, "Member 'WebSteamUser_GrantPackage::ThirdPartyAppId' has a wrong offset!");

// Function SteamCoreWeb.WebSteamUser.ResolveVanityURL
// 0x0038 (0x0038 - 0x0000)
struct WebSteamUser_ResolveVanityURL final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VanityURL;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVanityUrlType                                URLType;                                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebSteamUser_ResolveVanityURL) == 0x000008, "Wrong alignment on WebSteamUser_ResolveVanityURL");
static_assert(sizeof(WebSteamUser_ResolveVanityURL) == 0x000038, "Wrong size on WebSteamUser_ResolveVanityURL");
static_assert(offsetof(WebSteamUser_ResolveVanityURL, Callback) == 0x000000, "Member 'WebSteamUser_ResolveVanityURL::Callback' has a wrong offset!");
static_assert(offsetof(WebSteamUser_ResolveVanityURL, Key) == 0x000010, "Member 'WebSteamUser_ResolveVanityURL::Key' has a wrong offset!");
static_assert(offsetof(WebSteamUser_ResolveVanityURL, VanityURL) == 0x000020, "Member 'WebSteamUser_ResolveVanityURL::VanityURL' has a wrong offset!");
static_assert(offsetof(WebSteamUser_ResolveVanityURL, URLType) == 0x000030, "Member 'WebSteamUser_ResolveVanityURL::URLType' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionCheckAppOwnership.CheckAppOwnershipAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionCheckAppOwnership* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync");
static_assert(sizeof(SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync");
static_assert(offsetof(SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionCheckAppOwnership_CheckAppOwnershipAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetAppPriceInfo.GetAppPriceInfoAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AppIDs;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetAppPriceInfo* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync, AppIDs) == 0x000028, "Member 'SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync::AppIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetAppPriceInfo_GetAppPriceInfoAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetFriendList.GetFriendListAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Relationship;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetFriendList*  ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync, Relationship) == 0x000028, "Member 'SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync::Relationship' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetFriendList_GetFriendListAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPlayerBans.GetPlayerBansAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SteamIDs;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetPlayerBans*  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync, SteamIDs) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync::SteamIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetPlayerBans_GetPlayerBansAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPlayerSummaries.GetPlayerSummariesAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SteamIDs;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetPlayerSummaries* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync, SteamIDs) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync::SteamIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetPlayerSummaries_GetPlayerSummariesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPublisherAppOwnership.GetPublisherAppOwnershipAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetPublisherAppOwnership* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnership_GetPublisherAppOwnershipAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges.GetPublisherAppOwnershipChangesAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageRowVersion;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CDKeyRowVersion;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetPublisherAppOwnershipChanges* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync, PackageRowVersion) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync::PackageRowVersion' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync, CDKeyRowVersion) == 0x000028, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync::CDKeyRowVersion' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges_GetPublisherAppOwnershipChangesAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetUserGroupList.GetUserGroupListAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetUserGroupList* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetUserGroupList_GetUserGroupListAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGrantPackage.GrantPackageAsync
// 0x0060 (0x0060 - 0x0000)
struct SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackageId;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ipaddress;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThirdPartyKey;                                     // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdPartyAppId;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGrantPackage*   ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync) == 0x000060, "Wrong size on SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, PackageId) == 0x000028, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::PackageId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, Ipaddress) == 0x000030, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::Ipaddress' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, ThirdPartyKey) == 0x000040, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::ThirdPartyKey' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, ThirdPartyAppId) == 0x000050, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::ThirdPartyAppId' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync, ReturnValue) == 0x000058, "Member 'SteamCoreWebAsyncActionGrantPackage_GrantPackageAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionResolveVanityURL.ResolveVanityURLAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VanityURL;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVanityUrlType                                URLType;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionResolveVanityURL* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync");
static_assert(sizeof(SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync");
static_assert(offsetof(SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync, VanityURL) == 0x000018, "Member 'SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync::VanityURL' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync, URLType) == 0x000028, "Member 'SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync::URLType' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionResolveVanityURL_ResolveVanityURLAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebUserAuth.AuthenticateUser
// 0x0040 (0x0040 - 0x0000)
struct WebUserAuth_AuthenticateUser final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SessionKey;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 EncryptedLoginKey;                                 // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserAuth_AuthenticateUser) == 0x000008, "Wrong alignment on WebUserAuth_AuthenticateUser");
static_assert(sizeof(WebUserAuth_AuthenticateUser) == 0x000040, "Wrong size on WebUserAuth_AuthenticateUser");
static_assert(offsetof(WebUserAuth_AuthenticateUser, Callback) == 0x000000, "Member 'WebUserAuth_AuthenticateUser::Callback' has a wrong offset!");
static_assert(offsetof(WebUserAuth_AuthenticateUser, SteamID) == 0x000010, "Member 'WebUserAuth_AuthenticateUser::SteamID' has a wrong offset!");
static_assert(offsetof(WebUserAuth_AuthenticateUser, SessionKey) == 0x000020, "Member 'WebUserAuth_AuthenticateUser::SessionKey' has a wrong offset!");
static_assert(offsetof(WebUserAuth_AuthenticateUser, EncryptedLoginKey) == 0x000030, "Member 'WebUserAuth_AuthenticateUser::EncryptedLoginKey' has a wrong offset!");

// Function SteamCoreWeb.WebUserAuth.AuthenticateUserTicket
// 0x0038 (0x0038 - 0x0000)
struct WebUserAuth_AuthenticateUserTicket final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ticket;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserAuth_AuthenticateUserTicket) == 0x000008, "Wrong alignment on WebUserAuth_AuthenticateUserTicket");
static_assert(sizeof(WebUserAuth_AuthenticateUserTicket) == 0x000038, "Wrong size on WebUserAuth_AuthenticateUserTicket");
static_assert(offsetof(WebUserAuth_AuthenticateUserTicket, Callback) == 0x000000, "Member 'WebUserAuth_AuthenticateUserTicket::Callback' has a wrong offset!");
static_assert(offsetof(WebUserAuth_AuthenticateUserTicket, Key) == 0x000010, "Member 'WebUserAuth_AuthenticateUserTicket::Key' has a wrong offset!");
static_assert(offsetof(WebUserAuth_AuthenticateUserTicket, AppID) == 0x000020, "Member 'WebUserAuth_AuthenticateUserTicket::AppID' has a wrong offset!");
static_assert(offsetof(WebUserAuth_AuthenticateUserTicket, Ticket) == 0x000028, "Member 'WebUserAuth_AuthenticateUserTicket::Ticket' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionAuthenticateUser.AuthenticateUserAsync
// 0x0040 (0x0040 - 0x0000)
struct SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SessionKey;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 EncryptedLoginKey;                                 // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionAuthenticateUser* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync");
static_assert(sizeof(SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync) == 0x000040, "Wrong size on SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync, SteamID) == 0x000008, "Member 'SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync, SessionKey) == 0x000018, "Member 'SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync::SessionKey' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync, EncryptedLoginKey) == 0x000028, "Member 'SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync::EncryptedLoginKey' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync, ReturnValue) == 0x000038, "Member 'SteamCoreWebAsyncActionAuthenticateUser_AuthenticateUserAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionAuthenticateUserTicket.AuthenticateUserTicketAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ticket;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionAuthenticateUserTicket* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync");
static_assert(sizeof(SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync, AppID) == 0x000018, "Member 'SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync, Ticket) == 0x000020, "Member 'SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync::Ticket' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionAuthenticateUserTicket_AuthenticateUserTicketAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.WebUserStats.GetGlobalAchievementPercentagesForApp
// 0x0020 (0x0020 - 0x0000)
struct WebUserStats_GetGlobalAchievementPercentagesForApp final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 GameID;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserStats_GetGlobalAchievementPercentagesForApp) == 0x000008, "Wrong alignment on WebUserStats_GetGlobalAchievementPercentagesForApp");
static_assert(sizeof(WebUserStats_GetGlobalAchievementPercentagesForApp) == 0x000020, "Wrong size on WebUserStats_GetGlobalAchievementPercentagesForApp");
static_assert(offsetof(WebUserStats_GetGlobalAchievementPercentagesForApp, Callback) == 0x000000, "Member 'WebUserStats_GetGlobalAchievementPercentagesForApp::Callback' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetGlobalAchievementPercentagesForApp, GameID) == 0x000010, "Member 'WebUserStats_GetGlobalAchievementPercentagesForApp::GameID' has a wrong offset!");

// Function SteamCoreWeb.WebUserStats.GetGlobalStatsForGame
// 0x0030 (0x0030 - 0x0000)
struct WebUserStats_GetGlobalStatsForGame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Names;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartDate;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndDate;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserStats_GetGlobalStatsForGame) == 0x000008, "Wrong alignment on WebUserStats_GetGlobalStatsForGame");
static_assert(sizeof(WebUserStats_GetGlobalStatsForGame) == 0x000030, "Wrong size on WebUserStats_GetGlobalStatsForGame");
static_assert(offsetof(WebUserStats_GetGlobalStatsForGame, Callback) == 0x000000, "Member 'WebUserStats_GetGlobalStatsForGame::Callback' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetGlobalStatsForGame, AppID) == 0x000010, "Member 'WebUserStats_GetGlobalStatsForGame::AppID' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetGlobalStatsForGame, Names) == 0x000018, "Member 'WebUserStats_GetGlobalStatsForGame::Names' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetGlobalStatsForGame, StartDate) == 0x000028, "Member 'WebUserStats_GetGlobalStatsForGame::StartDate' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetGlobalStatsForGame, EndDate) == 0x00002C, "Member 'WebUserStats_GetGlobalStatsForGame::EndDate' has a wrong offset!");

// Function SteamCoreWeb.WebUserStats.GetNumberOfCurrentPlayers
// 0x0014 (0x0014 - 0x0000)
struct WebUserStats_GetNumberOfCurrentPlayers final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserStats_GetNumberOfCurrentPlayers) == 0x000004, "Wrong alignment on WebUserStats_GetNumberOfCurrentPlayers");
static_assert(sizeof(WebUserStats_GetNumberOfCurrentPlayers) == 0x000014, "Wrong size on WebUserStats_GetNumberOfCurrentPlayers");
static_assert(offsetof(WebUserStats_GetNumberOfCurrentPlayers, Callback) == 0x000000, "Member 'WebUserStats_GetNumberOfCurrentPlayers::Callback' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetNumberOfCurrentPlayers, AppID) == 0x000010, "Member 'WebUserStats_GetNumberOfCurrentPlayers::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebUserStats.GetPlayerAchievements
// 0x0048 (0x0048 - 0x0000)
struct WebUserStats_GetPlayerAchievements final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserStats_GetPlayerAchievements) == 0x000008, "Wrong alignment on WebUserStats_GetPlayerAchievements");
static_assert(sizeof(WebUserStats_GetPlayerAchievements) == 0x000048, "Wrong size on WebUserStats_GetPlayerAchievements");
static_assert(offsetof(WebUserStats_GetPlayerAchievements, Callback) == 0x000000, "Member 'WebUserStats_GetPlayerAchievements::Callback' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetPlayerAchievements, Key) == 0x000010, "Member 'WebUserStats_GetPlayerAchievements::Key' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetPlayerAchievements, SteamID) == 0x000020, "Member 'WebUserStats_GetPlayerAchievements::SteamID' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetPlayerAchievements, AppID) == 0x000030, "Member 'WebUserStats_GetPlayerAchievements::AppID' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetPlayerAchievements, Language) == 0x000038, "Member 'WebUserStats_GetPlayerAchievements::Language' has a wrong offset!");

// Function SteamCoreWeb.WebUserStats.GetSchemaForGame
// 0x0048 (0x0048 - 0x0000)
struct WebUserStats_GetSchemaForGame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserStats_GetSchemaForGame) == 0x000008, "Wrong alignment on WebUserStats_GetSchemaForGame");
static_assert(sizeof(WebUserStats_GetSchemaForGame) == 0x000048, "Wrong size on WebUserStats_GetSchemaForGame");
static_assert(offsetof(WebUserStats_GetSchemaForGame, Callback) == 0x000000, "Member 'WebUserStats_GetSchemaForGame::Callback' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetSchemaForGame, Key) == 0x000010, "Member 'WebUserStats_GetSchemaForGame::Key' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetSchemaForGame, SteamID) == 0x000020, "Member 'WebUserStats_GetSchemaForGame::SteamID' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetSchemaForGame, AppID) == 0x000030, "Member 'WebUserStats_GetSchemaForGame::AppID' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetSchemaForGame, Language) == 0x000038, "Member 'WebUserStats_GetSchemaForGame::Language' has a wrong offset!");

// Function SteamCoreWeb.WebUserStats.GetUserStatsForGame
// 0x0038 (0x0038 - 0x0000)
struct WebUserStats_GetUserStatsForGame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WebUserStats_GetUserStatsForGame) == 0x000008, "Wrong alignment on WebUserStats_GetUserStatsForGame");
static_assert(sizeof(WebUserStats_GetUserStatsForGame) == 0x000038, "Wrong size on WebUserStats_GetUserStatsForGame");
static_assert(offsetof(WebUserStats_GetUserStatsForGame, Callback) == 0x000000, "Member 'WebUserStats_GetUserStatsForGame::Callback' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetUserStatsForGame, Key) == 0x000010, "Member 'WebUserStats_GetUserStatsForGame::Key' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetUserStatsForGame, SteamID) == 0x000020, "Member 'WebUserStats_GetUserStatsForGame::SteamID' has a wrong offset!");
static_assert(offsetof(WebUserStats_GetUserStatsForGame, AppID) == 0x000030, "Member 'WebUserStats_GetUserStatsForGame::AppID' has a wrong offset!");

// Function SteamCoreWeb.WebUserStats.SetUserStatsForGame
// 0x0058 (0x0058 - 0x0000)
struct WebUserStats_SetUserStatsForGame final
{
public:
	TDelegate<void(const class FString& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Names;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Values;                                            // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WebUserStats_SetUserStatsForGame) == 0x000008, "Wrong alignment on WebUserStats_SetUserStatsForGame");
static_assert(sizeof(WebUserStats_SetUserStatsForGame) == 0x000058, "Wrong size on WebUserStats_SetUserStatsForGame");
static_assert(offsetof(WebUserStats_SetUserStatsForGame, Callback) == 0x000000, "Member 'WebUserStats_SetUserStatsForGame::Callback' has a wrong offset!");
static_assert(offsetof(WebUserStats_SetUserStatsForGame, Key) == 0x000010, "Member 'WebUserStats_SetUserStatsForGame::Key' has a wrong offset!");
static_assert(offsetof(WebUserStats_SetUserStatsForGame, SteamID) == 0x000020, "Member 'WebUserStats_SetUserStatsForGame::SteamID' has a wrong offset!");
static_assert(offsetof(WebUserStats_SetUserStatsForGame, AppID) == 0x000030, "Member 'WebUserStats_SetUserStatsForGame::AppID' has a wrong offset!");
static_assert(offsetof(WebUserStats_SetUserStatsForGame, Names) == 0x000038, "Member 'WebUserStats_SetUserStatsForGame::Names' has a wrong offset!");
static_assert(offsetof(WebUserStats_SetUserStatsForGame, Values) == 0x000048, "Member 'WebUserStats_SetUserStatsForGame::Values' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp.GetGlobalAchievementPercentagesForAppAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync) == 0x000020, "Wrong size on SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync, GameID) == 0x000008, "Member 'SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync::GameID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync, ReturnValue) == 0x000018, "Member 'SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp_GetGlobalAchievementPercentagesForAppAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetGlobalStatsForGame.GetGlobalStatsForGameAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Names;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartDate;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndDate;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetGlobalStatsForGame* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync) == 0x000030, "Wrong size on SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync, AppID) == 0x000008, "Member 'SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync, Names) == 0x000010, "Member 'SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync::Names' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync, StartDate) == 0x000020, "Member 'SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync::StartDate' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync, EndDate) == 0x000024, "Member 'SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync::EndDate' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync, ReturnValue) == 0x000028, "Member 'SteamCoreWebAsyncActionGetGlobalStatsForGame_GetGlobalStatsForGameAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetNumberOfCurrentPlayers.GetNumberOfCurrentPlayersAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetNumberOfCurrentPlayers* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync) == 0x000018, "Wrong size on SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, AppID) == 0x000008, "Member 'SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, ReturnValue) == 0x000010, "Member 'SteamCoreWebAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetPlayerAchievements.GetPlayerAchievementsAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetPlayerAchievements* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync, Language) == 0x000030, "Member 'SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetPlayerAchievements_GetPlayerAchievementsAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetSchemaForGame.GetSchemaForGameAsync
// 0x0048 (0x0048 - 0x0000)
struct SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionGetSchemaForGame* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync) == 0x000048, "Wrong size on SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync, Language) == 0x000030, "Member 'SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync::Language' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync, ReturnValue) == 0x000040, "Member 'SteamCoreWebAsyncActionGetSchemaForGame_GetSchemaForGameAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionGetUserStatsForGame.GetUserStatsForGameAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreWebAsyncActionGetUserStatsForGame* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync");
static_assert(sizeof(SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync) == 0x000038, "Wrong size on SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync, ReturnValue) == 0x000030, "Member 'SteamCoreWebAsyncActionGetUserStatsForGame_GetUserStatsForGameAsync::ReturnValue' has a wrong offset!");

// Function SteamCoreWeb.SteamCoreWebAsyncActionSetUserStatsForGame.SetUserStatsForGameAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Names;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Values;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USteamCoreWebAsyncActionSetUserStatsForGame* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync) == 0x000008, "Wrong alignment on SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync");
static_assert(sizeof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync) == 0x000058, "Wrong size on SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync");
static_assert(offsetof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync, Key) == 0x000008, "Member 'SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync::Key' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync, SteamID) == 0x000018, "Member 'SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync, AppID) == 0x000028, "Member 'SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync, Names) == 0x000030, "Member 'SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync::Names' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync, Values) == 0x000040, "Member 'SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync::Values' has a wrong offset!");
static_assert(offsetof(SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync, ReturnValue) == 0x000050, "Member 'SteamCoreWebAsyncActionSetUserStatsForGame_SetUserStatsForGameAsync::ReturnValue' has a wrong offset!");

}

